{
  "C:\\Users\\alfre\\OneDrive\\Documentos\\GitHub\\Proyecto\\simotec-sls-develop\\serverless.yml": {
    "versionFramework": "4.9.1",
    "servicePath": "C:\\Users\\alfre\\OneDrive\\Documentos\\GitHub\\Proyecto\\simotec-sls-develop\\serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "simotec-sls",
      "frameworkVersion": "4",
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "timeout": 20,
        "memorySize": 3000,
        "stage": "dev",
        "region": "us-east-2",
        "tags": {
          "CLIENT": "simotec",
          "STAGE": "dev"
        },
        "httpApi": {
          "cors": {
            "allowedOrigins": [
              "*"
            ],
            "allowedHeaders": [
              "*"
            ],
            "allowedMethods": [
              "GET",
              "POST",
              "PUT",
              "DELETE",
              "PATCH",
              "OPTIONS"
            ]
          }
        },
        "environment": {
          "TZ": "America/Santiago",
          "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
          "DB_USER": "admin",
          "DB_PASSWORD": "<REDACTED>",
          "DB_NAME": "simotec",
          "JWT_SECRET": "<REDACTED>",
          "JWT_EXPIRES_IN": "1d",
          "CORS_ORIGIN": "http://localhost:5173"
        },
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "rds:DescribeDBInstances",
              "rds:Connect"
            ],
            "Resource": "*"
          }
        ],
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ListUsersLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-listUsers"
              }
            },
            "ListAllUsersLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-listAllUsers"
              }
            },
            "CreateUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-createUser"
              }
            },
            "EditUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-editUser"
              }
            },
            "DeleteUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-deleteUser"
              }
            },
            "GetDashboardStatsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-getDashboardStats"
              }
            },
            "GetCadminsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-getCadmins"
              }
            },
            "CreateCadminLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-createCadmin"
              }
            },
            "UpdateCadminLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-updateCadmin"
              }
            },
            "DeleteCadminLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-deleteCadmin"
              }
            },
            "GetCompaniesLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-getCompanies"
              }
            },
            "CreateCompanyLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-createCompany"
              }
            },
            "UpdateCompanyLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-updateCompany"
              }
            },
            "DeleteCompanyLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-deleteCompany"
              }
            },
            "LoginLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-login"
              }
            },
            "CreateDashcicleLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-create-cicle"
              }
            },
            "GetDashciclesLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-get-cicles"
              }
            },
            "GetDashcicleLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-get-cicle"
              }
            },
            "UpdateDashcicleLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-update-cicle"
              }
            },
            "DeleteDashcicleLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-delete-cicle"
              }
            },
            "GetAssignedTestsByAuthIdLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-getAssignedTestsByAuthId"
              }
            },
            "GetAssignedTestByIdLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-getAssignedTestById"
              }
            },
            "GetTestQuestionsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-getTestQuestions"
              }
            },
            "SubmitTestLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-submitTest"
              }
            },
            "UpdateTestStatusLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-updateTestStatus"
              }
            },
            "EceListAssignmentsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-eceListAssignments"
              }
            },
            "EceListResponsesLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-eceListResponses"
              }
            },
            "EceSubmitManualEvaluationLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-eceSubmitManualEvaluation"
              }
            },
            "GetTestsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-getTests"
              }
            },
            "AssignTestLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-assignTest"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "simotec-sls",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/simotec-sls-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/simotec-sls-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "rds:DescribeDBInstances",
                            "rds:Connect"
                          ],
                          "Resource": "*"
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "simotec-sls",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "ListUsersLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/users/handler.listUsers",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-listUsers",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ListUsersLogGroup"
              ]
            },
            "ListAllUsersLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/users/handler.listAllUsers",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-listAllUsers",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ListAllUsersLogGroup"
              ]
            },
            "CreateUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/users/handler.createUser",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-createUser",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateUserLogGroup"
              ]
            },
            "EditUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/users/handler.editUser",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-editUser",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "EditUserLogGroup"
              ]
            },
            "DeleteUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/users/handler.deleteUser",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-deleteUser",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteUserLogGroup"
              ]
            },
            "GetDashboardStatsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/users/handler.getDashboardStats",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-getDashboardStats",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetDashboardStatsLogGroup"
              ]
            },
            "GetCadminsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/cadmins/handler.listCadmins",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-getCadmins",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetCadminsLogGroup"
              ]
            },
            "CreateCadminLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/cadmins/handler.createCadmin",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-createCadmin",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateCadminLogGroup"
              ]
            },
            "UpdateCadminLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/cadmins/handler.updateCadmin",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-updateCadmin",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateCadminLogGroup"
              ]
            },
            "DeleteCadminLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/cadmins/handler.deleteCadmin",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-deleteCadmin",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteCadminLogGroup"
              ]
            },
            "GetCompaniesLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/companies/handler.listCompanies",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-getCompanies",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetCompaniesLogGroup"
              ]
            },
            "CreateCompanyLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/companies/handler.createCompany",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-createCompany",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateCompanyLogGroup"
              ]
            },
            "UpdateCompanyLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/companies/handler.editCompany",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-updateCompany",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateCompanyLogGroup"
              ]
            },
            "DeleteCompanyLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/companies/handler.deleteCompany",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-deleteCompany",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteCompanyLogGroup"
              ]
            },
            "LoginLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/auth/handler.loginHandler",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-login",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "LoginLogGroup"
              ]
            },
            "CreateDashcicleLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/cycles/handler.createEvaluationCycle",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-create-cicle",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateDashcicleLogGroup"
              ]
            },
            "GetDashciclesLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/cycles/handler.listCycles",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-get-cicles",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetDashciclesLogGroup"
              ]
            },
            "GetDashcicleLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/cycles/handler.getCycle",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-get-cicle",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetDashcicleLogGroup"
              ]
            },
            "UpdateDashcicleLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/cycles/handler.updateCycle",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-update-cicle",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateDashcicleLogGroup"
              ]
            },
            "DeleteDashcicleLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/cycles/handler.deleteCycle",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-delete-cicle",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteDashcicleLogGroup"
              ]
            },
            "GetAssignedTestsByAuthIdLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/users-tests/handler.getAssignedTests",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-getAssignedTestsByAuthId",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetAssignedTestsByAuthIdLogGroup"
              ]
            },
            "GetAssignedTestByIdLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/users-tests/handler.getAssignedTestById",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-getAssignedTestById",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetAssignedTestByIdLogGroup"
              ]
            },
            "GetTestQuestionsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/users-tests/handler.getTestQuestions",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-getTestQuestions",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetTestQuestionsLogGroup"
              ]
            },
            "SubmitTestLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/users-tests/handler.submitTest",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-submitTest",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "SubmitTestLogGroup"
              ]
            },
            "UpdateTestStatusLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/users-tests/handler.updateTestStatus",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-updateTestStatus",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateTestStatusLogGroup"
              ]
            },
            "EceListAssignmentsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/psicologo/psicologoHandler.listAllECEAssignments",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-eceListAssignments",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "EceListAssignmentsLogGroup"
              ]
            },
            "EceListResponsesLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/psicologo/psicologoHandler.listECEResponses",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-eceListResponses",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "EceListResponsesLogGroup"
              ]
            },
            "EceSubmitManualEvaluationLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/psicologo/psicologoHandler.submitManualEvaluation",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-eceSubmitManualEvaluation",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "EceSubmitManualEvaluationLogGroup"
              ]
            },
            "GetTestsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/tests/handler.getTests",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-getTests",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetTestsLogGroup"
              ]
            },
            "AssignTestLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/tests/handler.assignTest",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-assignTest",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AssignTestLogGroup"
              ]
            },
            "ListUsersLambdaVersionpYZkJMho71HVOqL0lCYKdiFNl04C7Y5YHXf7fZb6U": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ListUsersLambdaFunction"
                },
                "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
              }
            },
            "ListAllUsersLambdaVersionnmNxITYOEjbrBj82QiXzMChlIH6KAqbqRZxB9bv3Dg0": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ListAllUsersLambdaFunction"
                },
                "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
              }
            },
            "CreateUserLambdaVersionVnXojcbjLEkjMJlFP1Vi0lYqhmWNBkGwlA7o7851Rg": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateUserLambdaFunction"
                },
                "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
              }
            },
            "EditUserLambdaVersion8ytPVCzxPPLJlXoy4S2g59r7h4amE1jeaMdROyaYcY": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "EditUserLambdaFunction"
                },
                "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
              }
            },
            "DeleteUserLambdaVersionOHlXS7Digy9N2ln63O0WWJKFd7MQI6PU1cF6LhSfzIE": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteUserLambdaFunction"
                },
                "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
              }
            },
            "GetDashboardStatsLambdaVersionlkGfD8bYSYZ3ngmpEBeVkFimGFRWrW6CvZxm5RVhc": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetDashboardStatsLambdaFunction"
                },
                "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
              }
            },
            "GetCadminsLambdaVersionbAoFUaIFo6P7vB4ASGmsPUoD6Rwl5K0TQBiYykBUUQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetCadminsLambdaFunction"
                },
                "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
              }
            },
            "CreateCadminLambdaVersionOXwfMqnFm2mtMYGXTu2CLfRkCvP0HrjRMU2WIYEXVWE": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateCadminLambdaFunction"
                },
                "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
              }
            },
            "UpdateCadminLambdaVersion3eciZZ5N3BdnlGerUbge68PmrzBFWR4liWpVOMSA6Wg": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateCadminLambdaFunction"
                },
                "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
              }
            },
            "DeleteCadminLambdaVersion8AfNeXMeladYUvAVslGHQgVd3OTwEqgrpEMlqLWvMd4": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteCadminLambdaFunction"
                },
                "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
              }
            },
            "GetCompaniesLambdaVersionniFWcGBHjcwylPLnta97ja4WbiJBLCvfTbudhH8avI": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetCompaniesLambdaFunction"
                },
                "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
              }
            },
            "CreateCompanyLambdaVersionCcNdaZ7Am5jWhXdzAzJXy6BRe6f3BMpe4H98G8ebCs": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateCompanyLambdaFunction"
                },
                "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
              }
            },
            "UpdateCompanyLambdaVersionDmBIDvXF6EsckMpOvQSHz8XJGd4zaKn2EOLTbmH8A": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateCompanyLambdaFunction"
                },
                "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
              }
            },
            "DeleteCompanyLambdaVersionkiLqxoow3EdwCJEjrI58MZfZbATH4xhdq33S4pPjw": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteCompanyLambdaFunction"
                },
                "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
              }
            },
            "LoginLambdaVersiono2uOPbWY9lCfp1KvrlLyoOJpfodUcqudWRAFRSQEx8E": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "LoginLambdaFunction"
                },
                "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
              }
            },
            "CreateDashcicleLambdaVersionGKQQ0QBnU4bfLLVzjWpBDh7KwN93jaW8Aezba2wdxwk": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateDashcicleLambdaFunction"
                },
                "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
              }
            },
            "GetDashciclesLambdaVersionsYIDcjwg6rRvYiIBH9TwnVbNpbU1iiaj5X55w0n9so": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetDashciclesLambdaFunction"
                },
                "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
              }
            },
            "GetDashcicleLambdaVersionqWmm0JFYasGMnNiRkQpGimXZl0Exw6JeOCTjy5bIBA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetDashcicleLambdaFunction"
                },
                "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
              }
            },
            "UpdateDashcicleLambdaVersiona2n3xUpbnFuzJkvmtCtOmrxBhAAWVXtOqUvyKDoUUEk": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateDashcicleLambdaFunction"
                },
                "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
              }
            },
            "DeleteDashcicleLambdaVersion8PbPvmmebMPSrPSHbW3HxEubkHHPmmY0pWX9jQ252Wk": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteDashcicleLambdaFunction"
                },
                "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
              }
            },
            "GetAssignedTestsByAuthIdLambdaVersionVBZOFiTL1vRENAyv2nSaLE6Z4becSD1orUlgsuHg784": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetAssignedTestsByAuthIdLambdaFunction"
                },
                "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
              }
            },
            "GetAssignedTestByIdLambdaVersionelocRNip77wypblIpYLqOutZr2DsU9rlzeTFWdLlFA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetAssignedTestByIdLambdaFunction"
                },
                "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
              }
            },
            "GetTestQuestionsLambdaVersionftsPo9mpGbU9QekpM504hQczaUD3kE2zJ5NdpXiA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetTestQuestionsLambdaFunction"
                },
                "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
              }
            },
            "SubmitTestLambdaVersion2sJCDA0An1MlHYnPZhTBEalpsTrsAYIUz94tTYsC3Q": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "SubmitTestLambdaFunction"
                },
                "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
              }
            },
            "UpdateTestStatusLambdaVersion9M5tKSvOweS52JbaLGDsWDfI6NS2qwvF8QlSYuqRfo": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateTestStatusLambdaFunction"
                },
                "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
              }
            },
            "EceListAssignmentsLambdaVersionjWb2wx4Gvw3FVmRox6327G19LSpNi5pjYl9lMFP9vPI": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "EceListAssignmentsLambdaFunction"
                },
                "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
              }
            },
            "EceListResponsesLambdaVersionOI5BpdKnpxq0VomyuUK04XCgjKGtFcPlWAnEyk88YU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "EceListResponsesLambdaFunction"
                },
                "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
              }
            },
            "EceSubmitManualEvaluationLambdaVersionSy4mGYrP3e5F9VMOYUy86khdOTe7usI3PZtT9FXqWw": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "EceSubmitManualEvaluationLambdaFunction"
                },
                "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
              }
            },
            "GetTestsLambdaVersion9vNLcmQwWN1ClRczL53AACNC53DIUOxyYkm8WWvoM1I": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetTestsLambdaFunction"
                },
                "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
              }
            },
            "AssignTestLambdaVersion9xANjCVzUBJjylhd1bDZiV28WSLMfLV9u3XHa74LZk": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AssignTestLambdaFunction"
                },
                "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
              }
            },
            "HttpApi": {
              "Type": "AWS::ApiGatewayV2::Api",
              "Properties": {
                "Name": "dev-simotec-sls",
                "ProtocolType": "HTTP",
                "Tags": {
                  "CLIENT": "simotec",
                  "STAGE": "dev"
                },
                "CorsConfiguration": {
                  "AllowCredentials": "<REDACTED>",
                  "AllowHeaders": [
                    "*"
                  ],
                  "AllowMethods": [
                    "GET",
                    "POST",
                    "PUT",
                    "DELETE",
                    "PATCH",
                    "OPTIONS"
                  ],
                  "AllowOrigins": [
                    "*"
                  ]
                }
              }
            },
            "HttpApiStage": {
              "Type": "AWS::ApiGatewayV2::Stage",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "StageName": "$default",
                "AutoDeploy": true,
                "DefaultRouteSettings": {
                  "DetailedMetricsEnabled": false
                },
                "Tags": {
                  "CLIENT": "simotec",
                  "STAGE": "dev"
                }
              }
            },
            "ListUsersLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ListUsersLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationListUsers": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "ListUsersLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetUsers": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /users",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationListUsers"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationListUsers"
            },
            "ListAllUsersLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ListAllUsersLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationListAllUsers": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "ListAllUsersLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetUsersAll": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /users/all",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationListAllUsers"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationListAllUsers"
            },
            "CreateUserLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationCreateUser": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "CreateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostUsers": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /users",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationCreateUser"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationCreateUser"
            },
            "EditUserLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "EditUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationEditUser": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "EditUserLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePutUsersIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PUT /users/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationEditUser"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationEditUser"
            },
            "DeleteUserLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationDeleteUser": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "DeleteUserLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteDeleteUsersIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "DELETE /users/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationDeleteUser"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationDeleteUser"
            },
            "GetDashboardStatsLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetDashboardStatsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetDashboardStats": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetDashboardStatsLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetDashboardRegularDashusersCount": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /dashboard/regular-users/count",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetDashboardStats"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetDashboardStats"
            },
            "HttpApiRouteGetDashboardAssignedDashtestsCount": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /dashboard/assigned-tests/count",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetDashboardStats"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetDashboardStats"
            },
            "GetCadminsLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetCadminsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetCadmins": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetCadminsLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetCadmins": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /cadmins",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetCadmins"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetCadmins"
            },
            "CreateCadminLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateCadminLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationCreateCadmin": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "CreateCadminLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostCadmins": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /cadmins",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationCreateCadmin"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationCreateCadmin"
            },
            "UpdateCadminLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateCadminLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationUpdateCadmin": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "UpdateCadminLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePutCadminsIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PUT /cadmins/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationUpdateCadmin"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationUpdateCadmin"
            },
            "DeleteCadminLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteCadminLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationDeleteCadmin": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "DeleteCadminLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteDeleteCadminsIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "DELETE /cadmins/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationDeleteCadmin"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationDeleteCadmin"
            },
            "GetCompaniesLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetCompaniesLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetCompanies": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetCompaniesLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetCompanies": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /companies",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetCompanies"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetCompanies"
            },
            "CreateCompanyLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateCompanyLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationCreateCompany": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "CreateCompanyLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostCompanies": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /companies",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationCreateCompany"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationCreateCompany"
            },
            "UpdateCompanyLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateCompanyLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationUpdateCompany": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "UpdateCompanyLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePutCompaniesIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PUT /companies/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationUpdateCompany"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationUpdateCompany"
            },
            "DeleteCompanyLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteCompanyLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationDeleteCompany": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "DeleteCompanyLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteDeleteCompaniesIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "DELETE /companies/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationDeleteCompany"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationDeleteCompany"
            },
            "LoginLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "LoginLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationLogin": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "LoginLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostAuthLogin": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /auth/login",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationLogin"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationLogin"
            },
            "CreateDashcicleLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateDashcicleLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationCreateDashcicle": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "CreateDashcicleLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostCycles": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /cycles",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationCreateDashcicle"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationCreateDashcicle"
            },
            "GetDashciclesLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetDashciclesLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetDashcicles": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetDashciclesLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetCycles": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /cycles",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetDashcicles"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetDashcicles"
            },
            "GetDashcicleLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetDashcicleLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetDashcicle": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetDashcicleLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetCyclesIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /cycles/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetDashcicle"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetDashcicle"
            },
            "UpdateDashcicleLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateDashcicleLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationUpdateDashcicle": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "UpdateDashcicleLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePutCyclesIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PUT /cycles/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationUpdateDashcicle"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationUpdateDashcicle"
            },
            "DeleteDashcicleLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteDashcicleLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationDeleteDashcicle": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "DeleteDashcicleLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteDeleteCyclesIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "DELETE /cycles/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationDeleteDashcicle"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationDeleteDashcicle"
            },
            "GetAssignedTestsByAuthIdLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetAssignedTestsByAuthIdLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetAssignedTestsByAuthId": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetAssignedTestsByAuthIdLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetAssignedDashtestsAuthDashuserAuthuseridVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /assigned-tests/auth-user/{auth_user_id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetAssignedTestsByAuthId"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetAssignedTestsByAuthId"
            },
            "GetAssignedTestByIdLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetAssignedTestByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetAssignedTestById": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetAssignedTestByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetAssignedDashtestsAssignedtestidVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /assigned-tests/{assigned_test_id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetAssignedTestById"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetAssignedTestById"
            },
            "GetTestQuestionsLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetTestQuestionsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetTestQuestions": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetTestQuestionsLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetUserDashtestsTestidVarQuestions": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /user-tests/{test_id}/questions",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetTestQuestions"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetTestQuestions"
            },
            "SubmitTestLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "SubmitTestLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationSubmitTest": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "SubmitTestLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostUserDashtestsTestidVarSubmit": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /user-tests/{test_id}/submit",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationSubmitTest"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationSubmitTest"
            },
            "UpdateTestStatusLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateTestStatusLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationUpdateTestStatus": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "UpdateTestStatusLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePatchUserDashtestsAssignedtestidVarStatus": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PATCH /user-tests/{assigned_test_id}/status",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationUpdateTestStatus"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationUpdateTestStatus"
            },
            "EceListAssignmentsLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "EceListAssignmentsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationEceListAssignments": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "EceListAssignmentsLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetEceAsignaciones": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /ece/asignaciones",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationEceListAssignments"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationEceListAssignments"
            },
            "EceListResponsesLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "EceListResponsesLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationEceListResponses": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "EceListResponsesLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetEceRespuestas": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /ece/respuestas",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationEceListResponses"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationEceListResponses"
            },
            "EceSubmitManualEvaluationLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "EceSubmitManualEvaluationLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationEceSubmitManualEvaluation": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "EceSubmitManualEvaluationLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostEceEvaluar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /ece/evaluar",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationEceSubmitManualEvaluation"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationEceSubmitManualEvaluation"
            },
            "GetTestsLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetTestsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetTests": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetTestsLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetTests": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /tests",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetTests"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetTests"
            },
            "AssignTestLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AssignTestLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationAssignTest": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "AssignTestLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostTestsAssign": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /tests/assign",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationAssignTest"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationAssignTest"
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "Export": {
                "Name": "sls-simotec-sls-dev-ServerlessDeploymentBucketName"
              }
            },
            "ListUsersLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ListUsersLambdaVersionpYZkJMho71HVOqL0lCYKdiFNl04C7Y5YHXf7fZb6U"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-ListUsersLambdaFunctionQualifiedArn"
              }
            },
            "ListAllUsersLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ListAllUsersLambdaVersionnmNxITYOEjbrBj82QiXzMChlIH6KAqbqRZxB9bv3Dg0"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-ListAllUsersLambdaFunctionQualifiedArn"
              }
            },
            "CreateUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateUserLambdaVersionVnXojcbjLEkjMJlFP1Vi0lYqhmWNBkGwlA7o7851Rg"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-CreateUserLambdaFunctionQualifiedArn"
              }
            },
            "EditUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "EditUserLambdaVersion8ytPVCzxPPLJlXoy4S2g59r7h4amE1jeaMdROyaYcY"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-EditUserLambdaFunctionQualifiedArn"
              }
            },
            "DeleteUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteUserLambdaVersionOHlXS7Digy9N2ln63O0WWJKFd7MQI6PU1cF6LhSfzIE"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-DeleteUserLambdaFunctionQualifiedArn"
              }
            },
            "GetDashboardStatsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetDashboardStatsLambdaVersionlkGfD8bYSYZ3ngmpEBeVkFimGFRWrW6CvZxm5RVhc"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-GetDashboardStatsLambdaFunctionQualifiedArn"
              }
            },
            "GetCadminsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetCadminsLambdaVersionbAoFUaIFo6P7vB4ASGmsPUoD6Rwl5K0TQBiYykBUUQ"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-GetCadminsLambdaFunctionQualifiedArn"
              }
            },
            "CreateCadminLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateCadminLambdaVersionOXwfMqnFm2mtMYGXTu2CLfRkCvP0HrjRMU2WIYEXVWE"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-CreateCadminLambdaFunctionQualifiedArn"
              }
            },
            "UpdateCadminLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateCadminLambdaVersion3eciZZ5N3BdnlGerUbge68PmrzBFWR4liWpVOMSA6Wg"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-UpdateCadminLambdaFunctionQualifiedArn"
              }
            },
            "DeleteCadminLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteCadminLambdaVersion8AfNeXMeladYUvAVslGHQgVd3OTwEqgrpEMlqLWvMd4"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-DeleteCadminLambdaFunctionQualifiedArn"
              }
            },
            "GetCompaniesLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetCompaniesLambdaVersionniFWcGBHjcwylPLnta97ja4WbiJBLCvfTbudhH8avI"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-GetCompaniesLambdaFunctionQualifiedArn"
              }
            },
            "CreateCompanyLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateCompanyLambdaVersionCcNdaZ7Am5jWhXdzAzJXy6BRe6f3BMpe4H98G8ebCs"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-CreateCompanyLambdaFunctionQualifiedArn"
              }
            },
            "UpdateCompanyLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateCompanyLambdaVersionDmBIDvXF6EsckMpOvQSHz8XJGd4zaKn2EOLTbmH8A"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-UpdateCompanyLambdaFunctionQualifiedArn"
              }
            },
            "DeleteCompanyLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteCompanyLambdaVersionkiLqxoow3EdwCJEjrI58MZfZbATH4xhdq33S4pPjw"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-DeleteCompanyLambdaFunctionQualifiedArn"
              }
            },
            "LoginLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "LoginLambdaVersiono2uOPbWY9lCfp1KvrlLyoOJpfodUcqudWRAFRSQEx8E"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-LoginLambdaFunctionQualifiedArn"
              }
            },
            "CreateDashcicleLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateDashcicleLambdaVersionGKQQ0QBnU4bfLLVzjWpBDh7KwN93jaW8Aezba2wdxwk"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-CreateDashcicleLambdaFunctionQualifiedArn"
              }
            },
            "GetDashciclesLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetDashciclesLambdaVersionsYIDcjwg6rRvYiIBH9TwnVbNpbU1iiaj5X55w0n9so"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-GetDashciclesLambdaFunctionQualifiedArn"
              }
            },
            "GetDashcicleLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetDashcicleLambdaVersionqWmm0JFYasGMnNiRkQpGimXZl0Exw6JeOCTjy5bIBA"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-GetDashcicleLambdaFunctionQualifiedArn"
              }
            },
            "UpdateDashcicleLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateDashcicleLambdaVersiona2n3xUpbnFuzJkvmtCtOmrxBhAAWVXtOqUvyKDoUUEk"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-UpdateDashcicleLambdaFunctionQualifiedArn"
              }
            },
            "DeleteDashcicleLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteDashcicleLambdaVersion8PbPvmmebMPSrPSHbW3HxEubkHHPmmY0pWX9jQ252Wk"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-DeleteDashcicleLambdaFunctionQualifiedArn"
              }
            },
            "GetAssignedTestsByAuthIdLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetAssignedTestsByAuthIdLambdaVersionVBZOFiTL1vRENAyv2nSaLE6Z4becSD1orUlgsuHg784"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-GetAssignedTestsByAuthIdLambdaFunctionQualifiedArn"
              }
            },
            "GetAssignedTestByIdLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetAssignedTestByIdLambdaVersionelocRNip77wypblIpYLqOutZr2DsU9rlzeTFWdLlFA"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-GetAssignedTestByIdLambdaFunctionQualifiedArn"
              }
            },
            "GetTestQuestionsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetTestQuestionsLambdaVersionftsPo9mpGbU9QekpM504hQczaUD3kE2zJ5NdpXiA"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-GetTestQuestionsLambdaFunctionQualifiedArn"
              }
            },
            "SubmitTestLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "SubmitTestLambdaVersion2sJCDA0An1MlHYnPZhTBEalpsTrsAYIUz94tTYsC3Q"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-SubmitTestLambdaFunctionQualifiedArn"
              }
            },
            "UpdateTestStatusLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateTestStatusLambdaVersion9M5tKSvOweS52JbaLGDsWDfI6NS2qwvF8QlSYuqRfo"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-UpdateTestStatusLambdaFunctionQualifiedArn"
              }
            },
            "EceListAssignmentsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "EceListAssignmentsLambdaVersionjWb2wx4Gvw3FVmRox6327G19LSpNi5pjYl9lMFP9vPI"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-EceListAssignmentsLambdaFunctionQualifiedArn"
              }
            },
            "EceListResponsesLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "EceListResponsesLambdaVersionOI5BpdKnpxq0VomyuUK04XCgjKGtFcPlWAnEyk88YU"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-EceListResponsesLambdaFunctionQualifiedArn"
              }
            },
            "EceSubmitManualEvaluationLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "EceSubmitManualEvaluationLambdaVersionSy4mGYrP3e5F9VMOYUy86khdOTe7usI3PZtT9FXqWw"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-EceSubmitManualEvaluationLambdaFunctionQualifiedArn"
              }
            },
            "GetTestsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetTestsLambdaVersion9vNLcmQwWN1ClRczL53AACNC53DIUOxyYkm8WWvoM1I"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-GetTestsLambdaFunctionQualifiedArn"
              }
            },
            "AssignTestLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AssignTestLambdaVersion9xANjCVzUBJjylhd1bDZiV28WSLMfLV9u3XHa74LZk"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-AssignTestLambdaFunctionQualifiedArn"
              }
            },
            "HttpApiId": {
              "Description": "Id of the HTTP API",
              "Value": {
                "Ref": "HttpApi"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-HttpApiId"
              }
            },
            "HttpApiUrl": {
              "Description": "URL of the HTTP API",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "HttpApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-HttpApiUrl"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "listUsers": {
          "handler": "src/maintainers/users/handler.listUsers",
          "events": [
            {
              "httpApi": {
                "path": "/users",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/users"
            }
          ],
          "name": "simotec-sls-dev-listUsers",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ListUsersLambdaVersionpYZkJMho71HVOqL0lCYKdiFNl04C7Y5YHXf7fZb6U"
        },
        "listAllUsers": {
          "handler": "src/maintainers/users/handler.listAllUsers",
          "events": [
            {
              "httpApi": {
                "path": "/users/all",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/users/all"
            }
          ],
          "name": "simotec-sls-dev-listAllUsers",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ListAllUsersLambdaVersionnmNxITYOEjbrBj82QiXzMChlIH6KAqbqRZxB9bv3Dg0"
        },
        "createUser": {
          "handler": "src/maintainers/users/handler.createUser",
          "events": [
            {
              "httpApi": {
                "path": "/users",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/users"
            }
          ],
          "name": "simotec-sls-dev-createUser",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "CreateUserLambdaVersionVnXojcbjLEkjMJlFP1Vi0lYqhmWNBkGwlA7o7851Rg"
        },
        "editUser": {
          "handler": "src/maintainers/users/handler.editUser",
          "events": [
            {
              "httpApi": {
                "path": "/users/{id}",
                "method": "put"
              },
              "resolvedMethod": "PUT",
              "resolvedPath": "/users/{id}"
            }
          ],
          "name": "simotec-sls-dev-editUser",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "EditUserLambdaVersion8ytPVCzxPPLJlXoy4S2g59r7h4amE1jeaMdROyaYcY"
        },
        "deleteUser": {
          "handler": "src/maintainers/users/handler.deleteUser",
          "events": [
            {
              "httpApi": {
                "path": "/users/{id}",
                "method": "delete"
              },
              "resolvedMethod": "DELETE",
              "resolvedPath": "/users/{id}"
            }
          ],
          "name": "simotec-sls-dev-deleteUser",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "DeleteUserLambdaVersionOHlXS7Digy9N2ln63O0WWJKFd7MQI6PU1cF6LhSfzIE"
        },
        "getDashboardStats": {
          "handler": "src/maintainers/users/handler.getDashboardStats",
          "events": [
            {
              "httpApi": {
                "path": "/dashboard/regular-users/count",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/dashboard/regular-users/count"
            },
            {
              "httpApi": {
                "path": "/dashboard/assigned-tests/count",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/dashboard/assigned-tests/count"
            }
          ],
          "name": "simotec-sls-dev-getDashboardStats",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetDashboardStatsLambdaVersionlkGfD8bYSYZ3ngmpEBeVkFimGFRWrW6CvZxm5RVhc"
        },
        "getCadmins": {
          "handler": "src/maintainers/cadmins/handler.listCadmins",
          "events": [
            {
              "httpApi": {
                "path": "/cadmins",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/cadmins"
            }
          ],
          "name": "simotec-sls-dev-getCadmins",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetCadminsLambdaVersionbAoFUaIFo6P7vB4ASGmsPUoD6Rwl5K0TQBiYykBUUQ"
        },
        "createCadmin": {
          "handler": "src/maintainers/cadmins/handler.createCadmin",
          "events": [
            {
              "httpApi": {
                "path": "/cadmins",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/cadmins"
            }
          ],
          "name": "simotec-sls-dev-createCadmin",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "CreateCadminLambdaVersionOXwfMqnFm2mtMYGXTu2CLfRkCvP0HrjRMU2WIYEXVWE"
        },
        "updateCadmin": {
          "handler": "src/maintainers/cadmins/handler.updateCadmin",
          "events": [
            {
              "httpApi": {
                "path": "/cadmins/{id}",
                "method": "put"
              },
              "resolvedMethod": "PUT",
              "resolvedPath": "/cadmins/{id}"
            }
          ],
          "name": "simotec-sls-dev-updateCadmin",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "UpdateCadminLambdaVersion3eciZZ5N3BdnlGerUbge68PmrzBFWR4liWpVOMSA6Wg"
        },
        "deleteCadmin": {
          "handler": "src/maintainers/cadmins/handler.deleteCadmin",
          "events": [
            {
              "httpApi": {
                "path": "/cadmins/{id}",
                "method": "delete"
              },
              "resolvedMethod": "DELETE",
              "resolvedPath": "/cadmins/{id}"
            }
          ],
          "name": "simotec-sls-dev-deleteCadmin",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "DeleteCadminLambdaVersion8AfNeXMeladYUvAVslGHQgVd3OTwEqgrpEMlqLWvMd4"
        },
        "getCompanies": {
          "handler": "src/maintainers/companies/handler.listCompanies",
          "events": [
            {
              "httpApi": {
                "path": "/companies",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/companies"
            }
          ],
          "name": "simotec-sls-dev-getCompanies",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetCompaniesLambdaVersionniFWcGBHjcwylPLnta97ja4WbiJBLCvfTbudhH8avI"
        },
        "createCompany": {
          "handler": "src/maintainers/companies/handler.createCompany",
          "events": [
            {
              "httpApi": {
                "path": "/companies",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/companies"
            }
          ],
          "name": "simotec-sls-dev-createCompany",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "CreateCompanyLambdaVersionCcNdaZ7Am5jWhXdzAzJXy6BRe6f3BMpe4H98G8ebCs"
        },
        "updateCompany": {
          "handler": "src/maintainers/companies/handler.editCompany",
          "events": [
            {
              "httpApi": {
                "path": "/companies/{id}",
                "method": "put"
              },
              "resolvedMethod": "PUT",
              "resolvedPath": "/companies/{id}"
            }
          ],
          "name": "simotec-sls-dev-updateCompany",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "UpdateCompanyLambdaVersionDmBIDvXF6EsckMpOvQSHz8XJGd4zaKn2EOLTbmH8A"
        },
        "deleteCompany": {
          "handler": "src/maintainers/companies/handler.deleteCompany",
          "events": [
            {
              "httpApi": {
                "path": "/companies/{id}",
                "method": "delete"
              },
              "resolvedMethod": "DELETE",
              "resolvedPath": "/companies/{id}"
            }
          ],
          "name": "simotec-sls-dev-deleteCompany",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "DeleteCompanyLambdaVersionkiLqxoow3EdwCJEjrI58MZfZbATH4xhdq33S4pPjw"
        },
        "login": {
          "handler": "src/maintainers/auth/handler.loginHandler",
          "events": [
            {
              "httpApi": {
                "path": "/auth/login",
                "method": "POST"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/auth/login"
            }
          ],
          "name": "simotec-sls-dev-login",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "LoginLambdaVersiono2uOPbWY9lCfp1KvrlLyoOJpfodUcqudWRAFRSQEx8E"
        },
        "create-cicle": {
          "handler": "src/maintainers/cycles/handler.createEvaluationCycle",
          "events": [
            {
              "httpApi": {
                "path": "/cycles",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/cycles"
            }
          ],
          "name": "simotec-sls-dev-create-cicle",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "CreateDashcicleLambdaVersionGKQQ0QBnU4bfLLVzjWpBDh7KwN93jaW8Aezba2wdxwk"
        },
        "get-cicles": {
          "handler": "src/maintainers/cycles/handler.listCycles",
          "events": [
            {
              "httpApi": {
                "path": "/cycles",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/cycles"
            }
          ],
          "name": "simotec-sls-dev-get-cicles",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetDashciclesLambdaVersionsYIDcjwg6rRvYiIBH9TwnVbNpbU1iiaj5X55w0n9so"
        },
        "get-cicle": {
          "handler": "src/maintainers/cycles/handler.getCycle",
          "events": [
            {
              "httpApi": {
                "path": "/cycles/{id}",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/cycles/{id}"
            }
          ],
          "name": "simotec-sls-dev-get-cicle",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetDashcicleLambdaVersionqWmm0JFYasGMnNiRkQpGimXZl0Exw6JeOCTjy5bIBA"
        },
        "update-cicle": {
          "handler": "src/maintainers/cycles/handler.updateCycle",
          "events": [
            {
              "httpApi": {
                "path": "/cycles/{id}",
                "method": "put"
              },
              "resolvedMethod": "PUT",
              "resolvedPath": "/cycles/{id}"
            }
          ],
          "name": "simotec-sls-dev-update-cicle",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "UpdateDashcicleLambdaVersiona2n3xUpbnFuzJkvmtCtOmrxBhAAWVXtOqUvyKDoUUEk"
        },
        "delete-cicle": {
          "handler": "src/maintainers/cycles/handler.deleteCycle",
          "events": [
            {
              "httpApi": {
                "path": "/cycles/{id}",
                "method": "delete"
              },
              "resolvedMethod": "DELETE",
              "resolvedPath": "/cycles/{id}"
            }
          ],
          "name": "simotec-sls-dev-delete-cicle",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "DeleteDashcicleLambdaVersion8PbPvmmebMPSrPSHbW3HxEubkHHPmmY0pWX9jQ252Wk"
        },
        "getAssignedTestsByAuthId": {
          "handler": "src/maintainers/users-tests/handler.getAssignedTests",
          "events": [
            {
              "httpApi": {
                "path": "/assigned-tests/auth-user/{auth_user_id}",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/assigned-tests/auth-user/{auth_user_id}"
            }
          ],
          "name": "simotec-sls-dev-getAssignedTestsByAuthId",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetAssignedTestsByAuthIdLambdaVersionVBZOFiTL1vRENAyv2nSaLE6Z4becSD1orUlgsuHg784"
        },
        "getAssignedTestById": {
          "handler": "src/maintainers/users-tests/handler.getAssignedTestById",
          "events": [
            {
              "httpApi": {
                "path": "/assigned-tests/{assigned_test_id}",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/assigned-tests/{assigned_test_id}"
            }
          ],
          "name": "simotec-sls-dev-getAssignedTestById",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetAssignedTestByIdLambdaVersionelocRNip77wypblIpYLqOutZr2DsU9rlzeTFWdLlFA"
        },
        "getTestQuestions": {
          "handler": "src/maintainers/users-tests/handler.getTestQuestions",
          "events": [
            {
              "httpApi": {
                "path": "/user-tests/{test_id}/questions",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/user-tests/{test_id}/questions"
            }
          ],
          "name": "simotec-sls-dev-getTestQuestions",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetTestQuestionsLambdaVersionftsPo9mpGbU9QekpM504hQczaUD3kE2zJ5NdpXiA"
        },
        "submitTest": {
          "handler": "src/maintainers/users-tests/handler.submitTest",
          "events": [
            {
              "httpApi": {
                "path": "/user-tests/{test_id}/submit",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/user-tests/{test_id}/submit"
            }
          ],
          "name": "simotec-sls-dev-submitTest",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "SubmitTestLambdaVersion2sJCDA0An1MlHYnPZhTBEalpsTrsAYIUz94tTYsC3Q"
        },
        "updateTestStatus": {
          "handler": "src/maintainers/users-tests/handler.updateTestStatus",
          "events": [
            {
              "httpApi": {
                "path": "/user-tests/{assigned_test_id}/status",
                "method": "patch"
              },
              "resolvedMethod": "PATCH",
              "resolvedPath": "/user-tests/{assigned_test_id}/status"
            }
          ],
          "name": "simotec-sls-dev-updateTestStatus",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "UpdateTestStatusLambdaVersion9M5tKSvOweS52JbaLGDsWDfI6NS2qwvF8QlSYuqRfo"
        },
        "eceListAssignments": {
          "handler": "src/maintainers/psicologo/psicologoHandler.listAllECEAssignments",
          "events": [
            {
              "httpApi": {
                "path": "/ece/asignaciones",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/ece/asignaciones"
            }
          ],
          "name": "simotec-sls-dev-eceListAssignments",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "EceListAssignmentsLambdaVersionjWb2wx4Gvw3FVmRox6327G19LSpNi5pjYl9lMFP9vPI"
        },
        "eceListResponses": {
          "handler": "src/maintainers/psicologo/psicologoHandler.listECEResponses",
          "events": [
            {
              "httpApi": {
                "path": "/ece/respuestas",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/ece/respuestas"
            }
          ],
          "name": "simotec-sls-dev-eceListResponses",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "EceListResponsesLambdaVersionOI5BpdKnpxq0VomyuUK04XCgjKGtFcPlWAnEyk88YU"
        },
        "eceSubmitManualEvaluation": {
          "handler": "src/maintainers/psicologo/psicologoHandler.submitManualEvaluation",
          "events": [
            {
              "httpApi": {
                "path": "/ece/evaluar",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/ece/evaluar"
            }
          ],
          "name": "simotec-sls-dev-eceSubmitManualEvaluation",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "EceSubmitManualEvaluationLambdaVersionSy4mGYrP3e5F9VMOYUy86khdOTe7usI3PZtT9FXqWw"
        },
        "getTests": {
          "handler": "src/maintainers/tests/handler.getTests",
          "events": [
            {
              "httpApi": {
                "path": "/tests",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/tests"
            }
          ],
          "name": "simotec-sls-dev-getTests",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetTestsLambdaVersion9vNLcmQwWN1ClRczL53AACNC53DIUOxyYkm8WWvoM1I"
        },
        "assignTest": {
          "handler": "src/maintainers/tests/handler.assignTest",
          "events": [
            {
              "httpApi": {
                "path": "/tests/assign",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/tests/assign"
            }
          ],
          "name": "simotec-sls-dev-assignTest",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "AssignTestLambdaVersion9xANjCVzUBJjylhd1bDZiV28WSLMfLV9u3XHa74LZk"
        }
      },
      "custom": null
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "timeout": 20,
      "memorySize": 3000,
      "stage": "dev",
      "region": "us-east-2",
      "tags": {
        "CLIENT": "simotec",
        "STAGE": "dev"
      },
      "httpApi": {
        "cors": {
          "allowedOrigins": [
            "*"
          ],
          "allowedHeaders": [
            "*"
          ],
          "allowedMethods": [
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "PATCH",
            "OPTIONS"
          ]
        }
      },
      "environment": {
        "TZ": "America/Santiago",
        "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
        "DB_USER": "admin",
        "DB_PASSWORD": "<REDACTED>",
        "DB_NAME": "simotec",
        "JWT_SECRET": "<REDACTED>",
        "JWT_EXPIRES_IN": "1d",
        "CORS_ORIGIN": "http://localhost:5173"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "rds:DescribeDBInstances",
            "rds:Connect"
          ],
          "Resource": "*"
        }
      ],
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ListUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-listUsers"
            }
          },
          "ListAllUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-listAllUsers"
            }
          },
          "CreateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-createUser"
            }
          },
          "EditUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-editUser"
            }
          },
          "DeleteUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-deleteUser"
            }
          },
          "GetDashboardStatsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-getDashboardStats"
            }
          },
          "GetCadminsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-getCadmins"
            }
          },
          "CreateCadminLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-createCadmin"
            }
          },
          "UpdateCadminLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-updateCadmin"
            }
          },
          "DeleteCadminLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-deleteCadmin"
            }
          },
          "GetCompaniesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-getCompanies"
            }
          },
          "CreateCompanyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-createCompany"
            }
          },
          "UpdateCompanyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-updateCompany"
            }
          },
          "DeleteCompanyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-deleteCompany"
            }
          },
          "LoginLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-login"
            }
          },
          "CreateDashcicleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-create-cicle"
            }
          },
          "GetDashciclesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-get-cicles"
            }
          },
          "GetDashcicleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-get-cicle"
            }
          },
          "UpdateDashcicleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-update-cicle"
            }
          },
          "DeleteDashcicleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-delete-cicle"
            }
          },
          "GetAssignedTestsByAuthIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-getAssignedTestsByAuthId"
            }
          },
          "GetAssignedTestByIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-getAssignedTestById"
            }
          },
          "GetTestQuestionsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-getTestQuestions"
            }
          },
          "SubmitTestLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-submitTest"
            }
          },
          "UpdateTestStatusLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-updateTestStatus"
            }
          },
          "EceListAssignmentsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-eceListAssignments"
            }
          },
          "EceListResponsesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-eceListResponses"
            }
          },
          "EceSubmitManualEvaluationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-eceSubmitManualEvaluation"
            }
          },
          "GetTestsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-getTests"
            }
          },
          "AssignTestLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-assignTest"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "simotec-sls",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/simotec-sls-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/simotec-sls-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "rds:DescribeDBInstances",
                          "rds:Connect"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "simotec-sls",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "ListUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users/handler.listUsers",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-listUsers",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListUsersLogGroup"
            ]
          },
          "ListAllUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users/handler.listAllUsers",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-listAllUsers",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListAllUsersLogGroup"
            ]
          },
          "CreateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users/handler.createUser",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-createUser",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateUserLogGroup"
            ]
          },
          "EditUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users/handler.editUser",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-editUser",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EditUserLogGroup"
            ]
          },
          "DeleteUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users/handler.deleteUser",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-deleteUser",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteUserLogGroup"
            ]
          },
          "GetDashboardStatsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users/handler.getDashboardStats",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-getDashboardStats",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetDashboardStatsLogGroup"
            ]
          },
          "GetCadminsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cadmins/handler.listCadmins",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-getCadmins",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetCadminsLogGroup"
            ]
          },
          "CreateCadminLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cadmins/handler.createCadmin",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-createCadmin",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateCadminLogGroup"
            ]
          },
          "UpdateCadminLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cadmins/handler.updateCadmin",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-updateCadmin",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateCadminLogGroup"
            ]
          },
          "DeleteCadminLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cadmins/handler.deleteCadmin",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-deleteCadmin",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteCadminLogGroup"
            ]
          },
          "GetCompaniesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/companies/handler.listCompanies",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-getCompanies",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetCompaniesLogGroup"
            ]
          },
          "CreateCompanyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/companies/handler.createCompany",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-createCompany",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateCompanyLogGroup"
            ]
          },
          "UpdateCompanyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/companies/handler.editCompany",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-updateCompany",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateCompanyLogGroup"
            ]
          },
          "DeleteCompanyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/companies/handler.deleteCompany",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-deleteCompany",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteCompanyLogGroup"
            ]
          },
          "LoginLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/auth/handler.loginHandler",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-login",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LoginLogGroup"
            ]
          },
          "CreateDashcicleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cycles/handler.createEvaluationCycle",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-create-cicle",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateDashcicleLogGroup"
            ]
          },
          "GetDashciclesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cycles/handler.listCycles",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-get-cicles",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetDashciclesLogGroup"
            ]
          },
          "GetDashcicleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cycles/handler.getCycle",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-get-cicle",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetDashcicleLogGroup"
            ]
          },
          "UpdateDashcicleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cycles/handler.updateCycle",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-update-cicle",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateDashcicleLogGroup"
            ]
          },
          "DeleteDashcicleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cycles/handler.deleteCycle",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-delete-cicle",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteDashcicleLogGroup"
            ]
          },
          "GetAssignedTestsByAuthIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users-tests/handler.getAssignedTests",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-getAssignedTestsByAuthId",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAssignedTestsByAuthIdLogGroup"
            ]
          },
          "GetAssignedTestByIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users-tests/handler.getAssignedTestById",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-getAssignedTestById",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAssignedTestByIdLogGroup"
            ]
          },
          "GetTestQuestionsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users-tests/handler.getTestQuestions",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-getTestQuestions",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetTestQuestionsLogGroup"
            ]
          },
          "SubmitTestLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users-tests/handler.submitTest",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-submitTest",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SubmitTestLogGroup"
            ]
          },
          "UpdateTestStatusLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users-tests/handler.updateTestStatus",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-updateTestStatus",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateTestStatusLogGroup"
            ]
          },
          "EceListAssignmentsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/psicologo/psicologoHandler.listAllECEAssignments",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-eceListAssignments",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EceListAssignmentsLogGroup"
            ]
          },
          "EceListResponsesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/psicologo/psicologoHandler.listECEResponses",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-eceListResponses",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EceListResponsesLogGroup"
            ]
          },
          "EceSubmitManualEvaluationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/psicologo/psicologoHandler.submitManualEvaluation",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-eceSubmitManualEvaluation",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EceSubmitManualEvaluationLogGroup"
            ]
          },
          "GetTestsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/tests/handler.getTests",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-getTests",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetTestsLogGroup"
            ]
          },
          "AssignTestLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/tests/handler.assignTest",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-assignTest",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AssignTestLogGroup"
            ]
          },
          "ListUsersLambdaVersionpYZkJMho71HVOqL0lCYKdiFNl04C7Y5YHXf7fZb6U": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListUsersLambdaFunction"
              },
              "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
            }
          },
          "ListAllUsersLambdaVersionnmNxITYOEjbrBj82QiXzMChlIH6KAqbqRZxB9bv3Dg0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListAllUsersLambdaFunction"
              },
              "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
            }
          },
          "CreateUserLambdaVersionVnXojcbjLEkjMJlFP1Vi0lYqhmWNBkGwlA7o7851Rg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateUserLambdaFunction"
              },
              "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
            }
          },
          "EditUserLambdaVersion8ytPVCzxPPLJlXoy4S2g59r7h4amE1jeaMdROyaYcY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EditUserLambdaFunction"
              },
              "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
            }
          },
          "DeleteUserLambdaVersionOHlXS7Digy9N2ln63O0WWJKFd7MQI6PU1cF6LhSfzIE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteUserLambdaFunction"
              },
              "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
            }
          },
          "GetDashboardStatsLambdaVersionlkGfD8bYSYZ3ngmpEBeVkFimGFRWrW6CvZxm5RVhc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDashboardStatsLambdaFunction"
              },
              "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
            }
          },
          "GetCadminsLambdaVersionbAoFUaIFo6P7vB4ASGmsPUoD6Rwl5K0TQBiYykBUUQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetCadminsLambdaFunction"
              },
              "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
            }
          },
          "CreateCadminLambdaVersionOXwfMqnFm2mtMYGXTu2CLfRkCvP0HrjRMU2WIYEXVWE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateCadminLambdaFunction"
              },
              "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
            }
          },
          "UpdateCadminLambdaVersion3eciZZ5N3BdnlGerUbge68PmrzBFWR4liWpVOMSA6Wg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateCadminLambdaFunction"
              },
              "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
            }
          },
          "DeleteCadminLambdaVersion8AfNeXMeladYUvAVslGHQgVd3OTwEqgrpEMlqLWvMd4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteCadminLambdaFunction"
              },
              "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
            }
          },
          "GetCompaniesLambdaVersionniFWcGBHjcwylPLnta97ja4WbiJBLCvfTbudhH8avI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetCompaniesLambdaFunction"
              },
              "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
            }
          },
          "CreateCompanyLambdaVersionCcNdaZ7Am5jWhXdzAzJXy6BRe6f3BMpe4H98G8ebCs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateCompanyLambdaFunction"
              },
              "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
            }
          },
          "UpdateCompanyLambdaVersionDmBIDvXF6EsckMpOvQSHz8XJGd4zaKn2EOLTbmH8A": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateCompanyLambdaFunction"
              },
              "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
            }
          },
          "DeleteCompanyLambdaVersionkiLqxoow3EdwCJEjrI58MZfZbATH4xhdq33S4pPjw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteCompanyLambdaFunction"
              },
              "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
            }
          },
          "LoginLambdaVersiono2uOPbWY9lCfp1KvrlLyoOJpfodUcqudWRAFRSQEx8E": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoginLambdaFunction"
              },
              "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
            }
          },
          "CreateDashcicleLambdaVersionGKQQ0QBnU4bfLLVzjWpBDh7KwN93jaW8Aezba2wdxwk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateDashcicleLambdaFunction"
              },
              "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
            }
          },
          "GetDashciclesLambdaVersionsYIDcjwg6rRvYiIBH9TwnVbNpbU1iiaj5X55w0n9so": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDashciclesLambdaFunction"
              },
              "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
            }
          },
          "GetDashcicleLambdaVersionqWmm0JFYasGMnNiRkQpGimXZl0Exw6JeOCTjy5bIBA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDashcicleLambdaFunction"
              },
              "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
            }
          },
          "UpdateDashcicleLambdaVersiona2n3xUpbnFuzJkvmtCtOmrxBhAAWVXtOqUvyKDoUUEk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateDashcicleLambdaFunction"
              },
              "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
            }
          },
          "DeleteDashcicleLambdaVersion8PbPvmmebMPSrPSHbW3HxEubkHHPmmY0pWX9jQ252Wk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteDashcicleLambdaFunction"
              },
              "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
            }
          },
          "GetAssignedTestsByAuthIdLambdaVersionVBZOFiTL1vRENAyv2nSaLE6Z4becSD1orUlgsuHg784": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAssignedTestsByAuthIdLambdaFunction"
              },
              "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
            }
          },
          "GetAssignedTestByIdLambdaVersionelocRNip77wypblIpYLqOutZr2DsU9rlzeTFWdLlFA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAssignedTestByIdLambdaFunction"
              },
              "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
            }
          },
          "GetTestQuestionsLambdaVersionftsPo9mpGbU9QekpM504hQczaUD3kE2zJ5NdpXiA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetTestQuestionsLambdaFunction"
              },
              "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
            }
          },
          "SubmitTestLambdaVersion2sJCDA0An1MlHYnPZhTBEalpsTrsAYIUz94tTYsC3Q": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SubmitTestLambdaFunction"
              },
              "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
            }
          },
          "UpdateTestStatusLambdaVersion9M5tKSvOweS52JbaLGDsWDfI6NS2qwvF8QlSYuqRfo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateTestStatusLambdaFunction"
              },
              "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
            }
          },
          "EceListAssignmentsLambdaVersionjWb2wx4Gvw3FVmRox6327G19LSpNi5pjYl9lMFP9vPI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EceListAssignmentsLambdaFunction"
              },
              "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
            }
          },
          "EceListResponsesLambdaVersionOI5BpdKnpxq0VomyuUK04XCgjKGtFcPlWAnEyk88YU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EceListResponsesLambdaFunction"
              },
              "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
            }
          },
          "EceSubmitManualEvaluationLambdaVersionSy4mGYrP3e5F9VMOYUy86khdOTe7usI3PZtT9FXqWw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EceSubmitManualEvaluationLambdaFunction"
              },
              "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
            }
          },
          "GetTestsLambdaVersion9vNLcmQwWN1ClRczL53AACNC53DIUOxyYkm8WWvoM1I": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetTestsLambdaFunction"
              },
              "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
            }
          },
          "AssignTestLambdaVersion9xANjCVzUBJjylhd1bDZiV28WSLMfLV9u3XHa74LZk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AssignTestLambdaFunction"
              },
              "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-simotec-sls",
              "ProtocolType": "HTTP",
              "Tags": {
                "CLIENT": "simotec",
                "STAGE": "dev"
              },
              "CorsConfiguration": {
                "AllowCredentials": "<REDACTED>",
                "AllowHeaders": [
                  "*"
                ],
                "AllowMethods": [
                  "GET",
                  "POST",
                  "PUT",
                  "DELETE",
                  "PATCH",
                  "OPTIONS"
                ],
                "AllowOrigins": [
                  "*"
                ]
              }
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              },
              "Tags": {
                "CLIENT": "simotec",
                "STAGE": "dev"
              }
            }
          },
          "ListUsersLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationListUsers": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "ListUsersLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetUsers": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /users",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationListUsers"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationListUsers"
          },
          "ListAllUsersLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListAllUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationListAllUsers": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "ListAllUsersLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetUsersAll": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /users/all",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationListAllUsers"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationListAllUsers"
          },
          "CreateUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "CreateUserLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostUsers": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /users",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateUser"
          },
          "EditUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EditUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEditUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "EditUserLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutUsersIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /users/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEditUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEditUser"
          },
          "DeleteUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "DeleteUserLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteUsersIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /users/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteUser"
          },
          "GetDashboardStatsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDashboardStatsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetDashboardStats": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetDashboardStatsLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetDashboardRegularDashusersCount": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /dashboard/regular-users/count",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetDashboardStats"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetDashboardStats"
          },
          "HttpApiRouteGetDashboardAssignedDashtestsCount": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /dashboard/assigned-tests/count",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetDashboardStats"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetDashboardStats"
          },
          "GetCadminsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetCadminsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetCadmins": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetCadminsLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetCadmins": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /cadmins",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetCadmins"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetCadmins"
          },
          "CreateCadminLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateCadminLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateCadmin": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "CreateCadminLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostCadmins": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /cadmins",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateCadmin"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateCadmin"
          },
          "UpdateCadminLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateCadminLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateCadmin": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "UpdateCadminLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutCadminsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /cadmins/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateCadmin"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateCadmin"
          },
          "DeleteCadminLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteCadminLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteCadmin": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "DeleteCadminLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteCadminsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /cadmins/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteCadmin"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteCadmin"
          },
          "GetCompaniesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetCompaniesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetCompanies": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetCompaniesLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetCompanies": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /companies",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetCompanies"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetCompanies"
          },
          "CreateCompanyLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateCompanyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateCompany": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "CreateCompanyLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostCompanies": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /companies",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateCompany"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateCompany"
          },
          "UpdateCompanyLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateCompanyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateCompany": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "UpdateCompanyLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutCompaniesIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /companies/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateCompany"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateCompany"
          },
          "DeleteCompanyLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteCompanyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteCompany": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "DeleteCompanyLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteCompaniesIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /companies/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteCompany"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteCompany"
          },
          "LoginLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoginLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationLogin": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "LoginLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostAuthLogin": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /auth/login",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationLogin"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationLogin"
          },
          "CreateDashcicleLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateDashcicleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateDashcicle": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "CreateDashcicleLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostCycles": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /cycles",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateDashcicle"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateDashcicle"
          },
          "GetDashciclesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDashciclesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetDashcicles": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetDashciclesLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetCycles": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /cycles",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetDashcicles"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetDashcicles"
          },
          "GetDashcicleLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDashcicleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetDashcicle": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetDashcicleLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetCyclesIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /cycles/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetDashcicle"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetDashcicle"
          },
          "UpdateDashcicleLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateDashcicleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateDashcicle": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "UpdateDashcicleLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutCyclesIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /cycles/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateDashcicle"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateDashcicle"
          },
          "DeleteDashcicleLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteDashcicleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteDashcicle": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "DeleteDashcicleLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteCyclesIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /cycles/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteDashcicle"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteDashcicle"
          },
          "GetAssignedTestsByAuthIdLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAssignedTestsByAuthIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetAssignedTestsByAuthId": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetAssignedTestsByAuthIdLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetAssignedDashtestsAuthDashuserAuthuseridVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /assigned-tests/auth-user/{auth_user_id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetAssignedTestsByAuthId"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetAssignedTestsByAuthId"
          },
          "GetAssignedTestByIdLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAssignedTestByIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetAssignedTestById": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetAssignedTestByIdLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetAssignedDashtestsAssignedtestidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /assigned-tests/{assigned_test_id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetAssignedTestById"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetAssignedTestById"
          },
          "GetTestQuestionsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetTestQuestionsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetTestQuestions": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetTestQuestionsLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetUserDashtestsTestidVarQuestions": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /user-tests/{test_id}/questions",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetTestQuestions"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetTestQuestions"
          },
          "SubmitTestLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SubmitTestLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationSubmitTest": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "SubmitTestLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostUserDashtestsTestidVarSubmit": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /user-tests/{test_id}/submit",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSubmitTest"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSubmitTest"
          },
          "UpdateTestStatusLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateTestStatusLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateTestStatus": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "UpdateTestStatusLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePatchUserDashtestsAssignedtestidVarStatus": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /user-tests/{assigned_test_id}/status",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateTestStatus"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateTestStatus"
          },
          "EceListAssignmentsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EceListAssignmentsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEceListAssignments": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "EceListAssignmentsLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetEceAsignaciones": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /ece/asignaciones",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEceListAssignments"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEceListAssignments"
          },
          "EceListResponsesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EceListResponsesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEceListResponses": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "EceListResponsesLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetEceRespuestas": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /ece/respuestas",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEceListResponses"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEceListResponses"
          },
          "EceSubmitManualEvaluationLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EceSubmitManualEvaluationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEceSubmitManualEvaluation": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "EceSubmitManualEvaluationLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostEceEvaluar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /ece/evaluar",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEceSubmitManualEvaluation"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEceSubmitManualEvaluation"
          },
          "GetTestsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetTestsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetTests": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetTestsLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetTests": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /tests",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetTests"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetTests"
          },
          "AssignTestLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AssignTestLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationAssignTest": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "AssignTestLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostTestsAssign": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /tests/assign",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationAssignTest"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationAssignTest"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-2-31c921f8-650a",
            "Export": {
              "Name": "sls-simotec-sls-dev-ServerlessDeploymentBucketName"
            }
          },
          "ListUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListUsersLambdaVersionpYZkJMho71HVOqL0lCYKdiFNl04C7Y5YHXf7fZb6U"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-ListUsersLambdaFunctionQualifiedArn"
            }
          },
          "ListAllUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListAllUsersLambdaVersionnmNxITYOEjbrBj82QiXzMChlIH6KAqbqRZxB9bv3Dg0"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-ListAllUsersLambdaFunctionQualifiedArn"
            }
          },
          "CreateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateUserLambdaVersionVnXojcbjLEkjMJlFP1Vi0lYqhmWNBkGwlA7o7851Rg"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-CreateUserLambdaFunctionQualifiedArn"
            }
          },
          "EditUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EditUserLambdaVersion8ytPVCzxPPLJlXoy4S2g59r7h4amE1jeaMdROyaYcY"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-EditUserLambdaFunctionQualifiedArn"
            }
          },
          "DeleteUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteUserLambdaVersionOHlXS7Digy9N2ln63O0WWJKFd7MQI6PU1cF6LhSfzIE"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-DeleteUserLambdaFunctionQualifiedArn"
            }
          },
          "GetDashboardStatsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDashboardStatsLambdaVersionlkGfD8bYSYZ3ngmpEBeVkFimGFRWrW6CvZxm5RVhc"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetDashboardStatsLambdaFunctionQualifiedArn"
            }
          },
          "GetCadminsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetCadminsLambdaVersionbAoFUaIFo6P7vB4ASGmsPUoD6Rwl5K0TQBiYykBUUQ"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetCadminsLambdaFunctionQualifiedArn"
            }
          },
          "CreateCadminLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateCadminLambdaVersionOXwfMqnFm2mtMYGXTu2CLfRkCvP0HrjRMU2WIYEXVWE"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-CreateCadminLambdaFunctionQualifiedArn"
            }
          },
          "UpdateCadminLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateCadminLambdaVersion3eciZZ5N3BdnlGerUbge68PmrzBFWR4liWpVOMSA6Wg"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-UpdateCadminLambdaFunctionQualifiedArn"
            }
          },
          "DeleteCadminLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteCadminLambdaVersion8AfNeXMeladYUvAVslGHQgVd3OTwEqgrpEMlqLWvMd4"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-DeleteCadminLambdaFunctionQualifiedArn"
            }
          },
          "GetCompaniesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetCompaniesLambdaVersionniFWcGBHjcwylPLnta97ja4WbiJBLCvfTbudhH8avI"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetCompaniesLambdaFunctionQualifiedArn"
            }
          },
          "CreateCompanyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateCompanyLambdaVersionCcNdaZ7Am5jWhXdzAzJXy6BRe6f3BMpe4H98G8ebCs"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-CreateCompanyLambdaFunctionQualifiedArn"
            }
          },
          "UpdateCompanyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateCompanyLambdaVersionDmBIDvXF6EsckMpOvQSHz8XJGd4zaKn2EOLTbmH8A"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-UpdateCompanyLambdaFunctionQualifiedArn"
            }
          },
          "DeleteCompanyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteCompanyLambdaVersionkiLqxoow3EdwCJEjrI58MZfZbATH4xhdq33S4pPjw"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-DeleteCompanyLambdaFunctionQualifiedArn"
            }
          },
          "LoginLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoginLambdaVersiono2uOPbWY9lCfp1KvrlLyoOJpfodUcqudWRAFRSQEx8E"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-LoginLambdaFunctionQualifiedArn"
            }
          },
          "CreateDashcicleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateDashcicleLambdaVersionGKQQ0QBnU4bfLLVzjWpBDh7KwN93jaW8Aezba2wdxwk"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-CreateDashcicleLambdaFunctionQualifiedArn"
            }
          },
          "GetDashciclesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDashciclesLambdaVersionsYIDcjwg6rRvYiIBH9TwnVbNpbU1iiaj5X55w0n9so"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetDashciclesLambdaFunctionQualifiedArn"
            }
          },
          "GetDashcicleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDashcicleLambdaVersionqWmm0JFYasGMnNiRkQpGimXZl0Exw6JeOCTjy5bIBA"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetDashcicleLambdaFunctionQualifiedArn"
            }
          },
          "UpdateDashcicleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateDashcicleLambdaVersiona2n3xUpbnFuzJkvmtCtOmrxBhAAWVXtOqUvyKDoUUEk"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-UpdateDashcicleLambdaFunctionQualifiedArn"
            }
          },
          "DeleteDashcicleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteDashcicleLambdaVersion8PbPvmmebMPSrPSHbW3HxEubkHHPmmY0pWX9jQ252Wk"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-DeleteDashcicleLambdaFunctionQualifiedArn"
            }
          },
          "GetAssignedTestsByAuthIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAssignedTestsByAuthIdLambdaVersionVBZOFiTL1vRENAyv2nSaLE6Z4becSD1orUlgsuHg784"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetAssignedTestsByAuthIdLambdaFunctionQualifiedArn"
            }
          },
          "GetAssignedTestByIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAssignedTestByIdLambdaVersionelocRNip77wypblIpYLqOutZr2DsU9rlzeTFWdLlFA"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetAssignedTestByIdLambdaFunctionQualifiedArn"
            }
          },
          "GetTestQuestionsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetTestQuestionsLambdaVersionftsPo9mpGbU9QekpM504hQczaUD3kE2zJ5NdpXiA"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetTestQuestionsLambdaFunctionQualifiedArn"
            }
          },
          "SubmitTestLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SubmitTestLambdaVersion2sJCDA0An1MlHYnPZhTBEalpsTrsAYIUz94tTYsC3Q"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-SubmitTestLambdaFunctionQualifiedArn"
            }
          },
          "UpdateTestStatusLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateTestStatusLambdaVersion9M5tKSvOweS52JbaLGDsWDfI6NS2qwvF8QlSYuqRfo"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-UpdateTestStatusLambdaFunctionQualifiedArn"
            }
          },
          "EceListAssignmentsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EceListAssignmentsLambdaVersionjWb2wx4Gvw3FVmRox6327G19LSpNi5pjYl9lMFP9vPI"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-EceListAssignmentsLambdaFunctionQualifiedArn"
            }
          },
          "EceListResponsesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EceListResponsesLambdaVersionOI5BpdKnpxq0VomyuUK04XCgjKGtFcPlWAnEyk88YU"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-EceListResponsesLambdaFunctionQualifiedArn"
            }
          },
          "EceSubmitManualEvaluationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EceSubmitManualEvaluationLambdaVersionSy4mGYrP3e5F9VMOYUy86khdOTe7usI3PZtT9FXqWw"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-EceSubmitManualEvaluationLambdaFunctionQualifiedArn"
            }
          },
          "GetTestsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetTestsLambdaVersion9vNLcmQwWN1ClRczL53AACNC53DIUOxyYkm8WWvoM1I"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetTestsLambdaFunctionQualifiedArn"
            }
          },
          "AssignTestLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AssignTestLambdaVersion9xANjCVzUBJjylhd1bDZiV28WSLMfLV9u3XHa74LZk"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-AssignTestLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-HttpApiUrl"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "serviceRawFile": "service: simotec-sls\r\nframeworkVersion: \"4\"\r\n\r\ncustom:\r\n  #customDomain:\r\n  #  domainName: ${env:AWS_DOMAIN_NAME}\r\n  #  basePath: \"\"\r\n  #  stage: ${self:provider.stage}\r\n  #  createRoute53Record: true\r\n  # endpointType: regional\r\n  #  certificateArn: ${env:AWS_CERTIFICATE_ARN}\r\n\r\n#plugins:\r\n#  - serverless-offline\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs20.x\r\n  timeout: 20\r\n  memorySize: 3000 \r\n  stage: ${opt:stage, 'dev'}\r\n  region: us-east-2\r\n  tags:\r\n    CLIENT: simotec\r\n    STAGE: ${self:provider.stage}\r\n  \r\n  #Revisar  \r\n  #vpc:\r\n  #  securityGroupIds:\r\n  #    - sg-0277c381fd928a03b   # Tu Security Group que permite acceso a RDS\r\n  #  subnetIds:\r\n  #    - subnet-02b7e739c70cb25e4\r\n  #    - subnet-0898275b12331b159\r\n  #    - subnet-06e6d01dc93ae602a\r\n  httpApi:\r\n    cors:\r\n      allowedOrigins:\r\n        - \"*\"\r\n      allowedHeaders:\r\n        - \"*\"\r\n      allowedMethods:\r\n        - GET\r\n        - POST\r\n        - PUT\r\n        - DELETE\r\n        - PATCH\r\n        - OPTIONS\r\n  environment:\r\n    TZ: America/Santiago\r\n    DB_HOST: ${env:DB_HOST}\r\n    DB_USER: ${env:DB_USER}\r\n    DB_PASSWORD: ${env:DB_PASSWORD}\r\n    DB_NAME: ${env:DB_NAME}\r\n    #DB_SSL_CA: ${env:DB_SSL_CA}\r\n    JWT_SECRET: ${env:JWT_SECRET}\r\n    JWT_EXPIRES_IN: ${env:JWT_EXPIRES_IN}\r\n    CORS_ORIGIN: ${env:CORS_ORIGIN}\r\n  iamRoleStatements:\r\n    - Effect: \"Allow\"\r\n      Action:\r\n        - \"rds:DescribeDBInstances\"\r\n        - \"rds:Connect\"\r\n      Resource: \"*\"\r\nfunctions: ${file(./resources/functions.yml):functions}",
    "command": [
      "deploy"
    ],
    "options": {
      "force": true
    },
    "orgId": "d9734738-ae0b-483b-982a-5acf28d30c8c",
    "orgName": "simotec",
    "userId": "qM2WBZ4jnQWl420pwN",
    "userName": "simotec",
    "serviceProviderAwsAccountId": "762233747429",
    "serviceProviderAwsCfStackName": "simotec-sls-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-2:762233747429:stack/simotec-sls-dev/c1650b50-004a-11f0-b18d-0a94ac901c01",
    "serviceProviderAwsCfStackCreated": "2025-03-13T20:35:52.184Z",
    "serviceProviderAwsCfStackUpdated": "2025-03-28T18:45:08.698Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "SubmitTestLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-submitTest:42",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-SubmitTestLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateCadminLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-updateCadmin:130",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-UpdateCadminLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateTestStatusLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-updateTestStatus:42",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-UpdateTestStatusLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetAssignedTestsByAuthIdLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-getAssignedTestsByAuthId:24",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-GetAssignedTestsByAuthIdLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetDashboardStatsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-getDashboardStats:107",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-GetDashboardStatsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteCadminLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-deleteCadmin:130",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-DeleteCadminLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "EceListResponsesLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-eceListResponses:6",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-EceListResponsesLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HttpApiId",
        "OutputValue": "zv58zspkli",
        "Description": "Id of the HTTP API",
        "ExportName": "sls-simotec-sls-dev-HttpApiId"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-2-31c921f8-650a",
        "ExportName": "sls-simotec-sls-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "HttpApiUrl",
        "OutputValue": "https://zv58zspkli.execute-api.us-east-2.amazonaws.com",
        "Description": "URL of the HTTP API",
        "ExportName": "sls-simotec-sls-dev-HttpApiUrl"
      },
      {
        "OutputKey": "CreateDashcicleLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-create-cicle:159",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-CreateDashcicleLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ListAllUsersLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-listAllUsers:5",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-ListAllUsersLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetCompaniesLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-getCompanies:159",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-GetCompaniesLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetTestQuestionsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-getTestQuestions:42",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-GetTestQuestionsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetDashcicleLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-get-cicle:159",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-GetDashcicleLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-createUser:161",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-CreateUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateCadminLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-createCadmin:130",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-CreateCadminLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetTestsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-getTests:45",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-GetTestsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-deleteUser:161",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-DeleteUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetDashciclesLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-get-cicles:159",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-GetDashciclesLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteCompanyLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-deleteCompany:159",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-DeleteCompanyLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ListUsersLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-listUsers:107",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-ListUsersLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateCompanyLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-updateCompany:159",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-UpdateCompanyLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "EceSubmitManualEvaluationLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-eceSubmitManualEvaluation:6",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-EceSubmitManualEvaluationLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateCompanyLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-createCompany:158",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-CreateCompanyLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "EceListAssignmentsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-eceListAssignments:6",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-EceListAssignmentsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "AssignTestLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-assignTest:46",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-AssignTestLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetAssignedTestByIdLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-getAssignedTestById:18",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-GetAssignedTestByIdLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateDashcicleLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-update-cicle:159",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-UpdateDashcicleLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetCadminsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-getCadmins:130",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-GetCadminsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "EditUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-editUser:107",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-EditUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "LoginLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-login:155",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-LoginLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteDashcicleLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-delete-cicle:158",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-DeleteDashcicleLambdaFunctionQualifiedArn"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "ListUsersLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-listUsers"
          }
        },
        "ListAllUsersLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-listAllUsers"
          }
        },
        "CreateUserLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-createUser"
          }
        },
        "EditUserLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-editUser"
          }
        },
        "DeleteUserLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-deleteUser"
          }
        },
        "GetDashboardStatsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-getDashboardStats"
          }
        },
        "GetCadminsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-getCadmins"
          }
        },
        "CreateCadminLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-createCadmin"
          }
        },
        "UpdateCadminLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-updateCadmin"
          }
        },
        "DeleteCadminLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-deleteCadmin"
          }
        },
        "GetCompaniesLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-getCompanies"
          }
        },
        "CreateCompanyLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-createCompany"
          }
        },
        "UpdateCompanyLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-updateCompany"
          }
        },
        "DeleteCompanyLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-deleteCompany"
          }
        },
        "LoginLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-login"
          }
        },
        "CreateDashcicleLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-create-cicle"
          }
        },
        "GetDashciclesLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-get-cicles"
          }
        },
        "GetDashcicleLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-get-cicle"
          }
        },
        "UpdateDashcicleLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-update-cicle"
          }
        },
        "DeleteDashcicleLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-delete-cicle"
          }
        },
        "GetAssignedTestsByAuthIdLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-getAssignedTestsByAuthId"
          }
        },
        "GetAssignedTestByIdLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-getAssignedTestById"
          }
        },
        "GetTestQuestionsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-getTestQuestions"
          }
        },
        "SubmitTestLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-submitTest"
          }
        },
        "UpdateTestStatusLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-updateTestStatus"
          }
        },
        "EceListAssignmentsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-eceListAssignments"
          }
        },
        "EceListResponsesLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-eceListResponses"
          }
        },
        "EceSubmitManualEvaluationLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-eceSubmitManualEvaluation"
          }
        },
        "GetTestsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-getTests"
          }
        },
        "AssignTestLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-assignTest"
          }
        },
        "IamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      "simotec-sls",
                      "dev",
                      "lambda"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/simotec-sls-dev*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/simotec-sls-dev*:*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "rds:DescribeDBInstances",
                        "rds:Connect"
                      ],
                      "Resource": "*"
                    }
                  ]
                }
              }
            ],
            "Path": "/",
            "RoleName": {
              "Fn::Join": [
                "-",
                [
                  "simotec-sls",
                  "dev",
                  {
                    "Ref": "AWS::Region"
                  },
                  "lambdaRole"
                ]
              ]
            }
          }
        },
        "ListUsersLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/users/handler.listUsers",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-listUsers",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ListUsersLogGroup"
          ]
        },
        "ListAllUsersLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/users/handler.listAllUsers",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-listAllUsers",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ListAllUsersLogGroup"
          ]
        },
        "CreateUserLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/users/handler.createUser",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-createUser",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "CreateUserLogGroup"
          ]
        },
        "EditUserLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/users/handler.editUser",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-editUser",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "EditUserLogGroup"
          ]
        },
        "DeleteUserLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/users/handler.deleteUser",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-deleteUser",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "DeleteUserLogGroup"
          ]
        },
        "GetDashboardStatsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/users/handler.getDashboardStats",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-getDashboardStats",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetDashboardStatsLogGroup"
          ]
        },
        "GetCadminsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/cadmins/handler.listCadmins",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-getCadmins",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetCadminsLogGroup"
          ]
        },
        "CreateCadminLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/cadmins/handler.createCadmin",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-createCadmin",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "CreateCadminLogGroup"
          ]
        },
        "UpdateCadminLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/cadmins/handler.updateCadmin",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-updateCadmin",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "UpdateCadminLogGroup"
          ]
        },
        "DeleteCadminLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/cadmins/handler.deleteCadmin",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-deleteCadmin",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "DeleteCadminLogGroup"
          ]
        },
        "GetCompaniesLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/companies/handler.listCompanies",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-getCompanies",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetCompaniesLogGroup"
          ]
        },
        "CreateCompanyLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/companies/handler.createCompany",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-createCompany",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "CreateCompanyLogGroup"
          ]
        },
        "UpdateCompanyLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/companies/handler.editCompany",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-updateCompany",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "UpdateCompanyLogGroup"
          ]
        },
        "DeleteCompanyLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/companies/handler.deleteCompany",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-deleteCompany",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "DeleteCompanyLogGroup"
          ]
        },
        "LoginLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/auth/handler.loginHandler",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-login",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "LoginLogGroup"
          ]
        },
        "CreateDashcicleLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/cycles/handler.createEvaluationCycle",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-create-cicle",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "CreateDashcicleLogGroup"
          ]
        },
        "GetDashciclesLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/cycles/handler.listCycles",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-get-cicles",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetDashciclesLogGroup"
          ]
        },
        "GetDashcicleLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/cycles/handler.getCycle",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-get-cicle",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetDashcicleLogGroup"
          ]
        },
        "UpdateDashcicleLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/cycles/handler.updateCycle",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-update-cicle",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "UpdateDashcicleLogGroup"
          ]
        },
        "DeleteDashcicleLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/cycles/handler.deleteCycle",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-delete-cicle",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "DeleteDashcicleLogGroup"
          ]
        },
        "GetAssignedTestsByAuthIdLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/users-tests/handler.getAssignedTests",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-getAssignedTestsByAuthId",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetAssignedTestsByAuthIdLogGroup"
          ]
        },
        "GetAssignedTestByIdLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/users-tests/handler.getAssignedTestById",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-getAssignedTestById",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetAssignedTestByIdLogGroup"
          ]
        },
        "GetTestQuestionsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/users-tests/handler.getTestQuestions",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-getTestQuestions",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetTestQuestionsLogGroup"
          ]
        },
        "SubmitTestLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/users-tests/handler.submitTest",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-submitTest",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "SubmitTestLogGroup"
          ]
        },
        "UpdateTestStatusLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/users-tests/handler.updateTestStatus",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-updateTestStatus",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "UpdateTestStatusLogGroup"
          ]
        },
        "EceListAssignmentsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/psicologo/psicologoHandler.listAllECEAssignments",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-eceListAssignments",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "EceListAssignmentsLogGroup"
          ]
        },
        "EceListResponsesLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/psicologo/psicologoHandler.listECEResponses",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-eceListResponses",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "EceListResponsesLogGroup"
          ]
        },
        "EceSubmitManualEvaluationLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/psicologo/psicologoHandler.submitManualEvaluation",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-eceSubmitManualEvaluation",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "EceSubmitManualEvaluationLogGroup"
          ]
        },
        "GetTestsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/tests/handler.getTests",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-getTests",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetTestsLogGroup"
          ]
        },
        "AssignTestLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1743188792321-2025-03-28T19:06:32.321Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/tests/handler.assignTest",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-assignTest",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "AssignTestLogGroup"
          ]
        },
        "ListUsersLambdaVersionpYZkJMho71HVOqL0lCYKdiFNl04C7Y5YHXf7fZb6U": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ListUsersLambdaFunction"
            },
            "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
          }
        },
        "ListAllUsersLambdaVersionnmNxITYOEjbrBj82QiXzMChlIH6KAqbqRZxB9bv3Dg0": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ListAllUsersLambdaFunction"
            },
            "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
          }
        },
        "CreateUserLambdaVersionVnXojcbjLEkjMJlFP1Vi0lYqhmWNBkGwlA7o7851Rg": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "CreateUserLambdaFunction"
            },
            "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
          }
        },
        "EditUserLambdaVersion8ytPVCzxPPLJlXoy4S2g59r7h4amE1jeaMdROyaYcY": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "EditUserLambdaFunction"
            },
            "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
          }
        },
        "DeleteUserLambdaVersionOHlXS7Digy9N2ln63O0WWJKFd7MQI6PU1cF6LhSfzIE": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "DeleteUserLambdaFunction"
            },
            "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
          }
        },
        "GetDashboardStatsLambdaVersionlkGfD8bYSYZ3ngmpEBeVkFimGFRWrW6CvZxm5RVhc": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetDashboardStatsLambdaFunction"
            },
            "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
          }
        },
        "GetCadminsLambdaVersionbAoFUaIFo6P7vB4ASGmsPUoD6Rwl5K0TQBiYykBUUQ": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetCadminsLambdaFunction"
            },
            "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
          }
        },
        "CreateCadminLambdaVersionOXwfMqnFm2mtMYGXTu2CLfRkCvP0HrjRMU2WIYEXVWE": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "CreateCadminLambdaFunction"
            },
            "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
          }
        },
        "UpdateCadminLambdaVersion3eciZZ5N3BdnlGerUbge68PmrzBFWR4liWpVOMSA6Wg": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UpdateCadminLambdaFunction"
            },
            "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
          }
        },
        "DeleteCadminLambdaVersion8AfNeXMeladYUvAVslGHQgVd3OTwEqgrpEMlqLWvMd4": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "DeleteCadminLambdaFunction"
            },
            "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
          }
        },
        "GetCompaniesLambdaVersionniFWcGBHjcwylPLnta97ja4WbiJBLCvfTbudhH8avI": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetCompaniesLambdaFunction"
            },
            "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
          }
        },
        "CreateCompanyLambdaVersionCcNdaZ7Am5jWhXdzAzJXy6BRe6f3BMpe4H98G8ebCs": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "CreateCompanyLambdaFunction"
            },
            "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
          }
        },
        "UpdateCompanyLambdaVersionDmBIDvXF6EsckMpOvQSHz8XJGd4zaKn2EOLTbmH8A": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UpdateCompanyLambdaFunction"
            },
            "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
          }
        },
        "DeleteCompanyLambdaVersionkiLqxoow3EdwCJEjrI58MZfZbATH4xhdq33S4pPjw": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "DeleteCompanyLambdaFunction"
            },
            "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
          }
        },
        "LoginLambdaVersiono2uOPbWY9lCfp1KvrlLyoOJpfodUcqudWRAFRSQEx8E": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "LoginLambdaFunction"
            },
            "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
          }
        },
        "CreateDashcicleLambdaVersionGKQQ0QBnU4bfLLVzjWpBDh7KwN93jaW8Aezba2wdxwk": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "CreateDashcicleLambdaFunction"
            },
            "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
          }
        },
        "GetDashciclesLambdaVersionsYIDcjwg6rRvYiIBH9TwnVbNpbU1iiaj5X55w0n9so": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetDashciclesLambdaFunction"
            },
            "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
          }
        },
        "GetDashcicleLambdaVersionqWmm0JFYasGMnNiRkQpGimXZl0Exw6JeOCTjy5bIBA": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetDashcicleLambdaFunction"
            },
            "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
          }
        },
        "UpdateDashcicleLambdaVersiona2n3xUpbnFuzJkvmtCtOmrxBhAAWVXtOqUvyKDoUUEk": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UpdateDashcicleLambdaFunction"
            },
            "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
          }
        },
        "DeleteDashcicleLambdaVersion8PbPvmmebMPSrPSHbW3HxEubkHHPmmY0pWX9jQ252Wk": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "DeleteDashcicleLambdaFunction"
            },
            "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
          }
        },
        "GetAssignedTestsByAuthIdLambdaVersionVBZOFiTL1vRENAyv2nSaLE6Z4becSD1orUlgsuHg784": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetAssignedTestsByAuthIdLambdaFunction"
            },
            "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
          }
        },
        "GetAssignedTestByIdLambdaVersionelocRNip77wypblIpYLqOutZr2DsU9rlzeTFWdLlFA": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetAssignedTestByIdLambdaFunction"
            },
            "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
          }
        },
        "GetTestQuestionsLambdaVersionftsPo9mpGbU9QekpM504hQczaUD3kE2zJ5NdpXiA": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetTestQuestionsLambdaFunction"
            },
            "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
          }
        },
        "SubmitTestLambdaVersion2sJCDA0An1MlHYnPZhTBEalpsTrsAYIUz94tTYsC3Q": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "SubmitTestLambdaFunction"
            },
            "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
          }
        },
        "UpdateTestStatusLambdaVersion9M5tKSvOweS52JbaLGDsWDfI6NS2qwvF8QlSYuqRfo": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UpdateTestStatusLambdaFunction"
            },
            "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
          }
        },
        "EceListAssignmentsLambdaVersionjWb2wx4Gvw3FVmRox6327G19LSpNi5pjYl9lMFP9vPI": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "EceListAssignmentsLambdaFunction"
            },
            "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
          }
        },
        "EceListResponsesLambdaVersionOI5BpdKnpxq0VomyuUK04XCgjKGtFcPlWAnEyk88YU": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "EceListResponsesLambdaFunction"
            },
            "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
          }
        },
        "EceSubmitManualEvaluationLambdaVersionSy4mGYrP3e5F9VMOYUy86khdOTe7usI3PZtT9FXqWw": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "EceSubmitManualEvaluationLambdaFunction"
            },
            "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
          }
        },
        "GetTestsLambdaVersion9vNLcmQwWN1ClRczL53AACNC53DIUOxyYkm8WWvoM1I": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetTestsLambdaFunction"
            },
            "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
          }
        },
        "AssignTestLambdaVersion9xANjCVzUBJjylhd1bDZiV28WSLMfLV9u3XHa74LZk": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "AssignTestLambdaFunction"
            },
            "CodeSha256": "vApG2YzP7MfF9aUcBi6qIK6HzYwzQeL+Te1Ib+U8nLg="
          }
        },
        "HttpApi": {
          "Type": "AWS::ApiGatewayV2::Api",
          "Properties": {
            "Name": "dev-simotec-sls",
            "ProtocolType": "HTTP",
            "Tags": {
              "CLIENT": "simotec",
              "STAGE": "dev"
            },
            "CorsConfiguration": {
              "AllowHeaders": [
                "*"
              ],
              "AllowMethods": [
                "GET",
                "POST",
                "PUT",
                "DELETE",
                "PATCH",
                "OPTIONS"
              ],
              "AllowOrigins": [
                "*"
              ]
            }
          }
        },
        "HttpApiStage": {
          "Type": "AWS::ApiGatewayV2::Stage",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "StageName": "$default",
            "AutoDeploy": true,
            "DefaultRouteSettings": {
              "DetailedMetricsEnabled": false
            },
            "Tags": {
              "CLIENT": "simotec",
              "STAGE": "dev"
            }
          }
        },
        "ListUsersLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ListUsersLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationListUsers": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "ListUsersLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetUsers": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /users",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationListUsers"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationListUsers"
        },
        "ListAllUsersLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ListAllUsersLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationListAllUsers": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "ListAllUsersLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetUsersAll": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /users/all",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationListAllUsers"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationListAllUsers"
        },
        "CreateUserLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "CreateUserLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationCreateUser": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "CreateUserLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostUsers": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /users",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationCreateUser"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationCreateUser"
        },
        "EditUserLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "EditUserLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationEditUser": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "EditUserLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePutUsersIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PUT /users/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationEditUser"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationEditUser"
        },
        "DeleteUserLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "DeleteUserLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationDeleteUser": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "DeleteUserLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteDeleteUsersIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "DELETE /users/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationDeleteUser"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationDeleteUser"
        },
        "GetDashboardStatsLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetDashboardStatsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetDashboardStats": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetDashboardStatsLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetDashboardRegularDashusersCount": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /dashboard/regular-users/count",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetDashboardStats"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetDashboardStats"
        },
        "HttpApiRouteGetDashboardAssignedDashtestsCount": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /dashboard/assigned-tests/count",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetDashboardStats"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetDashboardStats"
        },
        "GetCadminsLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetCadminsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetCadmins": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetCadminsLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetCadmins": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /cadmins",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetCadmins"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetCadmins"
        },
        "CreateCadminLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "CreateCadminLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationCreateCadmin": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "CreateCadminLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostCadmins": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /cadmins",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationCreateCadmin"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationCreateCadmin"
        },
        "UpdateCadminLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UpdateCadminLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationUpdateCadmin": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "UpdateCadminLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePutCadminsIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PUT /cadmins/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationUpdateCadmin"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationUpdateCadmin"
        },
        "DeleteCadminLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "DeleteCadminLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationDeleteCadmin": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "DeleteCadminLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteDeleteCadminsIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "DELETE /cadmins/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationDeleteCadmin"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationDeleteCadmin"
        },
        "GetCompaniesLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetCompaniesLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetCompanies": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetCompaniesLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetCompanies": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /companies",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetCompanies"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetCompanies"
        },
        "CreateCompanyLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "CreateCompanyLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationCreateCompany": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "CreateCompanyLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostCompanies": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /companies",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationCreateCompany"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationCreateCompany"
        },
        "UpdateCompanyLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UpdateCompanyLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationUpdateCompany": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "UpdateCompanyLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePutCompaniesIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PUT /companies/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationUpdateCompany"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationUpdateCompany"
        },
        "DeleteCompanyLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "DeleteCompanyLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationDeleteCompany": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "DeleteCompanyLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteDeleteCompaniesIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "DELETE /companies/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationDeleteCompany"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationDeleteCompany"
        },
        "LoginLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "LoginLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationLogin": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "LoginLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostAuthLogin": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /auth/login",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationLogin"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationLogin"
        },
        "CreateDashcicleLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "CreateDashcicleLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationCreateDashcicle": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "CreateDashcicleLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostCycles": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /cycles",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationCreateDashcicle"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationCreateDashcicle"
        },
        "GetDashciclesLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetDashciclesLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetDashcicles": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetDashciclesLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetCycles": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /cycles",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetDashcicles"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetDashcicles"
        },
        "GetDashcicleLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetDashcicleLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetDashcicle": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetDashcicleLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetCyclesIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /cycles/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetDashcicle"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetDashcicle"
        },
        "UpdateDashcicleLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UpdateDashcicleLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationUpdateDashcicle": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "UpdateDashcicleLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePutCyclesIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PUT /cycles/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationUpdateDashcicle"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationUpdateDashcicle"
        },
        "DeleteDashcicleLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "DeleteDashcicleLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationDeleteDashcicle": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "DeleteDashcicleLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteDeleteCyclesIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "DELETE /cycles/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationDeleteDashcicle"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationDeleteDashcicle"
        },
        "GetAssignedTestsByAuthIdLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetAssignedTestsByAuthIdLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetAssignedTestsByAuthId": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetAssignedTestsByAuthIdLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetAssignedDashtestsAuthDashuserAuthuseridVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /assigned-tests/auth-user/{auth_user_id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetAssignedTestsByAuthId"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetAssignedTestsByAuthId"
        },
        "GetAssignedTestByIdLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetAssignedTestByIdLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetAssignedTestById": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetAssignedTestByIdLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetAssignedDashtestsAssignedtestidVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /assigned-tests/{assigned_test_id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetAssignedTestById"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetAssignedTestById"
        },
        "GetTestQuestionsLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetTestQuestionsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetTestQuestions": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetTestQuestionsLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetUserDashtestsTestidVarQuestions": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /user-tests/{test_id}/questions",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetTestQuestions"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetTestQuestions"
        },
        "SubmitTestLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "SubmitTestLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationSubmitTest": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "SubmitTestLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostUserDashtestsTestidVarSubmit": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /user-tests/{test_id}/submit",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationSubmitTest"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationSubmitTest"
        },
        "UpdateTestStatusLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UpdateTestStatusLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationUpdateTestStatus": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "UpdateTestStatusLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePatchUserDashtestsAssignedtestidVarStatus": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PATCH /user-tests/{assigned_test_id}/status",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationUpdateTestStatus"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationUpdateTestStatus"
        },
        "EceListAssignmentsLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "EceListAssignmentsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationEceListAssignments": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "EceListAssignmentsLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetEceAsignaciones": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /ece/asignaciones",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationEceListAssignments"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationEceListAssignments"
        },
        "EceListResponsesLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "EceListResponsesLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationEceListResponses": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "EceListResponsesLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetEceRespuestas": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /ece/respuestas",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationEceListResponses"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationEceListResponses"
        },
        "EceSubmitManualEvaluationLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "EceSubmitManualEvaluationLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationEceSubmitManualEvaluation": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "EceSubmitManualEvaluationLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostEceEvaluar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /ece/evaluar",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationEceSubmitManualEvaluation"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationEceSubmitManualEvaluation"
        },
        "GetTestsLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetTestsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetTests": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetTestsLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetTests": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /tests",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetTests"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetTests"
        },
        "AssignTestLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "AssignTestLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationAssignTest": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "AssignTestLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostTestsAssign": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /tests/assign",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationAssignTest"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationAssignTest"
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "serverless-framework-deployments-us-east-2-31c921f8-650a",
          "Export": {
            "Name": "sls-simotec-sls-dev-ServerlessDeploymentBucketName"
          }
        },
        "ListUsersLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ListUsersLambdaVersionpYZkJMho71HVOqL0lCYKdiFNl04C7Y5YHXf7fZb6U"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-ListUsersLambdaFunctionQualifiedArn"
          }
        },
        "ListAllUsersLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ListAllUsersLambdaVersionnmNxITYOEjbrBj82QiXzMChlIH6KAqbqRZxB9bv3Dg0"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-ListAllUsersLambdaFunctionQualifiedArn"
          }
        },
        "CreateUserLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "CreateUserLambdaVersionVnXojcbjLEkjMJlFP1Vi0lYqhmWNBkGwlA7o7851Rg"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-CreateUserLambdaFunctionQualifiedArn"
          }
        },
        "EditUserLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "EditUserLambdaVersion8ytPVCzxPPLJlXoy4S2g59r7h4amE1jeaMdROyaYcY"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-EditUserLambdaFunctionQualifiedArn"
          }
        },
        "DeleteUserLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "DeleteUserLambdaVersionOHlXS7Digy9N2ln63O0WWJKFd7MQI6PU1cF6LhSfzIE"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-DeleteUserLambdaFunctionQualifiedArn"
          }
        },
        "GetDashboardStatsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetDashboardStatsLambdaVersionlkGfD8bYSYZ3ngmpEBeVkFimGFRWrW6CvZxm5RVhc"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-GetDashboardStatsLambdaFunctionQualifiedArn"
          }
        },
        "GetCadminsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetCadminsLambdaVersionbAoFUaIFo6P7vB4ASGmsPUoD6Rwl5K0TQBiYykBUUQ"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-GetCadminsLambdaFunctionQualifiedArn"
          }
        },
        "CreateCadminLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "CreateCadminLambdaVersionOXwfMqnFm2mtMYGXTu2CLfRkCvP0HrjRMU2WIYEXVWE"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-CreateCadminLambdaFunctionQualifiedArn"
          }
        },
        "UpdateCadminLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UpdateCadminLambdaVersion3eciZZ5N3BdnlGerUbge68PmrzBFWR4liWpVOMSA6Wg"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-UpdateCadminLambdaFunctionQualifiedArn"
          }
        },
        "DeleteCadminLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "DeleteCadminLambdaVersion8AfNeXMeladYUvAVslGHQgVd3OTwEqgrpEMlqLWvMd4"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-DeleteCadminLambdaFunctionQualifiedArn"
          }
        },
        "GetCompaniesLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetCompaniesLambdaVersionniFWcGBHjcwylPLnta97ja4WbiJBLCvfTbudhH8avI"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-GetCompaniesLambdaFunctionQualifiedArn"
          }
        },
        "CreateCompanyLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "CreateCompanyLambdaVersionCcNdaZ7Am5jWhXdzAzJXy6BRe6f3BMpe4H98G8ebCs"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-CreateCompanyLambdaFunctionQualifiedArn"
          }
        },
        "UpdateCompanyLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UpdateCompanyLambdaVersionDmBIDvXF6EsckMpOvQSHz8XJGd4zaKn2EOLTbmH8A"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-UpdateCompanyLambdaFunctionQualifiedArn"
          }
        },
        "DeleteCompanyLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "DeleteCompanyLambdaVersionkiLqxoow3EdwCJEjrI58MZfZbATH4xhdq33S4pPjw"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-DeleteCompanyLambdaFunctionQualifiedArn"
          }
        },
        "LoginLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "LoginLambdaVersiono2uOPbWY9lCfp1KvrlLyoOJpfodUcqudWRAFRSQEx8E"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-LoginLambdaFunctionQualifiedArn"
          }
        },
        "CreateDashcicleLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "CreateDashcicleLambdaVersionGKQQ0QBnU4bfLLVzjWpBDh7KwN93jaW8Aezba2wdxwk"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-CreateDashcicleLambdaFunctionQualifiedArn"
          }
        },
        "GetDashciclesLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetDashciclesLambdaVersionsYIDcjwg6rRvYiIBH9TwnVbNpbU1iiaj5X55w0n9so"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-GetDashciclesLambdaFunctionQualifiedArn"
          }
        },
        "GetDashcicleLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetDashcicleLambdaVersionqWmm0JFYasGMnNiRkQpGimXZl0Exw6JeOCTjy5bIBA"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-GetDashcicleLambdaFunctionQualifiedArn"
          }
        },
        "UpdateDashcicleLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UpdateDashcicleLambdaVersiona2n3xUpbnFuzJkvmtCtOmrxBhAAWVXtOqUvyKDoUUEk"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-UpdateDashcicleLambdaFunctionQualifiedArn"
          }
        },
        "DeleteDashcicleLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "DeleteDashcicleLambdaVersion8PbPvmmebMPSrPSHbW3HxEubkHHPmmY0pWX9jQ252Wk"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-DeleteDashcicleLambdaFunctionQualifiedArn"
          }
        },
        "GetAssignedTestsByAuthIdLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetAssignedTestsByAuthIdLambdaVersionVBZOFiTL1vRENAyv2nSaLE6Z4becSD1orUlgsuHg784"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-GetAssignedTestsByAuthIdLambdaFunctionQualifiedArn"
          }
        },
        "GetAssignedTestByIdLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetAssignedTestByIdLambdaVersionelocRNip77wypblIpYLqOutZr2DsU9rlzeTFWdLlFA"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-GetAssignedTestByIdLambdaFunctionQualifiedArn"
          }
        },
        "GetTestQuestionsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetTestQuestionsLambdaVersionftsPo9mpGbU9QekpM504hQczaUD3kE2zJ5NdpXiA"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-GetTestQuestionsLambdaFunctionQualifiedArn"
          }
        },
        "SubmitTestLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "SubmitTestLambdaVersion2sJCDA0An1MlHYnPZhTBEalpsTrsAYIUz94tTYsC3Q"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-SubmitTestLambdaFunctionQualifiedArn"
          }
        },
        "UpdateTestStatusLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UpdateTestStatusLambdaVersion9M5tKSvOweS52JbaLGDsWDfI6NS2qwvF8QlSYuqRfo"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-UpdateTestStatusLambdaFunctionQualifiedArn"
          }
        },
        "EceListAssignmentsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "EceListAssignmentsLambdaVersionjWb2wx4Gvw3FVmRox6327G19LSpNi5pjYl9lMFP9vPI"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-EceListAssignmentsLambdaFunctionQualifiedArn"
          }
        },
        "EceListResponsesLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "EceListResponsesLambdaVersionOI5BpdKnpxq0VomyuUK04XCgjKGtFcPlWAnEyk88YU"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-EceListResponsesLambdaFunctionQualifiedArn"
          }
        },
        "EceSubmitManualEvaluationLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "EceSubmitManualEvaluationLambdaVersionSy4mGYrP3e5F9VMOYUy86khdOTe7usI3PZtT9FXqWw"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-EceSubmitManualEvaluationLambdaFunctionQualifiedArn"
          }
        },
        "GetTestsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetTestsLambdaVersion9vNLcmQwWN1ClRczL53AACNC53DIUOxyYkm8WWvoM1I"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-GetTestsLambdaFunctionQualifiedArn"
          }
        },
        "AssignTestLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "AssignTestLambdaVersion9xANjCVzUBJjylhd1bDZiV28WSLMfLV9u3XHa74LZk"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-AssignTestLambdaFunctionQualifiedArn"
          }
        },
        "HttpApiId": {
          "Description": "Id of the HTTP API",
          "Value": {
            "Ref": "HttpApi"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-HttpApiId"
          }
        },
        "HttpApiUrl": {
          "Description": "URL of the HTTP API",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "HttpApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                }
              ]
            ]
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-HttpApiUrl"
          }
        }
      }
    }
  }
}