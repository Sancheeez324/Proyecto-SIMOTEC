{
  "C:\\Users\\alfre\\OneDrive\\Documentos\\GitHub\\Proyecto\\simotec-sls-develop\\serverless.yml": {
    "versionFramework": "4.7.0",
    "servicePath": "C:\\Users\\alfre\\OneDrive\\Documentos\\GitHub\\Proyecto\\simotec-sls-develop\\serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "simotec-sls",
      "frameworkVersion": "4",
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "timeout": 20,
        "memorySize": 3000,
        "stage": "dev",
        "region": "us-east-2",
        "tags": {
          "CLIENT": "simotec",
          "STAGE": "dev"
        },
        "httpApi": {
          "cors": {
            "allowedOrigins": [
              "*"
            ],
            "allowedHeaders": [
              "*"
            ],
            "allowedMethods": [
              "GET",
              "POST",
              "PUT",
              "DELETE",
              "PATCH",
              "OPTIONS"
            ]
          }
        },
        "environment": {
          "TZ": "America/Santiago",
          "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
          "DB_USER": "admin",
          "DB_PASSWORD": "<REDACTED>",
          "DB_NAME": "simotec",
          "JWT_SECRET": "<REDACTED>",
          "JWT_EXPIRES_IN": "1d",
          "CORS_ORIGIN": "http://localhost:5173"
        },
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "rds:DescribeDBInstances",
              "rds:Connect"
            ],
            "Resource": "*"
          }
        ],
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "GetUsersLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-getUsers"
              }
            },
            "CreateUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-createUser"
              }
            },
            "UpdateUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-updateUser"
              }
            },
            "DeleteUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-deleteUser"
              }
            },
            "GetCompaniesLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-getCompanies"
              }
            },
            "CreateCompanyLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-createCompany"
              }
            },
            "UpdateCompanyLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-updateCompany"
              }
            },
            "DeleteCompanyLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-deleteCompany"
              }
            },
            "LoginLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-login"
              }
            },
            "RefreshLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-refresh"
              }
            },
            "LogoutLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-logout"
              }
            },
            "CreateDashcicleLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-create-cicle"
              }
            },
            "GetDashciclesLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-get-cicles"
              }
            },
            "GetDashcicleLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-get-cicle"
              }
            },
            "UpdateDashcicleLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-update-cicle"
              }
            },
            "DeleteDashcicleLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-delete-cicle"
              }
            },
            "StartDashtestLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-start-test"
              }
            },
            "SaveDashtestDashprogressLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-save-test-progress"
              }
            },
            "GetDashtestDashprogressLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-get-test-progress"
              }
            },
            "ConfirmDashtestDashcompletionLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/simotec-sls-dev-confirm-test-completion"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "simotec-sls",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/simotec-sls-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/simotec-sls-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "rds:DescribeDBInstances",
                            "rds:Connect"
                          ],
                          "Resource": "*"
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "simotec-sls",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "GetUsersLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/users/handler.listUsers",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-getUsers",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetUsersLogGroup"
              ]
            },
            "CreateUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/users/handler.createUser",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-createUser",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateUserLogGroup"
              ]
            },
            "UpdateUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/users/handler.updateUser",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-updateUser",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateUserLogGroup"
              ]
            },
            "DeleteUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/users/handler.deleteUser",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-deleteUser",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteUserLogGroup"
              ]
            },
            "GetCompaniesLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/companies/handler.listCompanies",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-getCompanies",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetCompaniesLogGroup"
              ]
            },
            "CreateCompanyLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/companies/handler.createCompany",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-createCompany",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateCompanyLogGroup"
              ]
            },
            "UpdateCompanyLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/companies/handler.editCompany",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-updateCompany",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateCompanyLogGroup"
              ]
            },
            "DeleteCompanyLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/companies/handler.deleteCompany",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-deleteCompany",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteCompanyLogGroup"
              ]
            },
            "LoginLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/auth/handler.login",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-login",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "LoginLogGroup"
              ]
            },
            "RefreshLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/auth/handler.refreshToken",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-refresh",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "RefreshLogGroup"
              ]
            },
            "LogoutLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/auth/handler.logout",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-logout",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "LogoutLogGroup"
              ]
            },
            "CreateDashcicleLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/cycles/handler.createEvaluationCycle",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-create-cicle",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateDashcicleLogGroup"
              ]
            },
            "GetDashciclesLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/cycles/handler.listCycles",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-get-cicles",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetDashciclesLogGroup"
              ]
            },
            "GetDashcicleLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/cycles/handler.getCycle",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-get-cicle",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetDashcicleLogGroup"
              ]
            },
            "UpdateDashcicleLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/cycles/handler.updateCycle",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-update-cicle",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateDashcicleLogGroup"
              ]
            },
            "DeleteDashcicleLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/cycles/handler.deleteCycle",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-delete-cicle",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteDashcicleLogGroup"
              ]
            },
            "StartDashtestLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/users-tests/handler.startTest",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-start-test",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "StartDashtestLogGroup"
              ]
            },
            "SaveDashtestDashprogressLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/users-tests/handler.saveTestProgress",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-save-test-progress",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "SaveDashtestDashprogressLogGroup"
              ]
            },
            "GetDashtestDashprogressLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/users-tests/handler.getTestProgress",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-get-test-progress",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetDashtestDashprogressLogGroup"
              ]
            },
            "ConfirmDashtestDashcompletionLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                  "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
                },
                "Handler": "src/maintainers/users-tests/handler.confirmTestCompletion",
                "Runtime": "nodejs20.x",
                "FunctionName": "simotec-sls-dev-confirm-test-completion",
                "MemorySize": 3000,
                "Timeout": 20,
                "Tags": [
                  {
                    "Key": "CLIENT",
                    "Value": "simotec"
                  },
                  {
                    "Key": "STAGE",
                    "Value": "dev"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "TZ": "America/Santiago",
                    "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "simotec",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRES_IN": "1d",
                    "CORS_ORIGIN": "http://localhost:5173"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ConfirmDashtestDashcompletionLogGroup"
              ]
            },
            "GetUsersLambdaVersionKtmaWXBZ95ireB8ZGMydPA8pSmKlYOrsu5gBNK8c": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetUsersLambdaFunction"
                },
                "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
              }
            },
            "CreateUserLambdaVersionqODyffTBIP8Vf5Q1GEZ5ZrFpVjMKojnu31tTzmuJSo": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateUserLambdaFunction"
                },
                "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
              }
            },
            "UpdateUserLambdaVersionquaiqBCQNBDeCuInhB1jqogtWmjvh0AEX4rfYM8pPjM": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateUserLambdaFunction"
                },
                "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
              }
            },
            "DeleteUserLambdaVersionKbubXwnWJ1I7nsBbNbKQYqkPjkSJUrtz0DTpzQjPk": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteUserLambdaFunction"
                },
                "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
              }
            },
            "GetCompaniesLambdaVersiongoCKnuHIHzvx1X58VzP4FdaR7lpdNKOk8T6ALCg88": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetCompaniesLambdaFunction"
                },
                "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
              }
            },
            "CreateCompanyLambdaVersionuaUeIiKSxnnTdfus2agR4dHLBeQijskaVUnacPU9g": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateCompanyLambdaFunction"
                },
                "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
              }
            },
            "UpdateCompanyLambdaVersionOqOr6hBdXSP8PfzlhCmREcNsDOoYYWzEpHOY0W1zUoo": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateCompanyLambdaFunction"
                },
                "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
              }
            },
            "DeleteCompanyLambdaVersioncKpHoMMh8ZELIekhrVH5MH0KSmYa196sywMEeg9Q9yU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteCompanyLambdaFunction"
                },
                "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
              }
            },
            "LoginLambdaVersionDrQKAUL0G2UG9Mj8bvw5ZSGWzwTEg3TUlbWbmYrYQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "LoginLambdaFunction"
                },
                "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
              }
            },
            "RefreshLambdaVersionsvZOaflB5JVgPUzniD5TIjubDLXLUuVhXMrohME9eeY": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "RefreshLambdaFunction"
                },
                "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
              }
            },
            "LogoutLambdaVersiongyBcutwIoiAYSEdEPgoekHsdpB0Tqqnl5BQWqCXF1k": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "LogoutLambdaFunction"
                },
                "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
              }
            },
            "CreateDashcicleLambdaVersion23nHl16Dqn9UwZnVhjc1h4FD1HGO4ZaKi1li5Exf0g": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateDashcicleLambdaFunction"
                },
                "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
              }
            },
            "GetDashciclesLambdaVersionj9nHLlIzpcFqHlh5MMth8srWyljtW4N4TDHJ5xWp0": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetDashciclesLambdaFunction"
                },
                "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
              }
            },
            "GetDashcicleLambdaVersionW7sJfDgpmD2HCOUeCtiQi1G8eEsGIzMGiTDndyXuFZw": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetDashcicleLambdaFunction"
                },
                "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
              }
            },
            "UpdateDashcicleLambdaVersionPBiibfN7ZPecDRUdnTJeyDhqmXjYjIEPWQcMTFc27Q": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateDashcicleLambdaFunction"
                },
                "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
              }
            },
            "DeleteDashcicleLambdaVersionx1NA0SxGpPzyrT7Mc6hlW2C98OHdsE9CickhTwSw": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteDashcicleLambdaFunction"
                },
                "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
              }
            },
            "StartDashtestLambdaVersionA7E6ZC48h9lNeKV9f0Dm7fnYL3DGurqgFblX5q600dU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "StartDashtestLambdaFunction"
                },
                "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
              }
            },
            "SaveDashtestDashprogressLambdaVersionwCgCXuaFPjjVLVqhwd67UF7lv4vZrnKRN40eo5cw90": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "SaveDashtestDashprogressLambdaFunction"
                },
                "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
              }
            },
            "GetDashtestDashprogressLambdaVersionjJVEGDFVgby1qymhC6gSEQcwbSl3Oqv8Mya69xQ2c": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetDashtestDashprogressLambdaFunction"
                },
                "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
              }
            },
            "ConfirmDashtestDashcompletionLambdaVersionqPoDdrQnTHslfcZCvfQApCPMEvAa6dI0XVD0VoCmU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ConfirmDashtestDashcompletionLambdaFunction"
                },
                "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
              }
            },
            "HttpApi": {
              "Type": "AWS::ApiGatewayV2::Api",
              "Properties": {
                "Name": "dev-simotec-sls",
                "ProtocolType": "HTTP",
                "Tags": {
                  "CLIENT": "simotec",
                  "STAGE": "dev"
                },
                "CorsConfiguration": {
                  "AllowCredentials": "<REDACTED>",
                  "AllowHeaders": [
                    "*"
                  ],
                  "AllowMethods": [
                    "GET",
                    "POST",
                    "PUT",
                    "DELETE",
                    "PATCH",
                    "OPTIONS"
                  ],
                  "AllowOrigins": [
                    "*"
                  ]
                }
              }
            },
            "HttpApiStage": {
              "Type": "AWS::ApiGatewayV2::Stage",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "StageName": "$default",
                "AutoDeploy": true,
                "DefaultRouteSettings": {
                  "DetailedMetricsEnabled": false
                },
                "Tags": {
                  "CLIENT": "simotec",
                  "STAGE": "dev"
                }
              }
            },
            "GetUsersLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetUsersLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetUsers": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetUsersLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetUsers": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /users",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetUsers"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetUsers"
            },
            "CreateUserLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationCreateUser": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "CreateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostUsers": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /users",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationCreateUser"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationCreateUser"
            },
            "UpdateUserLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationUpdateUser": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "UpdateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePutUsersIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PUT /users/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationUpdateUser"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationUpdateUser"
            },
            "DeleteUserLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationDeleteUser": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "DeleteUserLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteDeleteUsersIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "DELETE /users/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationDeleteUser"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationDeleteUser"
            },
            "GetCompaniesLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetCompaniesLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetCompanies": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetCompaniesLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetCompanies": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /companies",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetCompanies"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetCompanies"
            },
            "CreateCompanyLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateCompanyLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationCreateCompany": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "CreateCompanyLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostCompanies": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /companies",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationCreateCompany"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationCreateCompany"
            },
            "UpdateCompanyLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateCompanyLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationUpdateCompany": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "UpdateCompanyLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePutCompaniesIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PUT /companies/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationUpdateCompany"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationUpdateCompany"
            },
            "DeleteCompanyLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteCompanyLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationDeleteCompany": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "DeleteCompanyLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteDeleteCompaniesIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "DELETE /companies/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationDeleteCompany"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationDeleteCompany"
            },
            "LoginLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "LoginLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationLogin": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "LoginLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostAuthLogin": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /auth/login",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationLogin"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationLogin"
            },
            "RefreshLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "RefreshLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationRefresh": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "RefreshLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostAuthRefresh": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /auth/refresh",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationRefresh"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationRefresh"
            },
            "LogoutLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "LogoutLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationLogout": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "LogoutLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostAuthLogout": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /auth/logout",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationLogout"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationLogout"
            },
            "CreateDashcicleLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateDashcicleLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationCreateDashcicle": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "CreateDashcicleLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostCycles": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /cycles",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationCreateDashcicle"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationCreateDashcicle"
            },
            "GetDashciclesLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetDashciclesLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetDashcicles": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetDashciclesLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetCycles": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /cycles",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetDashcicles"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetDashcicles"
            },
            "GetDashcicleLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetDashcicleLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetDashcicle": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetDashcicleLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetCyclesIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /cycles/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetDashcicle"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetDashcicle"
            },
            "UpdateDashcicleLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateDashcicleLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationUpdateDashcicle": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "UpdateDashcicleLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePutCyclesIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PUT /cycles/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationUpdateDashcicle"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationUpdateDashcicle"
            },
            "DeleteDashcicleLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteDashcicleLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationDeleteDashcicle": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "DeleteDashcicleLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteDeleteCyclesIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "DELETE /cycles/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationDeleteDashcicle"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationDeleteDashcicle"
            },
            "StartDashtestLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "StartDashtestLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationStartDashtest": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "StartDashtestLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostUsersDashtests": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /users-tests",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationStartDashtest"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationStartDashtest"
            },
            "SaveDashtestDashprogressLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "SaveDashtestDashprogressLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationSaveDashtestDashprogress": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "SaveDashtestDashprogressLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePutUsersDashtestsIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PUT /users-tests/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationSaveDashtestDashprogress"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationSaveDashtestDashprogress"
            },
            "GetDashtestDashprogressLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetDashtestDashprogressLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetDashtestDashprogress": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetDashtestDashprogressLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostUsersDashtestsTestDashprogress": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /users-tests/test-progress",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetDashtestDashprogress"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetDashtestDashprogress"
            },
            "ConfirmDashtestDashcompletionLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ConfirmDashtestDashcompletionLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationConfirmDashtestDashcompletion": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "ConfirmDashtestDashcompletionLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostComfirmDashtestDashcompleted": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /comfirm-test-completed",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationConfirmDashtestDashcompletion"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationConfirmDashtestDashcompletion"
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "Export": {
                "Name": "sls-simotec-sls-dev-ServerlessDeploymentBucketName"
              }
            },
            "GetUsersLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetUsersLambdaVersionKtmaWXBZ95ireB8ZGMydPA8pSmKlYOrsu5gBNK8c"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-GetUsersLambdaFunctionQualifiedArn"
              }
            },
            "CreateUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateUserLambdaVersionqODyffTBIP8Vf5Q1GEZ5ZrFpVjMKojnu31tTzmuJSo"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-CreateUserLambdaFunctionQualifiedArn"
              }
            },
            "UpdateUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateUserLambdaVersionquaiqBCQNBDeCuInhB1jqogtWmjvh0AEX4rfYM8pPjM"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-UpdateUserLambdaFunctionQualifiedArn"
              }
            },
            "DeleteUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteUserLambdaVersionKbubXwnWJ1I7nsBbNbKQYqkPjkSJUrtz0DTpzQjPk"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-DeleteUserLambdaFunctionQualifiedArn"
              }
            },
            "GetCompaniesLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetCompaniesLambdaVersiongoCKnuHIHzvx1X58VzP4FdaR7lpdNKOk8T6ALCg88"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-GetCompaniesLambdaFunctionQualifiedArn"
              }
            },
            "CreateCompanyLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateCompanyLambdaVersionuaUeIiKSxnnTdfus2agR4dHLBeQijskaVUnacPU9g"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-CreateCompanyLambdaFunctionQualifiedArn"
              }
            },
            "UpdateCompanyLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateCompanyLambdaVersionOqOr6hBdXSP8PfzlhCmREcNsDOoYYWzEpHOY0W1zUoo"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-UpdateCompanyLambdaFunctionQualifiedArn"
              }
            },
            "DeleteCompanyLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteCompanyLambdaVersioncKpHoMMh8ZELIekhrVH5MH0KSmYa196sywMEeg9Q9yU"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-DeleteCompanyLambdaFunctionQualifiedArn"
              }
            },
            "LoginLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "LoginLambdaVersionDrQKAUL0G2UG9Mj8bvw5ZSGWzwTEg3TUlbWbmYrYQ"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-LoginLambdaFunctionQualifiedArn"
              }
            },
            "RefreshLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "RefreshLambdaVersionsvZOaflB5JVgPUzniD5TIjubDLXLUuVhXMrohME9eeY"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-RefreshLambdaFunctionQualifiedArn"
              }
            },
            "LogoutLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "LogoutLambdaVersiongyBcutwIoiAYSEdEPgoekHsdpB0Tqqnl5BQWqCXF1k"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-LogoutLambdaFunctionQualifiedArn"
              }
            },
            "CreateDashcicleLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateDashcicleLambdaVersion23nHl16Dqn9UwZnVhjc1h4FD1HGO4ZaKi1li5Exf0g"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-CreateDashcicleLambdaFunctionQualifiedArn"
              }
            },
            "GetDashciclesLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetDashciclesLambdaVersionj9nHLlIzpcFqHlh5MMth8srWyljtW4N4TDHJ5xWp0"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-GetDashciclesLambdaFunctionQualifiedArn"
              }
            },
            "GetDashcicleLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetDashcicleLambdaVersionW7sJfDgpmD2HCOUeCtiQi1G8eEsGIzMGiTDndyXuFZw"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-GetDashcicleLambdaFunctionQualifiedArn"
              }
            },
            "UpdateDashcicleLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateDashcicleLambdaVersionPBiibfN7ZPecDRUdnTJeyDhqmXjYjIEPWQcMTFc27Q"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-UpdateDashcicleLambdaFunctionQualifiedArn"
              }
            },
            "DeleteDashcicleLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteDashcicleLambdaVersionx1NA0SxGpPzyrT7Mc6hlW2C98OHdsE9CickhTwSw"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-DeleteDashcicleLambdaFunctionQualifiedArn"
              }
            },
            "StartDashtestLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "StartDashtestLambdaVersionA7E6ZC48h9lNeKV9f0Dm7fnYL3DGurqgFblX5q600dU"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-StartDashtestLambdaFunctionQualifiedArn"
              }
            },
            "SaveDashtestDashprogressLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "SaveDashtestDashprogressLambdaVersionwCgCXuaFPjjVLVqhwd67UF7lv4vZrnKRN40eo5cw90"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-SaveDashtestDashprogressLambdaFunctionQualifiedArn"
              }
            },
            "GetDashtestDashprogressLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetDashtestDashprogressLambdaVersionjJVEGDFVgby1qymhC6gSEQcwbSl3Oqv8Mya69xQ2c"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-GetDashtestDashprogressLambdaFunctionQualifiedArn"
              }
            },
            "ConfirmDashtestDashcompletionLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ConfirmDashtestDashcompletionLambdaVersionqPoDdrQnTHslfcZCvfQApCPMEvAa6dI0XVD0VoCmU"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-ConfirmDashtestDashcompletionLambdaFunctionQualifiedArn"
              }
            },
            "HttpApiId": {
              "Description": "Id of the HTTP API",
              "Value": {
                "Ref": "HttpApi"
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-HttpApiId"
              }
            },
            "HttpApiUrl": {
              "Description": "URL of the HTTP API",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "HttpApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "Export": {
                "Name": "sls-simotec-sls-dev-HttpApiUrl"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "getUsers": {
          "handler": "src/maintainers/users/handler.listUsers",
          "events": [
            {
              "httpApi": {
                "path": "/users",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/users"
            }
          ],
          "name": "simotec-sls-dev-getUsers",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetUsersLambdaVersionKtmaWXBZ95ireB8ZGMydPA8pSmKlYOrsu5gBNK8c"
        },
        "createUser": {
          "handler": "src/maintainers/users/handler.createUser",
          "events": [
            {
              "httpApi": {
                "path": "/users",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/users"
            }
          ],
          "name": "simotec-sls-dev-createUser",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "CreateUserLambdaVersionqODyffTBIP8Vf5Q1GEZ5ZrFpVjMKojnu31tTzmuJSo"
        },
        "updateUser": {
          "handler": "src/maintainers/users/handler.updateUser",
          "events": [
            {
              "httpApi": {
                "path": "/users/{id}",
                "method": "put"
              },
              "resolvedMethod": "PUT",
              "resolvedPath": "/users/{id}"
            }
          ],
          "name": "simotec-sls-dev-updateUser",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "UpdateUserLambdaVersionquaiqBCQNBDeCuInhB1jqogtWmjvh0AEX4rfYM8pPjM"
        },
        "deleteUser": {
          "handler": "src/maintainers/users/handler.deleteUser",
          "events": [
            {
              "httpApi": {
                "path": "/users/{id}",
                "method": "delete"
              },
              "resolvedMethod": "DELETE",
              "resolvedPath": "/users/{id}"
            }
          ],
          "name": "simotec-sls-dev-deleteUser",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "DeleteUserLambdaVersionKbubXwnWJ1I7nsBbNbKQYqkPjkSJUrtz0DTpzQjPk"
        },
        "getCompanies": {
          "handler": "src/maintainers/companies/handler.listCompanies",
          "events": [
            {
              "httpApi": {
                "path": "/companies",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/companies"
            }
          ],
          "name": "simotec-sls-dev-getCompanies",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetCompaniesLambdaVersiongoCKnuHIHzvx1X58VzP4FdaR7lpdNKOk8T6ALCg88"
        },
        "createCompany": {
          "handler": "src/maintainers/companies/handler.createCompany",
          "events": [
            {
              "httpApi": {
                "path": "/companies",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/companies"
            }
          ],
          "name": "simotec-sls-dev-createCompany",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "CreateCompanyLambdaVersionuaUeIiKSxnnTdfus2agR4dHLBeQijskaVUnacPU9g"
        },
        "updateCompany": {
          "handler": "src/maintainers/companies/handler.editCompany",
          "events": [
            {
              "httpApi": {
                "path": "/companies/{id}",
                "method": "put"
              },
              "resolvedMethod": "PUT",
              "resolvedPath": "/companies/{id}"
            }
          ],
          "name": "simotec-sls-dev-updateCompany",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "UpdateCompanyLambdaVersionOqOr6hBdXSP8PfzlhCmREcNsDOoYYWzEpHOY0W1zUoo"
        },
        "deleteCompany": {
          "handler": "src/maintainers/companies/handler.deleteCompany",
          "events": [
            {
              "httpApi": {
                "path": "/companies/{id}",
                "method": "delete"
              },
              "resolvedMethod": "DELETE",
              "resolvedPath": "/companies/{id}"
            }
          ],
          "name": "simotec-sls-dev-deleteCompany",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "DeleteCompanyLambdaVersioncKpHoMMh8ZELIekhrVH5MH0KSmYa196sywMEeg9Q9yU"
        },
        "login": {
          "handler": "src/maintainers/auth/handler.login",
          "events": [
            {
              "httpApi": {
                "path": "/auth/login",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/auth/login"
            }
          ],
          "name": "simotec-sls-dev-login",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "LoginLambdaVersionDrQKAUL0G2UG9Mj8bvw5ZSGWzwTEg3TUlbWbmYrYQ"
        },
        "refresh": {
          "handler": "src/maintainers/auth/handler.refreshToken",
          "events": [
            {
              "httpApi": {
                "path": "/auth/refresh",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/auth/refresh"
            }
          ],
          "name": "simotec-sls-dev-refresh",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "RefreshLambdaVersionsvZOaflB5JVgPUzniD5TIjubDLXLUuVhXMrohME9eeY"
        },
        "logout": {
          "handler": "src/maintainers/auth/handler.logout",
          "events": [
            {
              "httpApi": {
                "path": "/auth/logout",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/auth/logout"
            }
          ],
          "name": "simotec-sls-dev-logout",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "LogoutLambdaVersiongyBcutwIoiAYSEdEPgoekHsdpB0Tqqnl5BQWqCXF1k"
        },
        "create-cicle": {
          "handler": "src/maintainers/cycles/handler.createEvaluationCycle",
          "events": [
            {
              "httpApi": {
                "path": "/cycles",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/cycles"
            }
          ],
          "name": "simotec-sls-dev-create-cicle",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "CreateDashcicleLambdaVersion23nHl16Dqn9UwZnVhjc1h4FD1HGO4ZaKi1li5Exf0g"
        },
        "get-cicles": {
          "handler": "src/maintainers/cycles/handler.listCycles",
          "events": [
            {
              "httpApi": {
                "path": "/cycles",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/cycles"
            }
          ],
          "name": "simotec-sls-dev-get-cicles",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetDashciclesLambdaVersionj9nHLlIzpcFqHlh5MMth8srWyljtW4N4TDHJ5xWp0"
        },
        "get-cicle": {
          "handler": "src/maintainers/cycles/handler.getCycle",
          "events": [
            {
              "httpApi": {
                "path": "/cycles/{id}",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/cycles/{id}"
            }
          ],
          "name": "simotec-sls-dev-get-cicle",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetDashcicleLambdaVersionW7sJfDgpmD2HCOUeCtiQi1G8eEsGIzMGiTDndyXuFZw"
        },
        "update-cicle": {
          "handler": "src/maintainers/cycles/handler.updateCycle",
          "events": [
            {
              "httpApi": {
                "path": "/cycles/{id}",
                "method": "put"
              },
              "resolvedMethod": "PUT",
              "resolvedPath": "/cycles/{id}"
            }
          ],
          "name": "simotec-sls-dev-update-cicle",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "UpdateDashcicleLambdaVersionPBiibfN7ZPecDRUdnTJeyDhqmXjYjIEPWQcMTFc27Q"
        },
        "delete-cicle": {
          "handler": "src/maintainers/cycles/handler.deleteCycle",
          "events": [
            {
              "httpApi": {
                "path": "/cycles/{id}",
                "method": "delete"
              },
              "resolvedMethod": "DELETE",
              "resolvedPath": "/cycles/{id}"
            }
          ],
          "name": "simotec-sls-dev-delete-cicle",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "DeleteDashcicleLambdaVersionx1NA0SxGpPzyrT7Mc6hlW2C98OHdsE9CickhTwSw"
        },
        "start-test": {
          "handler": "src/maintainers/users-tests/handler.startTest",
          "events": [
            {
              "httpApi": {
                "path": "/users-tests",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/users-tests"
            }
          ],
          "name": "simotec-sls-dev-start-test",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "StartDashtestLambdaVersionA7E6ZC48h9lNeKV9f0Dm7fnYL3DGurqgFblX5q600dU"
        },
        "save-test-progress": {
          "handler": "src/maintainers/users-tests/handler.saveTestProgress",
          "events": [
            {
              "httpApi": {
                "path": "/users-tests/{id}",
                "method": "put"
              },
              "resolvedMethod": "PUT",
              "resolvedPath": "/users-tests/{id}"
            }
          ],
          "name": "simotec-sls-dev-save-test-progress",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "SaveDashtestDashprogressLambdaVersionwCgCXuaFPjjVLVqhwd67UF7lv4vZrnKRN40eo5cw90"
        },
        "get-test-progress": {
          "handler": "src/maintainers/users-tests/handler.getTestProgress",
          "events": [
            {
              "httpApi": {
                "path": "/users-tests/test-progress",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/users-tests/test-progress"
            }
          ],
          "name": "simotec-sls-dev-get-test-progress",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetDashtestDashprogressLambdaVersionjJVEGDFVgby1qymhC6gSEQcwbSl3Oqv8Mya69xQ2c"
        },
        "confirm-test-completion": {
          "handler": "src/maintainers/users-tests/handler.confirmTestCompletion",
          "events": [
            {
              "httpApi": {
                "path": "/comfirm-test-completed",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/comfirm-test-completed"
            }
          ],
          "name": "simotec-sls-dev-confirm-test-completion",
          "package": {},
          "memory": 3000,
          "timeout": 20,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ConfirmDashtestDashcompletionLambdaVersionqPoDdrQnTHslfcZCvfQApCPMEvAa6dI0XVD0VoCmU"
        }
      },
      "custom": null
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "timeout": 20,
      "memorySize": 3000,
      "stage": "dev",
      "region": "us-east-2",
      "tags": {
        "CLIENT": "simotec",
        "STAGE": "dev"
      },
      "httpApi": {
        "cors": {
          "allowedOrigins": [
            "*"
          ],
          "allowedHeaders": [
            "*"
          ],
          "allowedMethods": [
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "PATCH",
            "OPTIONS"
          ]
        }
      },
      "environment": {
        "TZ": "America/Santiago",
        "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
        "DB_USER": "admin",
        "DB_PASSWORD": "<REDACTED>",
        "DB_NAME": "simotec",
        "JWT_SECRET": "<REDACTED>",
        "JWT_EXPIRES_IN": "1d",
        "CORS_ORIGIN": "http://localhost:5173"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "rds:DescribeDBInstances",
            "rds:Connect"
          ],
          "Resource": "*"
        }
      ],
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "GetUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-getUsers"
            }
          },
          "CreateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-createUser"
            }
          },
          "UpdateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-updateUser"
            }
          },
          "DeleteUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-deleteUser"
            }
          },
          "GetCompaniesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-getCompanies"
            }
          },
          "CreateCompanyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-createCompany"
            }
          },
          "UpdateCompanyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-updateCompany"
            }
          },
          "DeleteCompanyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-deleteCompany"
            }
          },
          "LoginLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-login"
            }
          },
          "RefreshLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-refresh"
            }
          },
          "LogoutLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-logout"
            }
          },
          "CreateDashcicleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-create-cicle"
            }
          },
          "GetDashciclesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-get-cicles"
            }
          },
          "GetDashcicleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-get-cicle"
            }
          },
          "UpdateDashcicleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-update-cicle"
            }
          },
          "DeleteDashcicleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-delete-cicle"
            }
          },
          "StartDashtestLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-start-test"
            }
          },
          "SaveDashtestDashprogressLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-save-test-progress"
            }
          },
          "GetDashtestDashprogressLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-get-test-progress"
            }
          },
          "ConfirmDashtestDashcompletionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-confirm-test-completion"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "simotec-sls",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/simotec-sls-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/simotec-sls-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "rds:DescribeDBInstances",
                          "rds:Connect"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "simotec-sls",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "GetUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users/handler.listUsers",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-getUsers",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUsersLogGroup"
            ]
          },
          "CreateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users/handler.createUser",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-createUser",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateUserLogGroup"
            ]
          },
          "UpdateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users/handler.updateUser",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-updateUser",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateUserLogGroup"
            ]
          },
          "DeleteUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users/handler.deleteUser",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-deleteUser",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteUserLogGroup"
            ]
          },
          "GetCompaniesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/companies/handler.listCompanies",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-getCompanies",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetCompaniesLogGroup"
            ]
          },
          "CreateCompanyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/companies/handler.createCompany",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-createCompany",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateCompanyLogGroup"
            ]
          },
          "UpdateCompanyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/companies/handler.editCompany",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-updateCompany",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateCompanyLogGroup"
            ]
          },
          "DeleteCompanyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/companies/handler.deleteCompany",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-deleteCompany",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteCompanyLogGroup"
            ]
          },
          "LoginLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/auth/handler.login",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-login",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LoginLogGroup"
            ]
          },
          "RefreshLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/auth/handler.refreshToken",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-refresh",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RefreshLogGroup"
            ]
          },
          "LogoutLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/auth/handler.logout",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-logout",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LogoutLogGroup"
            ]
          },
          "CreateDashcicleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cycles/handler.createEvaluationCycle",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-create-cicle",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateDashcicleLogGroup"
            ]
          },
          "GetDashciclesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cycles/handler.listCycles",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-get-cicles",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetDashciclesLogGroup"
            ]
          },
          "GetDashcicleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cycles/handler.getCycle",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-get-cicle",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetDashcicleLogGroup"
            ]
          },
          "UpdateDashcicleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cycles/handler.updateCycle",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-update-cicle",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateDashcicleLogGroup"
            ]
          },
          "DeleteDashcicleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cycles/handler.deleteCycle",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-delete-cicle",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteDashcicleLogGroup"
            ]
          },
          "StartDashtestLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users-tests/handler.startTest",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-start-test",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "StartDashtestLogGroup"
            ]
          },
          "SaveDashtestDashprogressLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users-tests/handler.saveTestProgress",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-save-test-progress",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SaveDashtestDashprogressLogGroup"
            ]
          },
          "GetDashtestDashprogressLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users-tests/handler.getTestProgress",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-get-test-progress",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetDashtestDashprogressLogGroup"
            ]
          },
          "ConfirmDashtestDashcompletionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users-tests/handler.confirmTestCompletion",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-confirm-test-completion",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ConfirmDashtestDashcompletionLogGroup"
            ]
          },
          "GetUsersLambdaVersionKtmaWXBZ95ireB8ZGMydPA8pSmKlYOrsu5gBNK8c": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUsersLambdaFunction"
              },
              "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
            }
          },
          "CreateUserLambdaVersionqODyffTBIP8Vf5Q1GEZ5ZrFpVjMKojnu31tTzmuJSo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateUserLambdaFunction"
              },
              "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
            }
          },
          "UpdateUserLambdaVersionquaiqBCQNBDeCuInhB1jqogtWmjvh0AEX4rfYM8pPjM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateUserLambdaFunction"
              },
              "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
            }
          },
          "DeleteUserLambdaVersionKbubXwnWJ1I7nsBbNbKQYqkPjkSJUrtz0DTpzQjPk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteUserLambdaFunction"
              },
              "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
            }
          },
          "GetCompaniesLambdaVersiongoCKnuHIHzvx1X58VzP4FdaR7lpdNKOk8T6ALCg88": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetCompaniesLambdaFunction"
              },
              "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
            }
          },
          "CreateCompanyLambdaVersionuaUeIiKSxnnTdfus2agR4dHLBeQijskaVUnacPU9g": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateCompanyLambdaFunction"
              },
              "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
            }
          },
          "UpdateCompanyLambdaVersionOqOr6hBdXSP8PfzlhCmREcNsDOoYYWzEpHOY0W1zUoo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateCompanyLambdaFunction"
              },
              "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
            }
          },
          "DeleteCompanyLambdaVersioncKpHoMMh8ZELIekhrVH5MH0KSmYa196sywMEeg9Q9yU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteCompanyLambdaFunction"
              },
              "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
            }
          },
          "LoginLambdaVersionDrQKAUL0G2UG9Mj8bvw5ZSGWzwTEg3TUlbWbmYrYQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoginLambdaFunction"
              },
              "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
            }
          },
          "RefreshLambdaVersionsvZOaflB5JVgPUzniD5TIjubDLXLUuVhXMrohME9eeY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RefreshLambdaFunction"
              },
              "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
            }
          },
          "LogoutLambdaVersiongyBcutwIoiAYSEdEPgoekHsdpB0Tqqnl5BQWqCXF1k": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LogoutLambdaFunction"
              },
              "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
            }
          },
          "CreateDashcicleLambdaVersion23nHl16Dqn9UwZnVhjc1h4FD1HGO4ZaKi1li5Exf0g": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateDashcicleLambdaFunction"
              },
              "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
            }
          },
          "GetDashciclesLambdaVersionj9nHLlIzpcFqHlh5MMth8srWyljtW4N4TDHJ5xWp0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDashciclesLambdaFunction"
              },
              "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
            }
          },
          "GetDashcicleLambdaVersionW7sJfDgpmD2HCOUeCtiQi1G8eEsGIzMGiTDndyXuFZw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDashcicleLambdaFunction"
              },
              "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
            }
          },
          "UpdateDashcicleLambdaVersionPBiibfN7ZPecDRUdnTJeyDhqmXjYjIEPWQcMTFc27Q": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateDashcicleLambdaFunction"
              },
              "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
            }
          },
          "DeleteDashcicleLambdaVersionx1NA0SxGpPzyrT7Mc6hlW2C98OHdsE9CickhTwSw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteDashcicleLambdaFunction"
              },
              "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
            }
          },
          "StartDashtestLambdaVersionA7E6ZC48h9lNeKV9f0Dm7fnYL3DGurqgFblX5q600dU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "StartDashtestLambdaFunction"
              },
              "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
            }
          },
          "SaveDashtestDashprogressLambdaVersionwCgCXuaFPjjVLVqhwd67UF7lv4vZrnKRN40eo5cw90": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SaveDashtestDashprogressLambdaFunction"
              },
              "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
            }
          },
          "GetDashtestDashprogressLambdaVersionjJVEGDFVgby1qymhC6gSEQcwbSl3Oqv8Mya69xQ2c": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDashtestDashprogressLambdaFunction"
              },
              "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
            }
          },
          "ConfirmDashtestDashcompletionLambdaVersionqPoDdrQnTHslfcZCvfQApCPMEvAa6dI0XVD0VoCmU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ConfirmDashtestDashcompletionLambdaFunction"
              },
              "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-simotec-sls",
              "ProtocolType": "HTTP",
              "Tags": {
                "CLIENT": "simotec",
                "STAGE": "dev"
              },
              "CorsConfiguration": {
                "AllowCredentials": "<REDACTED>",
                "AllowHeaders": [
                  "*"
                ],
                "AllowMethods": [
                  "GET",
                  "POST",
                  "PUT",
                  "DELETE",
                  "PATCH",
                  "OPTIONS"
                ],
                "AllowOrigins": [
                  "*"
                ]
              }
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              },
              "Tags": {
                "CLIENT": "simotec",
                "STAGE": "dev"
              }
            }
          },
          "GetUsersLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetUsers": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetUsersLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetUsers": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /users",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetUsers"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetUsers"
          },
          "CreateUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "CreateUserLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostUsers": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /users",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateUser"
          },
          "UpdateUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "UpdateUserLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutUsersIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /users/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateUser"
          },
          "DeleteUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "DeleteUserLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteUsersIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /users/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteUser"
          },
          "GetCompaniesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetCompaniesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetCompanies": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetCompaniesLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetCompanies": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /companies",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetCompanies"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetCompanies"
          },
          "CreateCompanyLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateCompanyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateCompany": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "CreateCompanyLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostCompanies": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /companies",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateCompany"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateCompany"
          },
          "UpdateCompanyLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateCompanyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateCompany": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "UpdateCompanyLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutCompaniesIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /companies/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateCompany"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateCompany"
          },
          "DeleteCompanyLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteCompanyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteCompany": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "DeleteCompanyLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteCompaniesIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /companies/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteCompany"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteCompany"
          },
          "LoginLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoginLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationLogin": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "LoginLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostAuthLogin": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /auth/login",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationLogin"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationLogin"
          },
          "RefreshLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RefreshLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationRefresh": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "RefreshLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostAuthRefresh": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /auth/refresh",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationRefresh"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationRefresh"
          },
          "LogoutLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LogoutLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationLogout": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "LogoutLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostAuthLogout": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /auth/logout",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationLogout"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationLogout"
          },
          "CreateDashcicleLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateDashcicleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateDashcicle": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "CreateDashcicleLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostCycles": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /cycles",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateDashcicle"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateDashcicle"
          },
          "GetDashciclesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDashciclesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetDashcicles": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetDashciclesLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetCycles": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /cycles",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetDashcicles"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetDashcicles"
          },
          "GetDashcicleLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDashcicleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetDashcicle": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetDashcicleLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetCyclesIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /cycles/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetDashcicle"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetDashcicle"
          },
          "UpdateDashcicleLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateDashcicleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateDashcicle": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "UpdateDashcicleLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutCyclesIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /cycles/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateDashcicle"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateDashcicle"
          },
          "DeleteDashcicleLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteDashcicleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteDashcicle": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "DeleteDashcicleLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteCyclesIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /cycles/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteDashcicle"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteDashcicle"
          },
          "StartDashtestLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "StartDashtestLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationStartDashtest": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "StartDashtestLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostUsersDashtests": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /users-tests",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationStartDashtest"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationStartDashtest"
          },
          "SaveDashtestDashprogressLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SaveDashtestDashprogressLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationSaveDashtestDashprogress": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "SaveDashtestDashprogressLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutUsersDashtestsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /users-tests/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSaveDashtestDashprogress"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSaveDashtestDashprogress"
          },
          "GetDashtestDashprogressLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDashtestDashprogressLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetDashtestDashprogress": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetDashtestDashprogressLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostUsersDashtestsTestDashprogress": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /users-tests/test-progress",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetDashtestDashprogress"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetDashtestDashprogress"
          },
          "ConfirmDashtestDashcompletionLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ConfirmDashtestDashcompletionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationConfirmDashtestDashcompletion": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "ConfirmDashtestDashcompletionLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostComfirmDashtestDashcompleted": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /comfirm-test-completed",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationConfirmDashtestDashcompletion"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationConfirmDashtestDashcompletion"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-2-31c921f8-650a",
            "Export": {
              "Name": "sls-simotec-sls-dev-ServerlessDeploymentBucketName"
            }
          },
          "GetUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUsersLambdaVersionKtmaWXBZ95ireB8ZGMydPA8pSmKlYOrsu5gBNK8c"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetUsersLambdaFunctionQualifiedArn"
            }
          },
          "CreateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateUserLambdaVersionqODyffTBIP8Vf5Q1GEZ5ZrFpVjMKojnu31tTzmuJSo"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-CreateUserLambdaFunctionQualifiedArn"
            }
          },
          "UpdateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateUserLambdaVersionquaiqBCQNBDeCuInhB1jqogtWmjvh0AEX4rfYM8pPjM"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-UpdateUserLambdaFunctionQualifiedArn"
            }
          },
          "DeleteUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteUserLambdaVersionKbubXwnWJ1I7nsBbNbKQYqkPjkSJUrtz0DTpzQjPk"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-DeleteUserLambdaFunctionQualifiedArn"
            }
          },
          "GetCompaniesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetCompaniesLambdaVersiongoCKnuHIHzvx1X58VzP4FdaR7lpdNKOk8T6ALCg88"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetCompaniesLambdaFunctionQualifiedArn"
            }
          },
          "CreateCompanyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateCompanyLambdaVersionuaUeIiKSxnnTdfus2agR4dHLBeQijskaVUnacPU9g"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-CreateCompanyLambdaFunctionQualifiedArn"
            }
          },
          "UpdateCompanyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateCompanyLambdaVersionOqOr6hBdXSP8PfzlhCmREcNsDOoYYWzEpHOY0W1zUoo"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-UpdateCompanyLambdaFunctionQualifiedArn"
            }
          },
          "DeleteCompanyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteCompanyLambdaVersioncKpHoMMh8ZELIekhrVH5MH0KSmYa196sywMEeg9Q9yU"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-DeleteCompanyLambdaFunctionQualifiedArn"
            }
          },
          "LoginLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoginLambdaVersionDrQKAUL0G2UG9Mj8bvw5ZSGWzwTEg3TUlbWbmYrYQ"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-LoginLambdaFunctionQualifiedArn"
            }
          },
          "RefreshLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RefreshLambdaVersionsvZOaflB5JVgPUzniD5TIjubDLXLUuVhXMrohME9eeY"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-RefreshLambdaFunctionQualifiedArn"
            }
          },
          "LogoutLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LogoutLambdaVersiongyBcutwIoiAYSEdEPgoekHsdpB0Tqqnl5BQWqCXF1k"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-LogoutLambdaFunctionQualifiedArn"
            }
          },
          "CreateDashcicleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateDashcicleLambdaVersion23nHl16Dqn9UwZnVhjc1h4FD1HGO4ZaKi1li5Exf0g"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-CreateDashcicleLambdaFunctionQualifiedArn"
            }
          },
          "GetDashciclesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDashciclesLambdaVersionj9nHLlIzpcFqHlh5MMth8srWyljtW4N4TDHJ5xWp0"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetDashciclesLambdaFunctionQualifiedArn"
            }
          },
          "GetDashcicleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDashcicleLambdaVersionW7sJfDgpmD2HCOUeCtiQi1G8eEsGIzMGiTDndyXuFZw"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetDashcicleLambdaFunctionQualifiedArn"
            }
          },
          "UpdateDashcicleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateDashcicleLambdaVersionPBiibfN7ZPecDRUdnTJeyDhqmXjYjIEPWQcMTFc27Q"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-UpdateDashcicleLambdaFunctionQualifiedArn"
            }
          },
          "DeleteDashcicleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteDashcicleLambdaVersionx1NA0SxGpPzyrT7Mc6hlW2C98OHdsE9CickhTwSw"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-DeleteDashcicleLambdaFunctionQualifiedArn"
            }
          },
          "StartDashtestLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "StartDashtestLambdaVersionA7E6ZC48h9lNeKV9f0Dm7fnYL3DGurqgFblX5q600dU"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-StartDashtestLambdaFunctionQualifiedArn"
            }
          },
          "SaveDashtestDashprogressLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SaveDashtestDashprogressLambdaVersionwCgCXuaFPjjVLVqhwd67UF7lv4vZrnKRN40eo5cw90"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-SaveDashtestDashprogressLambdaFunctionQualifiedArn"
            }
          },
          "GetDashtestDashprogressLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDashtestDashprogressLambdaVersionjJVEGDFVgby1qymhC6gSEQcwbSl3Oqv8Mya69xQ2c"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetDashtestDashprogressLambdaFunctionQualifiedArn"
            }
          },
          "ConfirmDashtestDashcompletionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ConfirmDashtestDashcompletionLambdaVersionqPoDdrQnTHslfcZCvfQApCPMEvAa6dI0XVD0VoCmU"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-ConfirmDashtestDashcompletionLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-HttpApiUrl"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "serviceRawFile": "service: simotec-sls\r\nframeworkVersion: \"4\"\r\n\r\ncustom:\r\n  #customDomain:\r\n  #  domainName: ${env:AWS_DOMAIN_NAME}\r\n  #  basePath: \"\"\r\n  #  stage: ${self:provider.stage}\r\n  #  createRoute53Record: true\r\n  # endpointType: regional\r\n  #  certificateArn: ${env:AWS_CERTIFICATE_ARN}\r\n\r\n\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs20.x\r\n  timeout: 20\r\n  memorySize: 3000 \r\n  stage: ${opt:stage, 'dev'}\r\n  region: us-east-2\r\n  tags:\r\n    CLIENT: simotec\r\n    STAGE: ${self:provider.stage}\r\n\r\n  #Revisar  \r\n  #vpc:\r\n  #  securityGroupIds:\r\n  #    - sg-0277c381fd928a03b   # Tu Security Group que permite acceso a RDS\r\n  #  subnetIds:\r\n  #    - subnet-02b7e739c70cb25e4\r\n  #    - subnet-0898275b12331b159\r\n  #    - subnet-06e6d01dc93ae602a\r\n  httpApi:\r\n    cors:\r\n      allowedOrigins:\r\n        - \"*\"\r\n      allowedHeaders:\r\n        - \"*\"\r\n      allowedMethods:\r\n        - GET\r\n        - POST\r\n        - PUT\r\n        - DELETE\r\n        - PATCH\r\n        - OPTIONS\r\n  environment:\r\n    TZ: America/Santiago\r\n    DB_HOST: ${env:DB_HOST}\r\n    DB_USER: ${env:DB_USER}\r\n    DB_PASSWORD: ${env:DB_PASSWORD}\r\n    DB_NAME: ${env:DB_NAME}\r\n    #DB_SSL_CA: ${env:DB_SSL_CA}\r\n    JWT_SECRET: ${env:JWT_SECRET}\r\n    JWT_EXPIRES_IN: ${env:JWT_EXPIRES_IN}\r\n    CORS_ORIGIN: ${env:CORS_ORIGIN}\r\n  iamRoleStatements:\r\n    - Effect: \"Allow\"\r\n      Action:\r\n        - \"rds:DescribeDBInstances\"\r\n        - \"rds:Connect\"\r\n      Resource: \"*\"\r\nfunctions: ${file(./resources/functions.yml):functions}\r\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "orgId": "d9734738-ae0b-483b-982a-5acf28d30c8c",
    "orgName": "simotec",
    "userId": "qM2WBZ4jnQWl420pwN",
    "userName": "simotec",
    "serviceProviderAwsAccountId": "762233747429",
    "serviceProviderAwsCfStackName": "simotec-sls-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-2:762233747429:stack/simotec-sls-dev/039cb390-f9db-11ef-ad34-0238656b277f",
    "serviceProviderAwsCfStackCreated": "2025-03-05T16:00:52.714Z",
    "serviceProviderAwsCfStackUpdated": "2025-03-10T16:21:39.426Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "LogoutLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-logout:27",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-LogoutLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-deleteUser:27",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-DeleteUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetDashciclesLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-get-cicles:27",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-GetDashciclesLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteCompanyLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-deleteCompany:27",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-DeleteCompanyLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetUsersLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-getUsers:27",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-GetUsersLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateCompanyLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-updateCompany:27",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-UpdateCompanyLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ConfirmDashtestDashcompletionLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-confirm-test-completion:27",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-ConfirmDashtestDashcompletionLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-updateUser:27",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-UpdateUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "StartDashtestLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-start-test:27",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-StartDashtestLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "SaveDashtestDashprogressLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-save-test-progress:27",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-SaveDashtestDashprogressLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateCompanyLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-createCompany:27",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-CreateCompanyLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HttpApiId",
        "OutputValue": "m5oys6mzma",
        "Description": "Id of the HTTP API",
        "ExportName": "sls-simotec-sls-dev-HttpApiId"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-2-31c921f8-650a",
        "ExportName": "sls-simotec-sls-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "HttpApiUrl",
        "OutputValue": "https://m5oys6mzma.execute-api.us-east-2.amazonaws.com",
        "Description": "URL of the HTTP API",
        "ExportName": "sls-simotec-sls-dev-HttpApiUrl"
      },
      {
        "OutputKey": "RefreshLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-refresh:27",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-RefreshLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateDashcicleLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-create-cicle:27",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-CreateDashcicleLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetCompaniesLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-getCompanies:27",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-GetCompaniesLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetDashcicleLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-get-cicle:27",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-GetDashcicleLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateDashcicleLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-update-cicle:27",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-UpdateDashcicleLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetDashtestDashprogressLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-get-test-progress:27",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-GetDashtestDashprogressLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-createUser:27",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-CreateUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "LoginLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-login:27",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-LoginLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteDashcicleLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:762233747429:function:simotec-sls-dev-delete-cicle:27",
        "Description": "Current Lambda function version",
        "ExportName": "sls-simotec-sls-dev-DeleteDashcicleLambdaFunctionQualifiedArn"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "GetUsersLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-getUsers"
          }
        },
        "CreateUserLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-createUser"
          }
        },
        "UpdateUserLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-updateUser"
          }
        },
        "DeleteUserLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-deleteUser"
          }
        },
        "GetCompaniesLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-getCompanies"
          }
        },
        "CreateCompanyLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-createCompany"
          }
        },
        "UpdateCompanyLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-updateCompany"
          }
        },
        "DeleteCompanyLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-deleteCompany"
          }
        },
        "LoginLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-login"
          }
        },
        "RefreshLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-refresh"
          }
        },
        "LogoutLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-logout"
          }
        },
        "CreateDashcicleLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-create-cicle"
          }
        },
        "GetDashciclesLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-get-cicles"
          }
        },
        "GetDashcicleLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-get-cicle"
          }
        },
        "UpdateDashcicleLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-update-cicle"
          }
        },
        "DeleteDashcicleLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-delete-cicle"
          }
        },
        "StartDashtestLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-start-test"
          }
        },
        "SaveDashtestDashprogressLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-save-test-progress"
          }
        },
        "GetDashtestDashprogressLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-get-test-progress"
          }
        },
        "ConfirmDashtestDashcompletionLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/simotec-sls-dev-confirm-test-completion"
          }
        },
        "IamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      "simotec-sls",
                      "dev",
                      "lambda"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/simotec-sls-dev*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/simotec-sls-dev*:*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "rds:DescribeDBInstances",
                        "rds:Connect"
                      ],
                      "Resource": "*"
                    }
                  ]
                }
              }
            ],
            "Path": "/",
            "RoleName": {
              "Fn::Join": [
                "-",
                [
                  "simotec-sls",
                  "dev",
                  {
                    "Ref": "AWS::Region"
                  },
                  "lambdaRole"
                ]
              ]
            }
          }
        },
        "GetUsersLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/users/handler.listUsers",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-getUsers",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetUsersLogGroup"
          ]
        },
        "CreateUserLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/users/handler.createUser",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-createUser",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "CreateUserLogGroup"
          ]
        },
        "UpdateUserLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/users/handler.updateUser",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-updateUser",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "UpdateUserLogGroup"
          ]
        },
        "DeleteUserLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/users/handler.deleteUser",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-deleteUser",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "DeleteUserLogGroup"
          ]
        },
        "GetCompaniesLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/companies/handler.listCompanies",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-getCompanies",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetCompaniesLogGroup"
          ]
        },
        "CreateCompanyLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/companies/handler.createCompany",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-createCompany",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "CreateCompanyLogGroup"
          ]
        },
        "UpdateCompanyLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/companies/handler.editCompany",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-updateCompany",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "UpdateCompanyLogGroup"
          ]
        },
        "DeleteCompanyLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/companies/handler.deleteCompany",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-deleteCompany",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "DeleteCompanyLogGroup"
          ]
        },
        "LoginLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/auth/handler.login",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-login",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "LoginLogGroup"
          ]
        },
        "RefreshLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/auth/handler.refreshToken",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-refresh",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "RefreshLogGroup"
          ]
        },
        "LogoutLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/auth/handler.logout",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-logout",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "LogoutLogGroup"
          ]
        },
        "CreateDashcicleLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/cycles/handler.createEvaluationCycle",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-create-cicle",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "CreateDashcicleLogGroup"
          ]
        },
        "GetDashciclesLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/cycles/handler.listCycles",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-get-cicles",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetDashciclesLogGroup"
          ]
        },
        "GetDashcicleLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/cycles/handler.getCycle",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-get-cicle",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetDashcicleLogGroup"
          ]
        },
        "UpdateDashcicleLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/cycles/handler.updateCycle",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-update-cicle",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "UpdateDashcicleLogGroup"
          ]
        },
        "DeleteDashcicleLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/cycles/handler.deleteCycle",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-delete-cicle",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "DeleteDashcicleLogGroup"
          ]
        },
        "StartDashtestLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/users-tests/handler.startTest",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-start-test",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "StartDashtestLogGroup"
          ]
        },
        "SaveDashtestDashprogressLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/users-tests/handler.saveTestProgress",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-save-test-progress",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "SaveDashtestDashprogressLogGroup"
          ]
        },
        "GetDashtestDashprogressLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/users-tests/handler.getTestProgress",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-get-test-progress",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetDashtestDashprogressLogGroup"
          ]
        },
        "ConfirmDashtestDashcompletionLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
              "S3Key": "serverless/simotec-sls/dev/1741624899030-2025-03-10T16:41:39.030Z/simotec-sls.zip"
            },
            "Handler": "src/maintainers/users-tests/handler.confirmTestCompletion",
            "Runtime": "nodejs20.x",
            "FunctionName": "simotec-sls-dev-confirm-test-completion",
            "MemorySize": 3000,
            "Timeout": 20,
            "Tags": [
              {
                "Key": "CLIENT",
                "Value": "simotec"
              },
              {
                "Key": "STAGE",
                "Value": "dev"
              }
            ],
            "Environment": {
              "Variables": {
                "TZ": "America/Santiago",
                "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "simotec",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRES_IN": "1d",
                "CORS_ORIGIN": "http://localhost:5173"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ConfirmDashtestDashcompletionLogGroup"
          ]
        },
        "GetUsersLambdaVersionKtmaWXBZ95ireB8ZGMydPA8pSmKlYOrsu5gBNK8c": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetUsersLambdaFunction"
            },
            "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
          }
        },
        "CreateUserLambdaVersionqODyffTBIP8Vf5Q1GEZ5ZrFpVjMKojnu31tTzmuJSo": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "CreateUserLambdaFunction"
            },
            "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
          }
        },
        "UpdateUserLambdaVersionquaiqBCQNBDeCuInhB1jqogtWmjvh0AEX4rfYM8pPjM": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UpdateUserLambdaFunction"
            },
            "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
          }
        },
        "DeleteUserLambdaVersionKbubXwnWJ1I7nsBbNbKQYqkPjkSJUrtz0DTpzQjPk": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "DeleteUserLambdaFunction"
            },
            "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
          }
        },
        "GetCompaniesLambdaVersiongoCKnuHIHzvx1X58VzP4FdaR7lpdNKOk8T6ALCg88": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetCompaniesLambdaFunction"
            },
            "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
          }
        },
        "CreateCompanyLambdaVersionuaUeIiKSxnnTdfus2agR4dHLBeQijskaVUnacPU9g": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "CreateCompanyLambdaFunction"
            },
            "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
          }
        },
        "UpdateCompanyLambdaVersionOqOr6hBdXSP8PfzlhCmREcNsDOoYYWzEpHOY0W1zUoo": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UpdateCompanyLambdaFunction"
            },
            "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
          }
        },
        "DeleteCompanyLambdaVersioncKpHoMMh8ZELIekhrVH5MH0KSmYa196sywMEeg9Q9yU": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "DeleteCompanyLambdaFunction"
            },
            "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
          }
        },
        "LoginLambdaVersionDrQKAUL0G2UG9Mj8bvw5ZSGWzwTEg3TUlbWbmYrYQ": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "LoginLambdaFunction"
            },
            "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
          }
        },
        "RefreshLambdaVersionsvZOaflB5JVgPUzniD5TIjubDLXLUuVhXMrohME9eeY": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "RefreshLambdaFunction"
            },
            "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
          }
        },
        "LogoutLambdaVersiongyBcutwIoiAYSEdEPgoekHsdpB0Tqqnl5BQWqCXF1k": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "LogoutLambdaFunction"
            },
            "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
          }
        },
        "CreateDashcicleLambdaVersion23nHl16Dqn9UwZnVhjc1h4FD1HGO4ZaKi1li5Exf0g": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "CreateDashcicleLambdaFunction"
            },
            "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
          }
        },
        "GetDashciclesLambdaVersionj9nHLlIzpcFqHlh5MMth8srWyljtW4N4TDHJ5xWp0": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetDashciclesLambdaFunction"
            },
            "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
          }
        },
        "GetDashcicleLambdaVersionW7sJfDgpmD2HCOUeCtiQi1G8eEsGIzMGiTDndyXuFZw": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetDashcicleLambdaFunction"
            },
            "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
          }
        },
        "UpdateDashcicleLambdaVersionPBiibfN7ZPecDRUdnTJeyDhqmXjYjIEPWQcMTFc27Q": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UpdateDashcicleLambdaFunction"
            },
            "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
          }
        },
        "DeleteDashcicleLambdaVersionx1NA0SxGpPzyrT7Mc6hlW2C98OHdsE9CickhTwSw": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "DeleteDashcicleLambdaFunction"
            },
            "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
          }
        },
        "StartDashtestLambdaVersionA7E6ZC48h9lNeKV9f0Dm7fnYL3DGurqgFblX5q600dU": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "StartDashtestLambdaFunction"
            },
            "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
          }
        },
        "SaveDashtestDashprogressLambdaVersionwCgCXuaFPjjVLVqhwd67UF7lv4vZrnKRN40eo5cw90": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "SaveDashtestDashprogressLambdaFunction"
            },
            "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
          }
        },
        "GetDashtestDashprogressLambdaVersionjJVEGDFVgby1qymhC6gSEQcwbSl3Oqv8Mya69xQ2c": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetDashtestDashprogressLambdaFunction"
            },
            "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
          }
        },
        "ConfirmDashtestDashcompletionLambdaVersionqPoDdrQnTHslfcZCvfQApCPMEvAa6dI0XVD0VoCmU": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ConfirmDashtestDashcompletionLambdaFunction"
            },
            "CodeSha256": "SRoJjZlkf5zJetffiR8WSMSZs5PYW0rh5emNysy+6MY="
          }
        },
        "HttpApi": {
          "Type": "AWS::ApiGatewayV2::Api",
          "Properties": {
            "Name": "dev-simotec-sls",
            "ProtocolType": "HTTP",
            "Tags": {
              "CLIENT": "simotec",
              "STAGE": "dev"
            },
            "CorsConfiguration": {
              "AllowHeaders": [
                "*"
              ],
              "AllowMethods": [
                "GET",
                "POST",
                "PUT",
                "DELETE",
                "PATCH",
                "OPTIONS"
              ],
              "AllowOrigins": [
                "*"
              ]
            }
          }
        },
        "HttpApiStage": {
          "Type": "AWS::ApiGatewayV2::Stage",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "StageName": "$default",
            "AutoDeploy": true,
            "DefaultRouteSettings": {
              "DetailedMetricsEnabled": false
            },
            "Tags": {
              "CLIENT": "simotec",
              "STAGE": "dev"
            }
          }
        },
        "GetUsersLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetUsersLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetUsers": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetUsersLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetUsers": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /users",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetUsers"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetUsers"
        },
        "CreateUserLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "CreateUserLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationCreateUser": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "CreateUserLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostUsers": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /users",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationCreateUser"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationCreateUser"
        },
        "UpdateUserLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UpdateUserLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationUpdateUser": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "UpdateUserLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePutUsersIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PUT /users/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationUpdateUser"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationUpdateUser"
        },
        "DeleteUserLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "DeleteUserLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationDeleteUser": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "DeleteUserLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteDeleteUsersIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "DELETE /users/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationDeleteUser"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationDeleteUser"
        },
        "GetCompaniesLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetCompaniesLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetCompanies": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetCompaniesLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetCompanies": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /companies",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetCompanies"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetCompanies"
        },
        "CreateCompanyLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "CreateCompanyLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationCreateCompany": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "CreateCompanyLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostCompanies": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /companies",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationCreateCompany"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationCreateCompany"
        },
        "UpdateCompanyLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UpdateCompanyLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationUpdateCompany": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "UpdateCompanyLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePutCompaniesIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PUT /companies/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationUpdateCompany"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationUpdateCompany"
        },
        "DeleteCompanyLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "DeleteCompanyLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationDeleteCompany": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "DeleteCompanyLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteDeleteCompaniesIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "DELETE /companies/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationDeleteCompany"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationDeleteCompany"
        },
        "LoginLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "LoginLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationLogin": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "LoginLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostAuthLogin": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /auth/login",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationLogin"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationLogin"
        },
        "RefreshLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "RefreshLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationRefresh": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "RefreshLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostAuthRefresh": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /auth/refresh",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationRefresh"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationRefresh"
        },
        "LogoutLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "LogoutLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationLogout": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "LogoutLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostAuthLogout": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /auth/logout",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationLogout"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationLogout"
        },
        "CreateDashcicleLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "CreateDashcicleLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationCreateDashcicle": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "CreateDashcicleLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostCycles": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /cycles",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationCreateDashcicle"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationCreateDashcicle"
        },
        "GetDashciclesLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetDashciclesLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetDashcicles": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetDashciclesLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetCycles": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /cycles",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetDashcicles"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetDashcicles"
        },
        "GetDashcicleLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetDashcicleLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetDashcicle": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetDashcicleLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetCyclesIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /cycles/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetDashcicle"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetDashcicle"
        },
        "UpdateDashcicleLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UpdateDashcicleLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationUpdateDashcicle": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "UpdateDashcicleLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePutCyclesIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PUT /cycles/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationUpdateDashcicle"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationUpdateDashcicle"
        },
        "DeleteDashcicleLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "DeleteDashcicleLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationDeleteDashcicle": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "DeleteDashcicleLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteDeleteCyclesIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "DELETE /cycles/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationDeleteDashcicle"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationDeleteDashcicle"
        },
        "StartDashtestLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "StartDashtestLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationStartDashtest": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "StartDashtestLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostUsersDashtests": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /users-tests",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationStartDashtest"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationStartDashtest"
        },
        "SaveDashtestDashprogressLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "SaveDashtestDashprogressLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationSaveDashtestDashprogress": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "SaveDashtestDashprogressLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePutUsersDashtestsIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PUT /users-tests/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationSaveDashtestDashprogress"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationSaveDashtestDashprogress"
        },
        "GetDashtestDashprogressLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetDashtestDashprogressLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetDashtestDashprogress": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetDashtestDashprogressLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostUsersDashtestsTestDashprogress": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /users-tests/test-progress",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetDashtestDashprogress"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetDashtestDashprogress"
        },
        "ConfirmDashtestDashcompletionLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ConfirmDashtestDashcompletionLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationConfirmDashtestDashcompletion": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "ConfirmDashtestDashcompletionLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostComfirmDashtestDashcompleted": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /comfirm-test-completed",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationConfirmDashtestDashcompletion"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationConfirmDashtestDashcompletion"
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "serverless-framework-deployments-us-east-2-31c921f8-650a",
          "Export": {
            "Name": "sls-simotec-sls-dev-ServerlessDeploymentBucketName"
          }
        },
        "GetUsersLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetUsersLambdaVersionKtmaWXBZ95ireB8ZGMydPA8pSmKlYOrsu5gBNK8c"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-GetUsersLambdaFunctionQualifiedArn"
          }
        },
        "CreateUserLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "CreateUserLambdaVersionqODyffTBIP8Vf5Q1GEZ5ZrFpVjMKojnu31tTzmuJSo"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-CreateUserLambdaFunctionQualifiedArn"
          }
        },
        "UpdateUserLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UpdateUserLambdaVersionquaiqBCQNBDeCuInhB1jqogtWmjvh0AEX4rfYM8pPjM"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-UpdateUserLambdaFunctionQualifiedArn"
          }
        },
        "DeleteUserLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "DeleteUserLambdaVersionKbubXwnWJ1I7nsBbNbKQYqkPjkSJUrtz0DTpzQjPk"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-DeleteUserLambdaFunctionQualifiedArn"
          }
        },
        "GetCompaniesLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetCompaniesLambdaVersiongoCKnuHIHzvx1X58VzP4FdaR7lpdNKOk8T6ALCg88"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-GetCompaniesLambdaFunctionQualifiedArn"
          }
        },
        "CreateCompanyLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "CreateCompanyLambdaVersionuaUeIiKSxnnTdfus2agR4dHLBeQijskaVUnacPU9g"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-CreateCompanyLambdaFunctionQualifiedArn"
          }
        },
        "UpdateCompanyLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UpdateCompanyLambdaVersionOqOr6hBdXSP8PfzlhCmREcNsDOoYYWzEpHOY0W1zUoo"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-UpdateCompanyLambdaFunctionQualifiedArn"
          }
        },
        "DeleteCompanyLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "DeleteCompanyLambdaVersioncKpHoMMh8ZELIekhrVH5MH0KSmYa196sywMEeg9Q9yU"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-DeleteCompanyLambdaFunctionQualifiedArn"
          }
        },
        "LoginLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "LoginLambdaVersionDrQKAUL0G2UG9Mj8bvw5ZSGWzwTEg3TUlbWbmYrYQ"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-LoginLambdaFunctionQualifiedArn"
          }
        },
        "RefreshLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "RefreshLambdaVersionsvZOaflB5JVgPUzniD5TIjubDLXLUuVhXMrohME9eeY"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-RefreshLambdaFunctionQualifiedArn"
          }
        },
        "LogoutLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "LogoutLambdaVersiongyBcutwIoiAYSEdEPgoekHsdpB0Tqqnl5BQWqCXF1k"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-LogoutLambdaFunctionQualifiedArn"
          }
        },
        "CreateDashcicleLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "CreateDashcicleLambdaVersion23nHl16Dqn9UwZnVhjc1h4FD1HGO4ZaKi1li5Exf0g"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-CreateDashcicleLambdaFunctionQualifiedArn"
          }
        },
        "GetDashciclesLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetDashciclesLambdaVersionj9nHLlIzpcFqHlh5MMth8srWyljtW4N4TDHJ5xWp0"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-GetDashciclesLambdaFunctionQualifiedArn"
          }
        },
        "GetDashcicleLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetDashcicleLambdaVersionW7sJfDgpmD2HCOUeCtiQi1G8eEsGIzMGiTDndyXuFZw"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-GetDashcicleLambdaFunctionQualifiedArn"
          }
        },
        "UpdateDashcicleLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UpdateDashcicleLambdaVersionPBiibfN7ZPecDRUdnTJeyDhqmXjYjIEPWQcMTFc27Q"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-UpdateDashcicleLambdaFunctionQualifiedArn"
          }
        },
        "DeleteDashcicleLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "DeleteDashcicleLambdaVersionx1NA0SxGpPzyrT7Mc6hlW2C98OHdsE9CickhTwSw"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-DeleteDashcicleLambdaFunctionQualifiedArn"
          }
        },
        "StartDashtestLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "StartDashtestLambdaVersionA7E6ZC48h9lNeKV9f0Dm7fnYL3DGurqgFblX5q600dU"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-StartDashtestLambdaFunctionQualifiedArn"
          }
        },
        "SaveDashtestDashprogressLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "SaveDashtestDashprogressLambdaVersionwCgCXuaFPjjVLVqhwd67UF7lv4vZrnKRN40eo5cw90"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-SaveDashtestDashprogressLambdaFunctionQualifiedArn"
          }
        },
        "GetDashtestDashprogressLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetDashtestDashprogressLambdaVersionjJVEGDFVgby1qymhC6gSEQcwbSl3Oqv8Mya69xQ2c"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-GetDashtestDashprogressLambdaFunctionQualifiedArn"
          }
        },
        "ConfirmDashtestDashcompletionLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ConfirmDashtestDashcompletionLambdaVersionqPoDdrQnTHslfcZCvfQApCPMEvAa6dI0XVD0VoCmU"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-ConfirmDashtestDashcompletionLambdaFunctionQualifiedArn"
          }
        },
        "HttpApiId": {
          "Description": "Id of the HTTP API",
          "Value": {
            "Ref": "HttpApi"
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-HttpApiId"
          }
        },
        "HttpApiUrl": {
          "Description": "URL of the HTTP API",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "HttpApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                }
              ]
            ]
          },
          "Export": {
            "Name": "sls-simotec-sls-dev-HttpApiUrl"
          }
        }
      }
    }
  }
}