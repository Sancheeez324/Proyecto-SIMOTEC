{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ListUsersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/simotec-sls-dev-listUsers"
      }
    },
    "CreateUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/simotec-sls-dev-createUser"
      }
    },
    "EditUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/simotec-sls-dev-editUser"
      }
    },
    "DeleteUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/simotec-sls-dev-deleteUser"
      }
    },
    "GetDashboardStatsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/simotec-sls-dev-getDashboardStats"
      }
    },
    "GetCadminsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/simotec-sls-dev-getCadmins"
      }
    },
    "CreateCadminLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/simotec-sls-dev-createCadmin"
      }
    },
    "UpdateCadminLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/simotec-sls-dev-updateCadmin"
      }
    },
    "DeleteCadminLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/simotec-sls-dev-deleteCadmin"
      }
    },
    "GetCompaniesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/simotec-sls-dev-getCompanies"
      }
    },
    "CreateCompanyLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/simotec-sls-dev-createCompany"
      }
    },
    "UpdateCompanyLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/simotec-sls-dev-updateCompany"
      }
    },
    "DeleteCompanyLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/simotec-sls-dev-deleteCompany"
      }
    },
    "LoginLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/simotec-sls-dev-login"
      }
    },
    "CreateDashcicleLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/simotec-sls-dev-create-cicle"
      }
    },
    "GetDashciclesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/simotec-sls-dev-get-cicles"
      }
    },
    "GetDashcicleLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/simotec-sls-dev-get-cicle"
      }
    },
    "UpdateDashcicleLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/simotec-sls-dev-update-cicle"
      }
    },
    "DeleteDashcicleLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/simotec-sls-dev-delete-cicle"
      }
    },
    "StartDashtestLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/simotec-sls-dev-start-test"
      }
    },
    "SaveDashtestDashprogressLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/simotec-sls-dev-save-test-progress"
      }
    },
    "GetDashtestDashprogressLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/simotec-sls-dev-get-test-progress"
      }
    },
    "ConfirmDashtestDashcompletionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/simotec-sls-dev-confirm-test-completion"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "simotec-sls",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/simotec-sls-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/simotec-sls-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "rds:DescribeDBInstances",
                    "rds:Connect"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "simotec-sls",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "ListUsersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
          "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
        },
        "Handler": "src/maintainers/users/handler.listUsers",
        "Runtime": "nodejs20.x",
        "FunctionName": "simotec-sls-dev-listUsers",
        "MemorySize": 3000,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "CLIENT",
            "Value": "simotec"
          },
          {
            "Key": "STAGE",
            "Value": "dev"
          }
        ],
        "Environment": {
          "Variables": {
            "TZ": "America/Santiago",
            "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "Hhfc2102#",
            "DB_NAME": "simotec",
            "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
            "JWT_EXPIRES_IN": "1d",
            "CORS_ORIGIN": "http://localhost:5173"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ListUsersLogGroup"
      ]
    },
    "CreateUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
          "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
        },
        "Handler": "src/maintainers/users/handler.createUser",
        "Runtime": "nodejs20.x",
        "FunctionName": "simotec-sls-dev-createUser",
        "MemorySize": 3000,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "CLIENT",
            "Value": "simotec"
          },
          {
            "Key": "STAGE",
            "Value": "dev"
          }
        ],
        "Environment": {
          "Variables": {
            "TZ": "America/Santiago",
            "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "Hhfc2102#",
            "DB_NAME": "simotec",
            "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
            "JWT_EXPIRES_IN": "1d",
            "CORS_ORIGIN": "http://localhost:5173"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateUserLogGroup"
      ]
    },
    "EditUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
          "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
        },
        "Handler": "src/maintainers/users/handler.editUser",
        "Runtime": "nodejs20.x",
        "FunctionName": "simotec-sls-dev-editUser",
        "MemorySize": 3000,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "CLIENT",
            "Value": "simotec"
          },
          {
            "Key": "STAGE",
            "Value": "dev"
          }
        ],
        "Environment": {
          "Variables": {
            "TZ": "America/Santiago",
            "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "Hhfc2102#",
            "DB_NAME": "simotec",
            "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
            "JWT_EXPIRES_IN": "1d",
            "CORS_ORIGIN": "http://localhost:5173"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "EditUserLogGroup"
      ]
    },
    "DeleteUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
          "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
        },
        "Handler": "src/maintainers/users/handler.deleteUser",
        "Runtime": "nodejs20.x",
        "FunctionName": "simotec-sls-dev-deleteUser",
        "MemorySize": 3000,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "CLIENT",
            "Value": "simotec"
          },
          {
            "Key": "STAGE",
            "Value": "dev"
          }
        ],
        "Environment": {
          "Variables": {
            "TZ": "America/Santiago",
            "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "Hhfc2102#",
            "DB_NAME": "simotec",
            "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
            "JWT_EXPIRES_IN": "1d",
            "CORS_ORIGIN": "http://localhost:5173"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteUserLogGroup"
      ]
    },
    "GetDashboardStatsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
          "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
        },
        "Handler": "src/maintainers/users/handler.getDashboardStats",
        "Runtime": "nodejs20.x",
        "FunctionName": "simotec-sls-dev-getDashboardStats",
        "MemorySize": 3000,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "CLIENT",
            "Value": "simotec"
          },
          {
            "Key": "STAGE",
            "Value": "dev"
          }
        ],
        "Environment": {
          "Variables": {
            "TZ": "America/Santiago",
            "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "Hhfc2102#",
            "DB_NAME": "simotec",
            "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
            "JWT_EXPIRES_IN": "1d",
            "CORS_ORIGIN": "http://localhost:5173"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetDashboardStatsLogGroup"
      ]
    },
    "GetCadminsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
          "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
        },
        "Handler": "src/maintainers/cadmins/handler.listCadmins",
        "Runtime": "nodejs20.x",
        "FunctionName": "simotec-sls-dev-getCadmins",
        "MemorySize": 3000,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "CLIENT",
            "Value": "simotec"
          },
          {
            "Key": "STAGE",
            "Value": "dev"
          }
        ],
        "Environment": {
          "Variables": {
            "TZ": "America/Santiago",
            "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "Hhfc2102#",
            "DB_NAME": "simotec",
            "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
            "JWT_EXPIRES_IN": "1d",
            "CORS_ORIGIN": "http://localhost:5173"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetCadminsLogGroup"
      ]
    },
    "CreateCadminLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
          "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
        },
        "Handler": "src/maintainers/cadmins/handler.createCadmin",
        "Runtime": "nodejs20.x",
        "FunctionName": "simotec-sls-dev-createCadmin",
        "MemorySize": 3000,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "CLIENT",
            "Value": "simotec"
          },
          {
            "Key": "STAGE",
            "Value": "dev"
          }
        ],
        "Environment": {
          "Variables": {
            "TZ": "America/Santiago",
            "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "Hhfc2102#",
            "DB_NAME": "simotec",
            "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
            "JWT_EXPIRES_IN": "1d",
            "CORS_ORIGIN": "http://localhost:5173"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateCadminLogGroup"
      ]
    },
    "UpdateCadminLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
          "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
        },
        "Handler": "src/maintainers/cadmins/handler.updateCadmin",
        "Runtime": "nodejs20.x",
        "FunctionName": "simotec-sls-dev-updateCadmin",
        "MemorySize": 3000,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "CLIENT",
            "Value": "simotec"
          },
          {
            "Key": "STAGE",
            "Value": "dev"
          }
        ],
        "Environment": {
          "Variables": {
            "TZ": "America/Santiago",
            "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "Hhfc2102#",
            "DB_NAME": "simotec",
            "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
            "JWT_EXPIRES_IN": "1d",
            "CORS_ORIGIN": "http://localhost:5173"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateCadminLogGroup"
      ]
    },
    "DeleteCadminLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
          "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
        },
        "Handler": "src/maintainers/cadmins/handler.deleteCadmin",
        "Runtime": "nodejs20.x",
        "FunctionName": "simotec-sls-dev-deleteCadmin",
        "MemorySize": 3000,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "CLIENT",
            "Value": "simotec"
          },
          {
            "Key": "STAGE",
            "Value": "dev"
          }
        ],
        "Environment": {
          "Variables": {
            "TZ": "America/Santiago",
            "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "Hhfc2102#",
            "DB_NAME": "simotec",
            "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
            "JWT_EXPIRES_IN": "1d",
            "CORS_ORIGIN": "http://localhost:5173"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteCadminLogGroup"
      ]
    },
    "GetCompaniesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
          "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
        },
        "Handler": "src/maintainers/companies/handler.listCompanies",
        "Runtime": "nodejs20.x",
        "FunctionName": "simotec-sls-dev-getCompanies",
        "MemorySize": 3000,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "CLIENT",
            "Value": "simotec"
          },
          {
            "Key": "STAGE",
            "Value": "dev"
          }
        ],
        "Environment": {
          "Variables": {
            "TZ": "America/Santiago",
            "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "Hhfc2102#",
            "DB_NAME": "simotec",
            "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
            "JWT_EXPIRES_IN": "1d",
            "CORS_ORIGIN": "http://localhost:5173"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetCompaniesLogGroup"
      ]
    },
    "CreateCompanyLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
          "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
        },
        "Handler": "src/maintainers/companies/handler.createCompany",
        "Runtime": "nodejs20.x",
        "FunctionName": "simotec-sls-dev-createCompany",
        "MemorySize": 3000,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "CLIENT",
            "Value": "simotec"
          },
          {
            "Key": "STAGE",
            "Value": "dev"
          }
        ],
        "Environment": {
          "Variables": {
            "TZ": "America/Santiago",
            "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "Hhfc2102#",
            "DB_NAME": "simotec",
            "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
            "JWT_EXPIRES_IN": "1d",
            "CORS_ORIGIN": "http://localhost:5173"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateCompanyLogGroup"
      ]
    },
    "UpdateCompanyLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
          "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
        },
        "Handler": "src/maintainers/companies/handler.editCompany",
        "Runtime": "nodejs20.x",
        "FunctionName": "simotec-sls-dev-updateCompany",
        "MemorySize": 3000,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "CLIENT",
            "Value": "simotec"
          },
          {
            "Key": "STAGE",
            "Value": "dev"
          }
        ],
        "Environment": {
          "Variables": {
            "TZ": "America/Santiago",
            "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "Hhfc2102#",
            "DB_NAME": "simotec",
            "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
            "JWT_EXPIRES_IN": "1d",
            "CORS_ORIGIN": "http://localhost:5173"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateCompanyLogGroup"
      ]
    },
    "DeleteCompanyLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
          "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
        },
        "Handler": "src/maintainers/companies/handler.deleteCompany",
        "Runtime": "nodejs20.x",
        "FunctionName": "simotec-sls-dev-deleteCompany",
        "MemorySize": 3000,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "CLIENT",
            "Value": "simotec"
          },
          {
            "Key": "STAGE",
            "Value": "dev"
          }
        ],
        "Environment": {
          "Variables": {
            "TZ": "America/Santiago",
            "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "Hhfc2102#",
            "DB_NAME": "simotec",
            "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
            "JWT_EXPIRES_IN": "1d",
            "CORS_ORIGIN": "http://localhost:5173"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteCompanyLogGroup"
      ]
    },
    "LoginLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
          "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
        },
        "Handler": "src/maintainers/auth/handler.loginHandler",
        "Runtime": "nodejs20.x",
        "FunctionName": "simotec-sls-dev-login",
        "MemorySize": 3000,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "CLIENT",
            "Value": "simotec"
          },
          {
            "Key": "STAGE",
            "Value": "dev"
          }
        ],
        "Environment": {
          "Variables": {
            "TZ": "America/Santiago",
            "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "Hhfc2102#",
            "DB_NAME": "simotec",
            "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
            "JWT_EXPIRES_IN": "1d",
            "CORS_ORIGIN": "http://localhost:5173"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LoginLogGroup"
      ]
    },
    "CreateDashcicleLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
          "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
        },
        "Handler": "src/maintainers/cycles/handler.createEvaluationCycle",
        "Runtime": "nodejs20.x",
        "FunctionName": "simotec-sls-dev-create-cicle",
        "MemorySize": 3000,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "CLIENT",
            "Value": "simotec"
          },
          {
            "Key": "STAGE",
            "Value": "dev"
          }
        ],
        "Environment": {
          "Variables": {
            "TZ": "America/Santiago",
            "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "Hhfc2102#",
            "DB_NAME": "simotec",
            "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
            "JWT_EXPIRES_IN": "1d",
            "CORS_ORIGIN": "http://localhost:5173"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateDashcicleLogGroup"
      ]
    },
    "GetDashciclesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
          "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
        },
        "Handler": "src/maintainers/cycles/handler.listCycles",
        "Runtime": "nodejs20.x",
        "FunctionName": "simotec-sls-dev-get-cicles",
        "MemorySize": 3000,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "CLIENT",
            "Value": "simotec"
          },
          {
            "Key": "STAGE",
            "Value": "dev"
          }
        ],
        "Environment": {
          "Variables": {
            "TZ": "America/Santiago",
            "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "Hhfc2102#",
            "DB_NAME": "simotec",
            "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
            "JWT_EXPIRES_IN": "1d",
            "CORS_ORIGIN": "http://localhost:5173"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetDashciclesLogGroup"
      ]
    },
    "GetDashcicleLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
          "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
        },
        "Handler": "src/maintainers/cycles/handler.getCycle",
        "Runtime": "nodejs20.x",
        "FunctionName": "simotec-sls-dev-get-cicle",
        "MemorySize": 3000,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "CLIENT",
            "Value": "simotec"
          },
          {
            "Key": "STAGE",
            "Value": "dev"
          }
        ],
        "Environment": {
          "Variables": {
            "TZ": "America/Santiago",
            "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "Hhfc2102#",
            "DB_NAME": "simotec",
            "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
            "JWT_EXPIRES_IN": "1d",
            "CORS_ORIGIN": "http://localhost:5173"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetDashcicleLogGroup"
      ]
    },
    "UpdateDashcicleLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
          "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
        },
        "Handler": "src/maintainers/cycles/handler.updateCycle",
        "Runtime": "nodejs20.x",
        "FunctionName": "simotec-sls-dev-update-cicle",
        "MemorySize": 3000,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "CLIENT",
            "Value": "simotec"
          },
          {
            "Key": "STAGE",
            "Value": "dev"
          }
        ],
        "Environment": {
          "Variables": {
            "TZ": "America/Santiago",
            "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "Hhfc2102#",
            "DB_NAME": "simotec",
            "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
            "JWT_EXPIRES_IN": "1d",
            "CORS_ORIGIN": "http://localhost:5173"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateDashcicleLogGroup"
      ]
    },
    "DeleteDashcicleLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
          "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
        },
        "Handler": "src/maintainers/cycles/handler.deleteCycle",
        "Runtime": "nodejs20.x",
        "FunctionName": "simotec-sls-dev-delete-cicle",
        "MemorySize": 3000,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "CLIENT",
            "Value": "simotec"
          },
          {
            "Key": "STAGE",
            "Value": "dev"
          }
        ],
        "Environment": {
          "Variables": {
            "TZ": "America/Santiago",
            "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "Hhfc2102#",
            "DB_NAME": "simotec",
            "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
            "JWT_EXPIRES_IN": "1d",
            "CORS_ORIGIN": "http://localhost:5173"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteDashcicleLogGroup"
      ]
    },
    "StartDashtestLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
          "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
        },
        "Handler": "src/maintainers/users-tests/handler.startTest",
        "Runtime": "nodejs20.x",
        "FunctionName": "simotec-sls-dev-start-test",
        "MemorySize": 3000,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "CLIENT",
            "Value": "simotec"
          },
          {
            "Key": "STAGE",
            "Value": "dev"
          }
        ],
        "Environment": {
          "Variables": {
            "TZ": "America/Santiago",
            "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "Hhfc2102#",
            "DB_NAME": "simotec",
            "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
            "JWT_EXPIRES_IN": "1d",
            "CORS_ORIGIN": "http://localhost:5173"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "StartDashtestLogGroup"
      ]
    },
    "SaveDashtestDashprogressLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
          "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
        },
        "Handler": "src/maintainers/users-tests/handler.saveTestProgress",
        "Runtime": "nodejs20.x",
        "FunctionName": "simotec-sls-dev-save-test-progress",
        "MemorySize": 3000,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "CLIENT",
            "Value": "simotec"
          },
          {
            "Key": "STAGE",
            "Value": "dev"
          }
        ],
        "Environment": {
          "Variables": {
            "TZ": "America/Santiago",
            "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "Hhfc2102#",
            "DB_NAME": "simotec",
            "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
            "JWT_EXPIRES_IN": "1d",
            "CORS_ORIGIN": "http://localhost:5173"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SaveDashtestDashprogressLogGroup"
      ]
    },
    "GetDashtestDashprogressLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
          "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
        },
        "Handler": "src/maintainers/users-tests/handler.getTestProgress",
        "Runtime": "nodejs20.x",
        "FunctionName": "simotec-sls-dev-get-test-progress",
        "MemorySize": 3000,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "CLIENT",
            "Value": "simotec"
          },
          {
            "Key": "STAGE",
            "Value": "dev"
          }
        ],
        "Environment": {
          "Variables": {
            "TZ": "America/Santiago",
            "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "Hhfc2102#",
            "DB_NAME": "simotec",
            "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
            "JWT_EXPIRES_IN": "1d",
            "CORS_ORIGIN": "http://localhost:5173"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetDashtestDashprogressLogGroup"
      ]
    },
    "ConfirmDashtestDashcompletionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
          "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
        },
        "Handler": "src/maintainers/users-tests/handler.confirmTestCompletion",
        "Runtime": "nodejs20.x",
        "FunctionName": "simotec-sls-dev-confirm-test-completion",
        "MemorySize": 3000,
        "Timeout": 20,
        "Tags": [
          {
            "Key": "CLIENT",
            "Value": "simotec"
          },
          {
            "Key": "STAGE",
            "Value": "dev"
          }
        ],
        "Environment": {
          "Variables": {
            "TZ": "America/Santiago",
            "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "Hhfc2102#",
            "DB_NAME": "simotec",
            "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
            "JWT_EXPIRES_IN": "1d",
            "CORS_ORIGIN": "http://localhost:5173"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ConfirmDashtestDashcompletionLogGroup"
      ]
    },
    "ListUsersLambdaVersionYifuTAK2DQCayRAiSN4tMA9HY6Du9xsAMs0aRIhz0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ListUsersLambdaFunction"
        },
        "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
      }
    },
    "CreateUserLambdaVersionMgpHQ6qyX7hvZZggBd9TsP8kBsU5A9qJGiUpka8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateUserLambdaFunction"
        },
        "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
      }
    },
    "EditUserLambdaVersion3nYpBgp3JZLTzmNkqvyRj1e3vl5eMlV7dwRcNoQ6yk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "EditUserLambdaFunction"
        },
        "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
      }
    },
    "DeleteUserLambdaVersion6KrSKWH8248jD8jHnAnYAICH0WBLbugriH1XC2qynY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteUserLambdaFunction"
        },
        "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
      }
    },
    "GetDashboardStatsLambdaVersionhbFYz1e3g9ddnz9yEv0smrwTyBIrpBZ4hnKLEWjTRY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashboardStatsLambdaFunction"
        },
        "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
      }
    },
    "GetCadminsLambdaVersionYevjSIzxlumiHlOJ75jioPAuI8yMFLSp6Jn2vopbeXE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetCadminsLambdaFunction"
        },
        "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
      }
    },
    "CreateCadminLambdaVersionf4nssFwdFdgMchqYRCpZkxaEtJFq5EanildPvDopw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateCadminLambdaFunction"
        },
        "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
      }
    },
    "UpdateCadminLambdaVersionodCBCEqKi1KxEhSsJOpNE4CzQoyG3whWSxuxvYAfk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateCadminLambdaFunction"
        },
        "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
      }
    },
    "DeleteCadminLambdaVersionBg7yt9AdqQA18cpA0CQcF43mISsTsNO4ZBlw2escFc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteCadminLambdaFunction"
        },
        "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
      }
    },
    "GetCompaniesLambdaVersionRzcidZf13nhsGTq0njKC3CHfaNIyOOqvNUiwc2Mvg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetCompaniesLambdaFunction"
        },
        "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
      }
    },
    "CreateCompanyLambdaVersionLkoiNv7mq2YpKxGPbcs0RXU3ne0G02hHjTPtaWYxVQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateCompanyLambdaFunction"
        },
        "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
      }
    },
    "UpdateCompanyLambdaVersionOnwLmtZM2HslUZnHISsX6tNZ9vYyQcPUhJDVemoynw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateCompanyLambdaFunction"
        },
        "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
      }
    },
    "DeleteCompanyLambdaVersionjOgs4lKtQUEQHpdD44HjpcsiR01foV4QATrLP26p5A": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteCompanyLambdaFunction"
        },
        "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
      }
    },
    "LoginLambdaVersionYYzAEr5GPJu2TR40SAY8P2kLVgCr6anKruNvNNIyM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "LoginLambdaFunction"
        },
        "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
      }
    },
    "CreateDashcicleLambdaVersionhhJzPJ9IfUwB5rCC8FOCYT6633dpHgVlDRAoT4ps": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateDashcicleLambdaFunction"
        },
        "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
      }
    },
    "GetDashciclesLambdaVersionld48J87tyhOZ8OOubHBSIyTTEl6m4cMShzvv0NBdEV8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashciclesLambdaFunction"
        },
        "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
      }
    },
    "GetDashcicleLambdaVersionNv5lT1T02y3NtMkByrbzN3aJ9wOca5ZrGbKxqFevSE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashcicleLambdaFunction"
        },
        "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
      }
    },
    "UpdateDashcicleLambdaVersionxiahHFY8QwxEMy60i2foL3m0twym0GqAGixfnxfxU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateDashcicleLambdaFunction"
        },
        "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
      }
    },
    "DeleteDashcicleLambdaVersionwbn4T5SLb1HJsgUMxWg1Eptjq2pSRllDRCTTWsuGo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteDashcicleLambdaFunction"
        },
        "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
      }
    },
    "StartDashtestLambdaVersionWpuGFTqSGX6eETFjlfHVq1n7ixFbxCTbvTJztteVpN8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "StartDashtestLambdaFunction"
        },
        "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
      }
    },
    "SaveDashtestDashprogressLambdaVersionx1LJwAtZBDeKBwVr6qTkf10zis52OLhsAYnMtBAz5U": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SaveDashtestDashprogressLambdaFunction"
        },
        "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
      }
    },
    "GetDashtestDashprogressLambdaVersionqBPQD4RZX8TyoxW7aORmdqQ0rC3uiCceZb2Bbv6ris": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashtestDashprogressLambdaFunction"
        },
        "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
      }
    },
    "ConfirmDashtestDashcompletionLambdaVersionacoq0alvEtin5dr1mA6848xiC3zolD8XheENpQe26sM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ConfirmDashtestDashcompletionLambdaFunction"
        },
        "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-simotec-sls",
        "ProtocolType": "HTTP",
        "Tags": {
          "CLIENT": "simotec",
          "STAGE": "dev"
        },
        "CorsConfiguration": {
          "AllowHeaders": [
            "*"
          ],
          "AllowMethods": [
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "PATCH",
            "OPTIONS"
          ],
          "AllowOrigins": [
            "*"
          ]
        }
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        },
        "Tags": {
          "CLIENT": "simotec",
          "STAGE": "dev"
        }
      }
    },
    "ListUsersLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ListUsersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationListUsers": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ListUsersLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetUsers": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /users",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationListUsers"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationListUsers"
    },
    "CreateUserLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreateUser": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateUserLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostUsers": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /users",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreateUser"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCreateUser"
    },
    "EditUserLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EditUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationEditUser": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "EditUserLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutUsersIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /users/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationEditUser"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationEditUser"
    },
    "DeleteUserLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDeleteUser": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DeleteUserLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteUsersIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /users/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDeleteUser"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationDeleteUser"
    },
    "GetDashboardStatsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashboardStatsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetDashboardStats": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetDashboardStatsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetDashboardRegularDashusersCount": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /dashboard/regular-users/count",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetDashboardStats"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetDashboardStats"
    },
    "HttpApiRouteGetDashboardAssignedDashtestsCount": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /dashboard/assigned-tests/count",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetDashboardStats"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetDashboardStats"
    },
    "GetCadminsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetCadminsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetCadmins": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetCadminsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetCadmins": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /cadmins",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetCadmins"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetCadmins"
    },
    "CreateCadminLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateCadminLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreateCadmin": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateCadminLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostCadmins": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /cadmins",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreateCadmin"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCreateCadmin"
    },
    "UpdateCadminLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateCadminLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateCadmin": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateCadminLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutCadminsIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /cadmins/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateCadmin"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateCadmin"
    },
    "DeleteCadminLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteCadminLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDeleteCadmin": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DeleteCadminLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteCadminsIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /cadmins/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDeleteCadmin"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationDeleteCadmin"
    },
    "GetCompaniesLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetCompaniesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetCompanies": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetCompaniesLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetCompanies": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /companies",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetCompanies"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetCompanies"
    },
    "CreateCompanyLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateCompanyLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreateCompany": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateCompanyLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostCompanies": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /companies",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreateCompany"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCreateCompany"
    },
    "UpdateCompanyLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateCompanyLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateCompany": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateCompanyLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutCompaniesIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /companies/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateCompany"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateCompany"
    },
    "DeleteCompanyLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteCompanyLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDeleteCompany": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DeleteCompanyLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteCompaniesIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /companies/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDeleteCompany"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationDeleteCompany"
    },
    "LoginLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "LoginLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationLogin": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "LoginLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostAuthLogin": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /auth/login",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationLogin"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationLogin"
    },
    "CreateDashcicleLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateDashcicleLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreateDashcicle": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateDashcicleLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostCycles": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /cycles",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreateDashcicle"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCreateDashcicle"
    },
    "GetDashciclesLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashciclesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetDashcicles": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetDashciclesLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetCycles": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /cycles",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetDashcicles"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetDashcicles"
    },
    "GetDashcicleLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashcicleLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetDashcicle": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetDashcicleLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetCyclesIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /cycles/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetDashcicle"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetDashcicle"
    },
    "UpdateDashcicleLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateDashcicleLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateDashcicle": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateDashcicleLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutCyclesIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /cycles/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateDashcicle"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateDashcicle"
    },
    "DeleteDashcicleLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteDashcicleLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDeleteDashcicle": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DeleteDashcicleLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteCyclesIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /cycles/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDeleteDashcicle"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationDeleteDashcicle"
    },
    "StartDashtestLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "StartDashtestLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationStartDashtest": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "StartDashtestLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostUsersDashtests": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /users-tests",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationStartDashtest"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationStartDashtest"
    },
    "SaveDashtestDashprogressLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SaveDashtestDashprogressLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationSaveDashtestDashprogress": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "SaveDashtestDashprogressLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutUsersDashtestsIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /users-tests/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationSaveDashtestDashprogress"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationSaveDashtestDashprogress"
    },
    "GetDashtestDashprogressLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashtestDashprogressLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetDashtestDashprogress": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetDashtestDashprogressLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostUsersDashtestsTestDashprogress": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /users-tests/test-progress",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetDashtestDashprogress"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetDashtestDashprogress"
    },
    "ConfirmDashtestDashcompletionLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ConfirmDashtestDashcompletionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationConfirmDashtestDashcompletion": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ConfirmDashtestDashcompletionLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostComfirmDashtestDashcompleted": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /comfirm-test-completed",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationConfirmDashtestDashcompletion"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationConfirmDashtestDashcompletion"
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "serverless-framework-deployments-us-east-2-31c921f8-650a",
      "Export": {
        "Name": "sls-simotec-sls-dev-ServerlessDeploymentBucketName"
      }
    },
    "ListUsersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ListUsersLambdaVersionYifuTAK2DQCayRAiSN4tMA9HY6Du9xsAMs0aRIhz0"
      },
      "Export": {
        "Name": "sls-simotec-sls-dev-ListUsersLambdaFunctionQualifiedArn"
      }
    },
    "CreateUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateUserLambdaVersionMgpHQ6qyX7hvZZggBd9TsP8kBsU5A9qJGiUpka8"
      },
      "Export": {
        "Name": "sls-simotec-sls-dev-CreateUserLambdaFunctionQualifiedArn"
      }
    },
    "EditUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "EditUserLambdaVersion3nYpBgp3JZLTzmNkqvyRj1e3vl5eMlV7dwRcNoQ6yk"
      },
      "Export": {
        "Name": "sls-simotec-sls-dev-EditUserLambdaFunctionQualifiedArn"
      }
    },
    "DeleteUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteUserLambdaVersion6KrSKWH8248jD8jHnAnYAICH0WBLbugriH1XC2qynY"
      },
      "Export": {
        "Name": "sls-simotec-sls-dev-DeleteUserLambdaFunctionQualifiedArn"
      }
    },
    "GetDashboardStatsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashboardStatsLambdaVersionhbFYz1e3g9ddnz9yEv0smrwTyBIrpBZ4hnKLEWjTRY"
      },
      "Export": {
        "Name": "sls-simotec-sls-dev-GetDashboardStatsLambdaFunctionQualifiedArn"
      }
    },
    "GetCadminsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetCadminsLambdaVersionYevjSIzxlumiHlOJ75jioPAuI8yMFLSp6Jn2vopbeXE"
      },
      "Export": {
        "Name": "sls-simotec-sls-dev-GetCadminsLambdaFunctionQualifiedArn"
      }
    },
    "CreateCadminLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateCadminLambdaVersionf4nssFwdFdgMchqYRCpZkxaEtJFq5EanildPvDopw"
      },
      "Export": {
        "Name": "sls-simotec-sls-dev-CreateCadminLambdaFunctionQualifiedArn"
      }
    },
    "UpdateCadminLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateCadminLambdaVersionodCBCEqKi1KxEhSsJOpNE4CzQoyG3whWSxuxvYAfk"
      },
      "Export": {
        "Name": "sls-simotec-sls-dev-UpdateCadminLambdaFunctionQualifiedArn"
      }
    },
    "DeleteCadminLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteCadminLambdaVersionBg7yt9AdqQA18cpA0CQcF43mISsTsNO4ZBlw2escFc"
      },
      "Export": {
        "Name": "sls-simotec-sls-dev-DeleteCadminLambdaFunctionQualifiedArn"
      }
    },
    "GetCompaniesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetCompaniesLambdaVersionRzcidZf13nhsGTq0njKC3CHfaNIyOOqvNUiwc2Mvg"
      },
      "Export": {
        "Name": "sls-simotec-sls-dev-GetCompaniesLambdaFunctionQualifiedArn"
      }
    },
    "CreateCompanyLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateCompanyLambdaVersionLkoiNv7mq2YpKxGPbcs0RXU3ne0G02hHjTPtaWYxVQ"
      },
      "Export": {
        "Name": "sls-simotec-sls-dev-CreateCompanyLambdaFunctionQualifiedArn"
      }
    },
    "UpdateCompanyLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateCompanyLambdaVersionOnwLmtZM2HslUZnHISsX6tNZ9vYyQcPUhJDVemoynw"
      },
      "Export": {
        "Name": "sls-simotec-sls-dev-UpdateCompanyLambdaFunctionQualifiedArn"
      }
    },
    "DeleteCompanyLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteCompanyLambdaVersionjOgs4lKtQUEQHpdD44HjpcsiR01foV4QATrLP26p5A"
      },
      "Export": {
        "Name": "sls-simotec-sls-dev-DeleteCompanyLambdaFunctionQualifiedArn"
      }
    },
    "LoginLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "LoginLambdaVersionYYzAEr5GPJu2TR40SAY8P2kLVgCr6anKruNvNNIyM"
      },
      "Export": {
        "Name": "sls-simotec-sls-dev-LoginLambdaFunctionQualifiedArn"
      }
    },
    "CreateDashcicleLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateDashcicleLambdaVersionhhJzPJ9IfUwB5rCC8FOCYT6633dpHgVlDRAoT4ps"
      },
      "Export": {
        "Name": "sls-simotec-sls-dev-CreateDashcicleLambdaFunctionQualifiedArn"
      }
    },
    "GetDashciclesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashciclesLambdaVersionld48J87tyhOZ8OOubHBSIyTTEl6m4cMShzvv0NBdEV8"
      },
      "Export": {
        "Name": "sls-simotec-sls-dev-GetDashciclesLambdaFunctionQualifiedArn"
      }
    },
    "GetDashcicleLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashcicleLambdaVersionNv5lT1T02y3NtMkByrbzN3aJ9wOca5ZrGbKxqFevSE"
      },
      "Export": {
        "Name": "sls-simotec-sls-dev-GetDashcicleLambdaFunctionQualifiedArn"
      }
    },
    "UpdateDashcicleLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateDashcicleLambdaVersionxiahHFY8QwxEMy60i2foL3m0twym0GqAGixfnxfxU"
      },
      "Export": {
        "Name": "sls-simotec-sls-dev-UpdateDashcicleLambdaFunctionQualifiedArn"
      }
    },
    "DeleteDashcicleLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteDashcicleLambdaVersionwbn4T5SLb1HJsgUMxWg1Eptjq2pSRllDRCTTWsuGo"
      },
      "Export": {
        "Name": "sls-simotec-sls-dev-DeleteDashcicleLambdaFunctionQualifiedArn"
      }
    },
    "StartDashtestLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "StartDashtestLambdaVersionWpuGFTqSGX6eETFjlfHVq1n7ixFbxCTbvTJztteVpN8"
      },
      "Export": {
        "Name": "sls-simotec-sls-dev-StartDashtestLambdaFunctionQualifiedArn"
      }
    },
    "SaveDashtestDashprogressLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SaveDashtestDashprogressLambdaVersionx1LJwAtZBDeKBwVr6qTkf10zis52OLhsAYnMtBAz5U"
      },
      "Export": {
        "Name": "sls-simotec-sls-dev-SaveDashtestDashprogressLambdaFunctionQualifiedArn"
      }
    },
    "GetDashtestDashprogressLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashtestDashprogressLambdaVersionqBPQD4RZX8TyoxW7aORmdqQ0rC3uiCceZb2Bbv6ris"
      },
      "Export": {
        "Name": "sls-simotec-sls-dev-GetDashtestDashprogressLambdaFunctionQualifiedArn"
      }
    },
    "ConfirmDashtestDashcompletionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ConfirmDashtestDashcompletionLambdaVersionacoq0alvEtin5dr1mA6848xiC3zolD8XheENpQe26sM"
      },
      "Export": {
        "Name": "sls-simotec-sls-dev-ConfirmDashtestDashcompletionLambdaFunctionQualifiedArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-simotec-sls-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-simotec-sls-dev-HttpApiUrl"
      }
    }
  }
}