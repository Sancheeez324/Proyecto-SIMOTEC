{
  "service": {
    "service": "simotec-sls",
    "serviceObject": {
      "name": "simotec-sls"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "timeout": 20,
      "memorySize": 3000,
      "stage": "dev",
      "region": "us-east-2",
      "tags": {
        "CLIENT": "simotec",
        "STAGE": "dev"
      },
      "httpApi": {
        "cors": {
          "allowedOrigins": [
            "*"
          ],
          "allowedHeaders": [
            "*"
          ],
          "allowedMethods": [
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "PATCH",
            "OPTIONS"
          ]
        }
      },
      "environment": {
        "TZ": "America/Santiago",
        "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
        "DB_USER": "admin",
        "DB_PASSWORD": "Hhfc2102#",
        "DB_NAME": "simotec",
        "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
        "JWT_EXPIRES_IN": "1d",
        "CORS_ORIGIN": "http://localhost:5173"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "rds:DescribeDBInstances",
            "rds:Connect"
          ],
          "Resource": "*"
        }
      ],
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "GetUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-getUsers"
            }
          },
          "CreateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-createUser"
            }
          },
          "UpdateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-updateUser"
            }
          },
          "DeleteUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-deleteUser"
            }
          },
          "GetCadminsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-getCadmins"
            }
          },
          "CreateCadminLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-createCadmin"
            }
          },
          "UpdateCadminLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-updateCadmin"
            }
          },
          "DeleteCadminLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-deleteCadmin"
            }
          },
          "GetCompaniesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-getCompanies"
            }
          },
          "CreateCompanyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-createCompany"
            }
          },
          "UpdateCompanyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-updateCompany"
            }
          },
          "DeleteCompanyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-deleteCompany"
            }
          },
          "LoginLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-login"
            }
          },
          "CreateDashcicleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-create-cicle"
            }
          },
          "GetDashciclesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-get-cicles"
            }
          },
          "GetDashcicleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-get-cicle"
            }
          },
          "UpdateDashcicleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-update-cicle"
            }
          },
          "DeleteDashcicleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-delete-cicle"
            }
          },
          "StartDashtestLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-start-test"
            }
          },
          "SaveDashtestDashprogressLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-save-test-progress"
            }
          },
          "GetDashtestDashprogressLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-get-test-progress"
            }
          },
          "ConfirmDashtestDashcompletionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-confirm-test-completion"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "simotec-sls",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/simotec-sls-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/simotec-sls-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "simotec-sls",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "GetUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741962986401-2025-03-14T14:36:26.401Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users/handler.listUsers",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-getUsers",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUsersLogGroup"
            ]
          },
          "CreateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741962986401-2025-03-14T14:36:26.401Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users/handler.createUser",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-createUser",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateUserLogGroup"
            ]
          },
          "UpdateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741962986401-2025-03-14T14:36:26.401Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users/handler.updateUser",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-updateUser",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateUserLogGroup"
            ]
          },
          "DeleteUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741962986401-2025-03-14T14:36:26.401Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users/handler.deleteUser",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-deleteUser",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteUserLogGroup"
            ]
          },
          "GetCadminsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741962986401-2025-03-14T14:36:26.401Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cadmins/handler.listCadmins",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-getCadmins",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetCadminsLogGroup"
            ]
          },
          "CreateCadminLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741962986401-2025-03-14T14:36:26.401Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cadmins/handler.createCadmin",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-createCadmin",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateCadminLogGroup"
            ]
          },
          "UpdateCadminLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741962986401-2025-03-14T14:36:26.401Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cadmins/handler.updateCadmin",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-updateCadmin",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateCadminLogGroup"
            ]
          },
          "DeleteCadminLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741962986401-2025-03-14T14:36:26.401Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cadmins/handler.deleteCadmin",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-deleteCadmin",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteCadminLogGroup"
            ]
          },
          "GetCompaniesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741962986401-2025-03-14T14:36:26.401Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/companies/handler.listCompanies",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-getCompanies",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetCompaniesLogGroup"
            ]
          },
          "CreateCompanyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741962986401-2025-03-14T14:36:26.401Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/companies/handler.createCompany",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-createCompany",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateCompanyLogGroup"
            ]
          },
          "UpdateCompanyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741962986401-2025-03-14T14:36:26.401Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/companies/handler.editCompany",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-updateCompany",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateCompanyLogGroup"
            ]
          },
          "DeleteCompanyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741962986401-2025-03-14T14:36:26.401Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/companies/handler.deleteCompany",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-deleteCompany",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteCompanyLogGroup"
            ]
          },
          "LoginLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741962986401-2025-03-14T14:36:26.401Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/auth/handler.loginHandler",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-login",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LoginLogGroup"
            ]
          },
          "CreateDashcicleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741962986401-2025-03-14T14:36:26.401Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cycles/handler.createEvaluationCycle",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-create-cicle",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateDashcicleLogGroup"
            ]
          },
          "GetDashciclesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741962986401-2025-03-14T14:36:26.401Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cycles/handler.listCycles",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-get-cicles",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetDashciclesLogGroup"
            ]
          },
          "GetDashcicleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741962986401-2025-03-14T14:36:26.401Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cycles/handler.getCycle",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-get-cicle",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetDashcicleLogGroup"
            ]
          },
          "UpdateDashcicleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741962986401-2025-03-14T14:36:26.401Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cycles/handler.updateCycle",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-update-cicle",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateDashcicleLogGroup"
            ]
          },
          "DeleteDashcicleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741962986401-2025-03-14T14:36:26.401Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cycles/handler.deleteCycle",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-delete-cicle",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteDashcicleLogGroup"
            ]
          },
          "StartDashtestLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741962986401-2025-03-14T14:36:26.401Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users-tests/handler.startTest",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-start-test",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "StartDashtestLogGroup"
            ]
          },
          "SaveDashtestDashprogressLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741962986401-2025-03-14T14:36:26.401Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users-tests/handler.saveTestProgress",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-save-test-progress",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SaveDashtestDashprogressLogGroup"
            ]
          },
          "GetDashtestDashprogressLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741962986401-2025-03-14T14:36:26.401Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users-tests/handler.getTestProgress",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-get-test-progress",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetDashtestDashprogressLogGroup"
            ]
          },
          "ConfirmDashtestDashcompletionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1741962986401-2025-03-14T14:36:26.401Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users-tests/handler.confirmTestCompletion",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-confirm-test-completion",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ConfirmDashtestDashcompletionLogGroup"
            ]
          },
          "GetUsersLambdaVersionDlLKWV2Eo2zQi0BE2BiPpxrpktfSZlGMAJVWkU230": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUsersLambdaFunction"
              },
              "CodeSha256": "Gtzysjkbw84WqoPIkoxNTxdR1u8GoHUOndZgGJ3j0js="
            }
          },
          "CreateUserLambdaVersion5zZy9SicjA6uzXZobIsZHJ5kywbgEPTgvOX7qdQWVJc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateUserLambdaFunction"
              },
              "CodeSha256": "Gtzysjkbw84WqoPIkoxNTxdR1u8GoHUOndZgGJ3j0js="
            }
          },
          "UpdateUserLambdaVersionMfhTsXnk8moEBQiQwmlvZ8zhV7W6Hd0Z7anyR2ESrY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateUserLambdaFunction"
              },
              "CodeSha256": "Gtzysjkbw84WqoPIkoxNTxdR1u8GoHUOndZgGJ3j0js="
            }
          },
          "DeleteUserLambdaVersionMQ1ewCYVaZLuhlwi40gahla9MD8cYRCMTxOfzr2DOiY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteUserLambdaFunction"
              },
              "CodeSha256": "Gtzysjkbw84WqoPIkoxNTxdR1u8GoHUOndZgGJ3j0js="
            }
          },
          "GetCadminsLambdaVersionW4qgaY0U6xDqjzGMglFaUMYy8mCCHTaIXa3LaZ2bBM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetCadminsLambdaFunction"
              },
              "CodeSha256": "Gtzysjkbw84WqoPIkoxNTxdR1u8GoHUOndZgGJ3j0js="
            }
          },
          "CreateCadminLambdaVersionQ5K2WApQZv6uDsdcYBvt0WZfiQCFk7uGhBBxinZbyk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateCadminLambdaFunction"
              },
              "CodeSha256": "Gtzysjkbw84WqoPIkoxNTxdR1u8GoHUOndZgGJ3j0js="
            }
          },
          "UpdateCadminLambdaVersionM5UO7D00lddSHxv9un02Clxu54FfcHxD4RBFbzPUZNI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateCadminLambdaFunction"
              },
              "CodeSha256": "Gtzysjkbw84WqoPIkoxNTxdR1u8GoHUOndZgGJ3j0js="
            }
          },
          "DeleteCadminLambdaVersionTbFcTYw4y8kdSeFdIXAGng5iobNbgHbmIYKceCQ8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteCadminLambdaFunction"
              },
              "CodeSha256": "Gtzysjkbw84WqoPIkoxNTxdR1u8GoHUOndZgGJ3j0js="
            }
          },
          "GetCompaniesLambdaVersionY2PBrMkctdF4EDMKILxYwYxqkLrXNkOrL1D9jUoGY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetCompaniesLambdaFunction"
              },
              "CodeSha256": "Gtzysjkbw84WqoPIkoxNTxdR1u8GoHUOndZgGJ3j0js="
            }
          },
          "CreateCompanyLambdaVersiong5H0XvqV76XGZ9JvSBzr1Ja6Ft457VTPms6iHMIm8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateCompanyLambdaFunction"
              },
              "CodeSha256": "Gtzysjkbw84WqoPIkoxNTxdR1u8GoHUOndZgGJ3j0js="
            }
          },
          "UpdateCompanyLambdaVersionIhC9YgRorXf0P3kmu5gIpV4ZQ2Zv4WG01kpT5aOLQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateCompanyLambdaFunction"
              },
              "CodeSha256": "Gtzysjkbw84WqoPIkoxNTxdR1u8GoHUOndZgGJ3j0js="
            }
          },
          "DeleteCompanyLambdaVersionlIdt1qXmj4OcUPXfVUoQ3AgcGRRTcIhmfr8HCglSQE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteCompanyLambdaFunction"
              },
              "CodeSha256": "Gtzysjkbw84WqoPIkoxNTxdR1u8GoHUOndZgGJ3j0js="
            }
          },
          "LoginLambdaVersionH4vXCh0V7Wc0pSHzGSfoIH350LRbK15avcT370Loe4g": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoginLambdaFunction"
              },
              "CodeSha256": "Gtzysjkbw84WqoPIkoxNTxdR1u8GoHUOndZgGJ3j0js="
            }
          },
          "CreateDashcicleLambdaVersionpScRtJNSbBwaCEeskUQ7WutwRVOfRhkIrrjbgSAt0k": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateDashcicleLambdaFunction"
              },
              "CodeSha256": "Gtzysjkbw84WqoPIkoxNTxdR1u8GoHUOndZgGJ3j0js="
            }
          },
          "GetDashciclesLambdaVersionYKX7kxCWWq1ku6beob2Ak3kZPcwZWLXz50hd0gC13hk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDashciclesLambdaFunction"
              },
              "CodeSha256": "Gtzysjkbw84WqoPIkoxNTxdR1u8GoHUOndZgGJ3j0js="
            }
          },
          "GetDashcicleLambdaVersionTKicQpuZH4loLqr3mk4NngnXHIl7JgkedXPMcKqRjUs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDashcicleLambdaFunction"
              },
              "CodeSha256": "Gtzysjkbw84WqoPIkoxNTxdR1u8GoHUOndZgGJ3j0js="
            }
          },
          "UpdateDashcicleLambdaVersionuBQtPepzUIRkozMisV6yN4UE84Y6YWc8MfQgavUnAY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateDashcicleLambdaFunction"
              },
              "CodeSha256": "Gtzysjkbw84WqoPIkoxNTxdR1u8GoHUOndZgGJ3j0js="
            }
          },
          "DeleteDashcicleLambdaVersion5dYzOc1UBLOkGoNcDIVTBIxgW52CxjEtA3WriTzSuM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteDashcicleLambdaFunction"
              },
              "CodeSha256": "Gtzysjkbw84WqoPIkoxNTxdR1u8GoHUOndZgGJ3j0js="
            }
          },
          "StartDashtestLambdaVersionm7Ix99iwwMBMEL9Zjdwr3cxhXhpzn68c3Rc628XWrlk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "StartDashtestLambdaFunction"
              },
              "CodeSha256": "Gtzysjkbw84WqoPIkoxNTxdR1u8GoHUOndZgGJ3j0js="
            }
          },
          "SaveDashtestDashprogressLambdaVersionagdhvbC4ptpJxIBC3X8erEZBzTxCwoCBZw6uFnlTQ0o": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SaveDashtestDashprogressLambdaFunction"
              },
              "CodeSha256": "Gtzysjkbw84WqoPIkoxNTxdR1u8GoHUOndZgGJ3j0js="
            }
          },
          "GetDashtestDashprogressLambdaVersionEE3aewg7GkLHDNckYyilIJNYbIPqv6SFaWNiZqhOg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDashtestDashprogressLambdaFunction"
              },
              "CodeSha256": "Gtzysjkbw84WqoPIkoxNTxdR1u8GoHUOndZgGJ3j0js="
            }
          },
          "ConfirmDashtestDashcompletionLambdaVersionRAd9KhSvk3R4l5QLIx5Q57TBfUzUPiGYVVM6I3xJE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ConfirmDashtestDashcompletionLambdaFunction"
              },
              "CodeSha256": "Gtzysjkbw84WqoPIkoxNTxdR1u8GoHUOndZgGJ3j0js="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-simotec-sls",
              "ProtocolType": "HTTP",
              "Tags": {
                "CLIENT": "simotec",
                "STAGE": "dev"
              },
              "CorsConfiguration": {
                "AllowHeaders": [
                  "*"
                ],
                "AllowMethods": [
                  "GET",
                  "POST",
                  "PUT",
                  "DELETE",
                  "PATCH",
                  "OPTIONS"
                ],
                "AllowOrigins": [
                  "*"
                ]
              }
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              },
              "Tags": {
                "CLIENT": "simotec",
                "STAGE": "dev"
              }
            }
          },
          "GetUsersLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetUsers": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetUsersLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetUsers": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /users",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetUsers"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetUsers"
          },
          "CreateUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostUsers": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /users",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateUser"
          },
          "UpdateUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutUsersIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /users/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateUser"
          },
          "DeleteUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteUsersIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /users/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteUser"
          },
          "GetCadminsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetCadminsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetCadmins": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetCadminsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetCadmins": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /cadmins",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetCadmins"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetCadmins"
          },
          "CreateCadminLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateCadminLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateCadmin": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateCadminLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostCadmins": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /cadmins",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateCadmin"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateCadmin"
          },
          "UpdateCadminLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateCadminLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateCadmin": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateCadminLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutCadminsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /cadmins/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateCadmin"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateCadmin"
          },
          "DeleteCadminLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteCadminLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteCadmin": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteCadminLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteCadminsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /cadmins/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteCadmin"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteCadmin"
          },
          "GetCompaniesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetCompaniesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetCompanies": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetCompaniesLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetCompanies": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /companies",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetCompanies"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetCompanies"
          },
          "CreateCompanyLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateCompanyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateCompany": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateCompanyLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostCompanies": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /companies",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateCompany"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateCompany"
          },
          "UpdateCompanyLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateCompanyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateCompany": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateCompanyLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutCompaniesIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /companies/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateCompany"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateCompany"
          },
          "DeleteCompanyLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteCompanyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteCompany": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteCompanyLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteCompaniesIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /companies/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteCompany"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteCompany"
          },
          "LoginLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoginLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationLogin": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"LoginLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostAuthLogin": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /auth/login",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationLogin"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationLogin"
          },
          "CreateDashcicleLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateDashcicleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateDashcicle": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateDashcicleLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostCycles": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /cycles",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateDashcicle"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateDashcicle"
          },
          "GetDashciclesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDashciclesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetDashcicles": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetDashciclesLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetCycles": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /cycles",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetDashcicles"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetDashcicles"
          },
          "GetDashcicleLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDashcicleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetDashcicle": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetDashcicleLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetCyclesIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /cycles/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetDashcicle"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetDashcicle"
          },
          "UpdateDashcicleLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateDashcicleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateDashcicle": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateDashcicleLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutCyclesIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /cycles/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateDashcicle"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateDashcicle"
          },
          "DeleteDashcicleLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteDashcicleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteDashcicle": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteDashcicleLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteCyclesIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /cycles/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteDashcicle"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteDashcicle"
          },
          "StartDashtestLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "StartDashtestLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationStartDashtest": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"StartDashtestLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostUsersDashtests": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /users-tests",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationStartDashtest"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationStartDashtest"
          },
          "SaveDashtestDashprogressLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SaveDashtestDashprogressLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationSaveDashtestDashprogress": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SaveDashtestDashprogressLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutUsersDashtestsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /users-tests/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSaveDashtestDashprogress"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSaveDashtestDashprogress"
          },
          "GetDashtestDashprogressLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDashtestDashprogressLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetDashtestDashprogress": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetDashtestDashprogressLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostUsersDashtestsTestDashprogress": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /users-tests/test-progress",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetDashtestDashprogress"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetDashtestDashprogress"
          },
          "ConfirmDashtestDashcompletionLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ConfirmDashtestDashcompletionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationConfirmDashtestDashcompletion": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ConfirmDashtestDashcompletionLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostComfirmDashtestDashcompleted": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /comfirm-test-completed",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationConfirmDashtestDashcompletion"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationConfirmDashtestDashcompletion"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-2-31c921f8-650a",
            "Export": {
              "Name": "sls-simotec-sls-dev-ServerlessDeploymentBucketName"
            }
          },
          "GetUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUsersLambdaVersionDlLKWV2Eo2zQi0BE2BiPpxrpktfSZlGMAJVWkU230"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetUsersLambdaFunctionQualifiedArn"
            }
          },
          "CreateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateUserLambdaVersion5zZy9SicjA6uzXZobIsZHJ5kywbgEPTgvOX7qdQWVJc"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-CreateUserLambdaFunctionQualifiedArn"
            }
          },
          "UpdateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateUserLambdaVersionMfhTsXnk8moEBQiQwmlvZ8zhV7W6Hd0Z7anyR2ESrY"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-UpdateUserLambdaFunctionQualifiedArn"
            }
          },
          "DeleteUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteUserLambdaVersionMQ1ewCYVaZLuhlwi40gahla9MD8cYRCMTxOfzr2DOiY"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-DeleteUserLambdaFunctionQualifiedArn"
            }
          },
          "GetCadminsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetCadminsLambdaVersionW4qgaY0U6xDqjzGMglFaUMYy8mCCHTaIXa3LaZ2bBM"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetCadminsLambdaFunctionQualifiedArn"
            }
          },
          "CreateCadminLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateCadminLambdaVersionQ5K2WApQZv6uDsdcYBvt0WZfiQCFk7uGhBBxinZbyk"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-CreateCadminLambdaFunctionQualifiedArn"
            }
          },
          "UpdateCadminLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateCadminLambdaVersionM5UO7D00lddSHxv9un02Clxu54FfcHxD4RBFbzPUZNI"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-UpdateCadminLambdaFunctionQualifiedArn"
            }
          },
          "DeleteCadminLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteCadminLambdaVersionTbFcTYw4y8kdSeFdIXAGng5iobNbgHbmIYKceCQ8"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-DeleteCadminLambdaFunctionQualifiedArn"
            }
          },
          "GetCompaniesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetCompaniesLambdaVersionY2PBrMkctdF4EDMKILxYwYxqkLrXNkOrL1D9jUoGY"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetCompaniesLambdaFunctionQualifiedArn"
            }
          },
          "CreateCompanyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateCompanyLambdaVersiong5H0XvqV76XGZ9JvSBzr1Ja6Ft457VTPms6iHMIm8"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-CreateCompanyLambdaFunctionQualifiedArn"
            }
          },
          "UpdateCompanyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateCompanyLambdaVersionIhC9YgRorXf0P3kmu5gIpV4ZQ2Zv4WG01kpT5aOLQ"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-UpdateCompanyLambdaFunctionQualifiedArn"
            }
          },
          "DeleteCompanyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteCompanyLambdaVersionlIdt1qXmj4OcUPXfVUoQ3AgcGRRTcIhmfr8HCglSQE"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-DeleteCompanyLambdaFunctionQualifiedArn"
            }
          },
          "LoginLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoginLambdaVersionH4vXCh0V7Wc0pSHzGSfoIH350LRbK15avcT370Loe4g"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-LoginLambdaFunctionQualifiedArn"
            }
          },
          "CreateDashcicleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateDashcicleLambdaVersionpScRtJNSbBwaCEeskUQ7WutwRVOfRhkIrrjbgSAt0k"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-CreateDashcicleLambdaFunctionQualifiedArn"
            }
          },
          "GetDashciclesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDashciclesLambdaVersionYKX7kxCWWq1ku6beob2Ak3kZPcwZWLXz50hd0gC13hk"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetDashciclesLambdaFunctionQualifiedArn"
            }
          },
          "GetDashcicleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDashcicleLambdaVersionTKicQpuZH4loLqr3mk4NngnXHIl7JgkedXPMcKqRjUs"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetDashcicleLambdaFunctionQualifiedArn"
            }
          },
          "UpdateDashcicleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateDashcicleLambdaVersionuBQtPepzUIRkozMisV6yN4UE84Y6YWc8MfQgavUnAY"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-UpdateDashcicleLambdaFunctionQualifiedArn"
            }
          },
          "DeleteDashcicleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteDashcicleLambdaVersion5dYzOc1UBLOkGoNcDIVTBIxgW52CxjEtA3WriTzSuM"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-DeleteDashcicleLambdaFunctionQualifiedArn"
            }
          },
          "StartDashtestLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "StartDashtestLambdaVersionm7Ix99iwwMBMEL9Zjdwr3cxhXhpzn68c3Rc628XWrlk"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-StartDashtestLambdaFunctionQualifiedArn"
            }
          },
          "SaveDashtestDashprogressLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SaveDashtestDashprogressLambdaVersionagdhvbC4ptpJxIBC3X8erEZBzTxCwoCBZw6uFnlTQ0o"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-SaveDashtestDashprogressLambdaFunctionQualifiedArn"
            }
          },
          "GetDashtestDashprogressLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDashtestDashprogressLambdaVersionEE3aewg7GkLHDNckYyilIJNYbIPqv6SFaWNiZqhOg"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetDashtestDashprogressLambdaFunctionQualifiedArn"
            }
          },
          "ConfirmDashtestDashcompletionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ConfirmDashtestDashcompletionLambdaVersionRAd9KhSvk3R4l5QLIx5Q57TBfUzUPiGYVVM6I3xJE"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-ConfirmDashtestDashcompletionLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-HttpApiUrl"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": null,
    "plugins": [
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "getUsers": {
        "handler": "src/maintainers/users/handler.listUsers",
        "events": [
          {
            "httpApi": {
              "path": "/users",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/users"
          }
        ],
        "name": "simotec-sls-dev-getUsers",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetUsersLambdaVersionDlLKWV2Eo2zQi0BE2BiPpxrpktfSZlGMAJVWkU230"
      },
      "createUser": {
        "handler": "src/maintainers/users/handler.createUser",
        "events": [
          {
            "httpApi": {
              "path": "/users",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/users"
          }
        ],
        "name": "simotec-sls-dev-createUser",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "CreateUserLambdaVersion5zZy9SicjA6uzXZobIsZHJ5kywbgEPTgvOX7qdQWVJc"
      },
      "updateUser": {
        "handler": "src/maintainers/users/handler.updateUser",
        "events": [
          {
            "httpApi": {
              "path": "/users/{id}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/users/{id}"
          }
        ],
        "name": "simotec-sls-dev-updateUser",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "UpdateUserLambdaVersionMfhTsXnk8moEBQiQwmlvZ8zhV7W6Hd0Z7anyR2ESrY"
      },
      "deleteUser": {
        "handler": "src/maintainers/users/handler.deleteUser",
        "events": [
          {
            "httpApi": {
              "path": "/users/{id}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/users/{id}"
          }
        ],
        "name": "simotec-sls-dev-deleteUser",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "DeleteUserLambdaVersionMQ1ewCYVaZLuhlwi40gahla9MD8cYRCMTxOfzr2DOiY"
      },
      "getCadmins": {
        "handler": "src/maintainers/cadmins/handler.listCadmins",
        "events": [
          {
            "httpApi": {
              "path": "/cadmins",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/cadmins"
          }
        ],
        "name": "simotec-sls-dev-getCadmins",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetCadminsLambdaVersionW4qgaY0U6xDqjzGMglFaUMYy8mCCHTaIXa3LaZ2bBM"
      },
      "createCadmin": {
        "handler": "src/maintainers/cadmins/handler.createCadmin",
        "events": [
          {
            "httpApi": {
              "path": "/cadmins",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/cadmins"
          }
        ],
        "name": "simotec-sls-dev-createCadmin",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "CreateCadminLambdaVersionQ5K2WApQZv6uDsdcYBvt0WZfiQCFk7uGhBBxinZbyk"
      },
      "updateCadmin": {
        "handler": "src/maintainers/cadmins/handler.updateCadmin",
        "events": [
          {
            "httpApi": {
              "path": "/cadmins/{id}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/cadmins/{id}"
          }
        ],
        "name": "simotec-sls-dev-updateCadmin",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "UpdateCadminLambdaVersionM5UO7D00lddSHxv9un02Clxu54FfcHxD4RBFbzPUZNI"
      },
      "deleteCadmin": {
        "handler": "src/maintainers/cadmins/handler.deleteCadmin",
        "events": [
          {
            "httpApi": {
              "path": "/cadmins/{id}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/cadmins/{id}"
          }
        ],
        "name": "simotec-sls-dev-deleteCadmin",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "DeleteCadminLambdaVersionTbFcTYw4y8kdSeFdIXAGng5iobNbgHbmIYKceCQ8"
      },
      "getCompanies": {
        "handler": "src/maintainers/companies/handler.listCompanies",
        "events": [
          {
            "httpApi": {
              "path": "/companies",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/companies"
          }
        ],
        "name": "simotec-sls-dev-getCompanies",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetCompaniesLambdaVersionY2PBrMkctdF4EDMKILxYwYxqkLrXNkOrL1D9jUoGY"
      },
      "createCompany": {
        "handler": "src/maintainers/companies/handler.createCompany",
        "events": [
          {
            "httpApi": {
              "path": "/companies",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/companies"
          }
        ],
        "name": "simotec-sls-dev-createCompany",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "CreateCompanyLambdaVersiong5H0XvqV76XGZ9JvSBzr1Ja6Ft457VTPms6iHMIm8"
      },
      "updateCompany": {
        "handler": "src/maintainers/companies/handler.editCompany",
        "events": [
          {
            "httpApi": {
              "path": "/companies/{id}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/companies/{id}"
          }
        ],
        "name": "simotec-sls-dev-updateCompany",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "UpdateCompanyLambdaVersionIhC9YgRorXf0P3kmu5gIpV4ZQ2Zv4WG01kpT5aOLQ"
      },
      "deleteCompany": {
        "handler": "src/maintainers/companies/handler.deleteCompany",
        "events": [
          {
            "httpApi": {
              "path": "/companies/{id}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/companies/{id}"
          }
        ],
        "name": "simotec-sls-dev-deleteCompany",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "DeleteCompanyLambdaVersionlIdt1qXmj4OcUPXfVUoQ3AgcGRRTcIhmfr8HCglSQE"
      },
      "login": {
        "handler": "src/maintainers/auth/handler.loginHandler",
        "events": [
          {
            "httpApi": {
              "path": "/auth/login",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/auth/login"
          }
        ],
        "name": "simotec-sls-dev-login",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "LoginLambdaVersionH4vXCh0V7Wc0pSHzGSfoIH350LRbK15avcT370Loe4g"
      },
      "create-cicle": {
        "handler": "src/maintainers/cycles/handler.createEvaluationCycle",
        "events": [
          {
            "httpApi": {
              "path": "/cycles",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/cycles"
          }
        ],
        "name": "simotec-sls-dev-create-cicle",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "CreateDashcicleLambdaVersionpScRtJNSbBwaCEeskUQ7WutwRVOfRhkIrrjbgSAt0k"
      },
      "get-cicles": {
        "handler": "src/maintainers/cycles/handler.listCycles",
        "events": [
          {
            "httpApi": {
              "path": "/cycles",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/cycles"
          }
        ],
        "name": "simotec-sls-dev-get-cicles",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetDashciclesLambdaVersionYKX7kxCWWq1ku6beob2Ak3kZPcwZWLXz50hd0gC13hk"
      },
      "get-cicle": {
        "handler": "src/maintainers/cycles/handler.getCycle",
        "events": [
          {
            "httpApi": {
              "path": "/cycles/{id}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/cycles/{id}"
          }
        ],
        "name": "simotec-sls-dev-get-cicle",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetDashcicleLambdaVersionTKicQpuZH4loLqr3mk4NngnXHIl7JgkedXPMcKqRjUs"
      },
      "update-cicle": {
        "handler": "src/maintainers/cycles/handler.updateCycle",
        "events": [
          {
            "httpApi": {
              "path": "/cycles/{id}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/cycles/{id}"
          }
        ],
        "name": "simotec-sls-dev-update-cicle",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "UpdateDashcicleLambdaVersionuBQtPepzUIRkozMisV6yN4UE84Y6YWc8MfQgavUnAY"
      },
      "delete-cicle": {
        "handler": "src/maintainers/cycles/handler.deleteCycle",
        "events": [
          {
            "httpApi": {
              "path": "/cycles/{id}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/cycles/{id}"
          }
        ],
        "name": "simotec-sls-dev-delete-cicle",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "DeleteDashcicleLambdaVersion5dYzOc1UBLOkGoNcDIVTBIxgW52CxjEtA3WriTzSuM"
      },
      "start-test": {
        "handler": "src/maintainers/users-tests/handler.startTest",
        "events": [
          {
            "httpApi": {
              "path": "/users-tests",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/users-tests"
          }
        ],
        "name": "simotec-sls-dev-start-test",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "StartDashtestLambdaVersionm7Ix99iwwMBMEL9Zjdwr3cxhXhpzn68c3Rc628XWrlk"
      },
      "save-test-progress": {
        "handler": "src/maintainers/users-tests/handler.saveTestProgress",
        "events": [
          {
            "httpApi": {
              "path": "/users-tests/{id}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/users-tests/{id}"
          }
        ],
        "name": "simotec-sls-dev-save-test-progress",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "SaveDashtestDashprogressLambdaVersionagdhvbC4ptpJxIBC3X8erEZBzTxCwoCBZw6uFnlTQ0o"
      },
      "get-test-progress": {
        "handler": "src/maintainers/users-tests/handler.getTestProgress",
        "events": [
          {
            "httpApi": {
              "path": "/users-tests/test-progress",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/users-tests/test-progress"
          }
        ],
        "name": "simotec-sls-dev-get-test-progress",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetDashtestDashprogressLambdaVersionEE3aewg7GkLHDNckYyilIJNYbIPqv6SFaWNiZqhOg"
      },
      "confirm-test-completion": {
        "handler": "src/maintainers/users-tests/handler.confirmTestCompletion",
        "events": [
          {
            "httpApi": {
              "path": "/comfirm-test-completed",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/comfirm-test-completed"
          }
        ],
        "name": "simotec-sls-dev-confirm-test-completion",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "ConfirmDashtestDashcompletionLambdaVersionRAd9KhSvk3R4l5QLIx5Q57TBfUzUPiGYVVM6I3xJE"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless",
    "initialServerlessConfig": {
      "service": "simotec-sls",
      "frameworkVersion": "4",
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "custom": null
    },
    "appId": null,
    "orgId": null,
    "layers": {},
    "artifact": "C:\\Users\\alfre\\OneDrive\\Documentos\\GitHub\\Proyecto\\simotec-sls-develop\\.serverless\\simotec-sls.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/simotec-sls/dev/1741962986401-2025-03-14T14:36:26.401Z",
    "artifact": "simotec-sls.zip"
  }
}