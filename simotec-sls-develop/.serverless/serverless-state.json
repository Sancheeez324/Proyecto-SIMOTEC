{
  "service": {
    "service": "simotec-sls",
    "serviceObject": {
      "name": "simotec-sls"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "timeout": 20,
      "memorySize": 3000,
      "stage": "dev",
      "region": "us-east-2",
      "tags": {
        "CLIENT": "simotec",
        "STAGE": "dev"
      },
      "httpApi": {
        "cors": {
          "allowedOrigins": [
            "*"
          ],
          "allowedHeaders": [
            "*"
          ],
          "allowedMethods": [
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "PATCH",
            "OPTIONS"
          ]
        }
      },
      "environment": {
        "TZ": "America/Santiago",
        "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
        "DB_USER": "admin",
        "DB_PASSWORD": "Hhfc2102#",
        "DB_NAME": "simotec",
        "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
        "JWT_EXPIRES_IN": "1d",
        "CORS_ORIGIN": "http://localhost:5173"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "rds:DescribeDBInstances",
            "rds:Connect"
          ],
          "Resource": "*"
        }
      ],
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ListUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-listUsers"
            }
          },
          "CreateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-createUser"
            }
          },
          "EditUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-editUser"
            }
          },
          "DeleteUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-deleteUser"
            }
          },
          "GetDashboardStatsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-getDashboardStats"
            }
          },
          "GetCadminsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-getCadmins"
            }
          },
          "CreateCadminLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-createCadmin"
            }
          },
          "UpdateCadminLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-updateCadmin"
            }
          },
          "DeleteCadminLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-deleteCadmin"
            }
          },
          "GetCompaniesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-getCompanies"
            }
          },
          "CreateCompanyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-createCompany"
            }
          },
          "UpdateCompanyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-updateCompany"
            }
          },
          "DeleteCompanyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-deleteCompany"
            }
          },
          "LoginLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-login"
            }
          },
          "CreateDashcicleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-create-cicle"
            }
          },
          "GetDashciclesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-get-cicles"
            }
          },
          "GetDashcicleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-get-cicle"
            }
          },
          "UpdateDashcicleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-update-cicle"
            }
          },
          "DeleteDashcicleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-delete-cicle"
            }
          },
          "GetAssignedTestsByAuthIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-getAssignedTestsByAuthId"
            }
          },
          "GetTestQuestionsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-getTestQuestions"
            }
          },
          "SubmitTestLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-submitTest"
            }
          },
          "UpdateTestStatusLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-updateTestStatus"
            }
          },
          "GetTestsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-getTests"
            }
          },
          "AssignTestLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-assignTest"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "simotec-sls",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/simotec-sls-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/simotec-sls-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "simotec-sls",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "ListUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743099161641-2025-03-27T18:12:41.641Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users/handler.listUsers",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-listUsers",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListUsersLogGroup"
            ]
          },
          "CreateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743099161641-2025-03-27T18:12:41.641Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users/handler.createUser",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-createUser",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateUserLogGroup"
            ]
          },
          "EditUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743099161641-2025-03-27T18:12:41.641Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users/handler.editUser",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-editUser",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EditUserLogGroup"
            ]
          },
          "DeleteUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743099161641-2025-03-27T18:12:41.641Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users/handler.deleteUser",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-deleteUser",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteUserLogGroup"
            ]
          },
          "GetDashboardStatsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743099161641-2025-03-27T18:12:41.641Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users/handler.getDashboardStats",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-getDashboardStats",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetDashboardStatsLogGroup"
            ]
          },
          "GetCadminsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743099161641-2025-03-27T18:12:41.641Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cadmins/handler.listCadmins",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-getCadmins",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetCadminsLogGroup"
            ]
          },
          "CreateCadminLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743099161641-2025-03-27T18:12:41.641Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cadmins/handler.createCadmin",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-createCadmin",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateCadminLogGroup"
            ]
          },
          "UpdateCadminLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743099161641-2025-03-27T18:12:41.641Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cadmins/handler.updateCadmin",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-updateCadmin",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateCadminLogGroup"
            ]
          },
          "DeleteCadminLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743099161641-2025-03-27T18:12:41.641Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cadmins/handler.deleteCadmin",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-deleteCadmin",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteCadminLogGroup"
            ]
          },
          "GetCompaniesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743099161641-2025-03-27T18:12:41.641Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/companies/handler.listCompanies",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-getCompanies",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetCompaniesLogGroup"
            ]
          },
          "CreateCompanyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743099161641-2025-03-27T18:12:41.641Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/companies/handler.createCompany",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-createCompany",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateCompanyLogGroup"
            ]
          },
          "UpdateCompanyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743099161641-2025-03-27T18:12:41.641Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/companies/handler.editCompany",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-updateCompany",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateCompanyLogGroup"
            ]
          },
          "DeleteCompanyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743099161641-2025-03-27T18:12:41.641Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/companies/handler.deleteCompany",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-deleteCompany",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteCompanyLogGroup"
            ]
          },
          "LoginLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743099161641-2025-03-27T18:12:41.641Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/auth/handler.loginHandler",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-login",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LoginLogGroup"
            ]
          },
          "CreateDashcicleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743099161641-2025-03-27T18:12:41.641Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cycles/handler.createEvaluationCycle",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-create-cicle",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateDashcicleLogGroup"
            ]
          },
          "GetDashciclesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743099161641-2025-03-27T18:12:41.641Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cycles/handler.listCycles",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-get-cicles",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetDashciclesLogGroup"
            ]
          },
          "GetDashcicleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743099161641-2025-03-27T18:12:41.641Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cycles/handler.getCycle",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-get-cicle",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetDashcicleLogGroup"
            ]
          },
          "UpdateDashcicleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743099161641-2025-03-27T18:12:41.641Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cycles/handler.updateCycle",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-update-cicle",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateDashcicleLogGroup"
            ]
          },
          "DeleteDashcicleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743099161641-2025-03-27T18:12:41.641Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cycles/handler.deleteCycle",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-delete-cicle",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteDashcicleLogGroup"
            ]
          },
          "GetAssignedTestsByAuthIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743099161641-2025-03-27T18:12:41.641Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users-tests/handler.getAssignedTests",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-getAssignedTestsByAuthId",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAssignedTestsByAuthIdLogGroup"
            ]
          },
          "GetTestQuestionsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743099161641-2025-03-27T18:12:41.641Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users-tests/handler.getTestQuestions",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-getTestQuestions",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetTestQuestionsLogGroup"
            ]
          },
          "SubmitTestLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743099161641-2025-03-27T18:12:41.641Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users-tests/handler.submitTest",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-submitTest",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SubmitTestLogGroup"
            ]
          },
          "UpdateTestStatusLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743099161641-2025-03-27T18:12:41.641Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users-tests/handler.updateTestStatus",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-updateTestStatus",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateTestStatusLogGroup"
            ]
          },
          "GetTestsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743099161641-2025-03-27T18:12:41.641Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/tests/handler.getTests",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-getTests",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetTestsLogGroup"
            ]
          },
          "AssignTestLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1743099161641-2025-03-27T18:12:41.641Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/tests/handler.assignTest",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-assignTest",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AssignTestLogGroup"
            ]
          },
          "ListUsersLambdaVersion2n6g4DwYNadPEs4CgCktnbJJZkOioOoS7ZKqjG4v1yU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListUsersLambdaFunction"
              },
              "CodeSha256": "ANqzZ0ZO3xq/SCkFK+9DYXZ0DsLACOK8MvA9tFwtvpU="
            }
          },
          "CreateUserLambdaVersion3bL9jLDUHT86kEjzHVNsNsJHtCkZecqVV8YOiy0o": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateUserLambdaFunction"
              },
              "CodeSha256": "ANqzZ0ZO3xq/SCkFK+9DYXZ0DsLACOK8MvA9tFwtvpU="
            }
          },
          "EditUserLambdaVersionTf3cullhOAFUihu6xzy41aMacnKPtLDim7bQc0iwPgc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EditUserLambdaFunction"
              },
              "CodeSha256": "ANqzZ0ZO3xq/SCkFK+9DYXZ0DsLACOK8MvA9tFwtvpU="
            }
          },
          "DeleteUserLambdaVersionfU8kiAFKfeLctcNpapI3bIPDctryh7FWs76l8GQQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteUserLambdaFunction"
              },
              "CodeSha256": "ANqzZ0ZO3xq/SCkFK+9DYXZ0DsLACOK8MvA9tFwtvpU="
            }
          },
          "GetDashboardStatsLambdaVersionIjmWKfPdBwwbBE6UQjGYyBDXwkhAIEmbLa0gGbuG5I": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDashboardStatsLambdaFunction"
              },
              "CodeSha256": "ANqzZ0ZO3xq/SCkFK+9DYXZ0DsLACOK8MvA9tFwtvpU="
            }
          },
          "GetCadminsLambdaVersionybcjZSoatKSa7WU7Cfe6n6GrMihzuVBrP51Ns7YiYUk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetCadminsLambdaFunction"
              },
              "CodeSha256": "ANqzZ0ZO3xq/SCkFK+9DYXZ0DsLACOK8MvA9tFwtvpU="
            }
          },
          "CreateCadminLambdaVersion1kqDwjAzZ9H2Sd5NKlIfTALDGMoXIPI3O7IRf9Q4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateCadminLambdaFunction"
              },
              "CodeSha256": "ANqzZ0ZO3xq/SCkFK+9DYXZ0DsLACOK8MvA9tFwtvpU="
            }
          },
          "UpdateCadminLambdaVersionCmOHt1bTYSXkNbFR0WgE4nBbW9AgmzkfFnb7CIKm2Y": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateCadminLambdaFunction"
              },
              "CodeSha256": "ANqzZ0ZO3xq/SCkFK+9DYXZ0DsLACOK8MvA9tFwtvpU="
            }
          },
          "DeleteCadminLambdaVersionpeK52xw4YvXRWXjd6DsgApFwD60KnMEzK7NL5kVchM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteCadminLambdaFunction"
              },
              "CodeSha256": "ANqzZ0ZO3xq/SCkFK+9DYXZ0DsLACOK8MvA9tFwtvpU="
            }
          },
          "GetCompaniesLambdaVersionrfqMctE6FznLLtkuoSDdkWeZDMLSZZsE77LGjhl4I": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetCompaniesLambdaFunction"
              },
              "CodeSha256": "ANqzZ0ZO3xq/SCkFK+9DYXZ0DsLACOK8MvA9tFwtvpU="
            }
          },
          "CreateCompanyLambdaVersion8J7GSiNnN2suxO4DvACR4G5OxnHdF0s7BlC4eyd098": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateCompanyLambdaFunction"
              },
              "CodeSha256": "ANqzZ0ZO3xq/SCkFK+9DYXZ0DsLACOK8MvA9tFwtvpU="
            }
          },
          "UpdateCompanyLambdaVersionq6exlyW4ZfprYFbLaneIEFVjDe7DXTmxwZGkpzg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateCompanyLambdaFunction"
              },
              "CodeSha256": "ANqzZ0ZO3xq/SCkFK+9DYXZ0DsLACOK8MvA9tFwtvpU="
            }
          },
          "DeleteCompanyLambdaVersion4QUADIS7yLok3yX7hGXo0RBF1VoQjWqhz5CjufF0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteCompanyLambdaFunction"
              },
              "CodeSha256": "ANqzZ0ZO3xq/SCkFK+9DYXZ0DsLACOK8MvA9tFwtvpU="
            }
          },
          "LoginLambdaVersionRGvZpEM5avRrrHJYXVlC3wbAyENRITDmeKfYZVMacjw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoginLambdaFunction"
              },
              "CodeSha256": "ANqzZ0ZO3xq/SCkFK+9DYXZ0DsLACOK8MvA9tFwtvpU="
            }
          },
          "CreateDashcicleLambdaVersionJ63fFcaHLfj1y9stIPW6HppxPBCNeatuv3TUAGpQ8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateDashcicleLambdaFunction"
              },
              "CodeSha256": "ANqzZ0ZO3xq/SCkFK+9DYXZ0DsLACOK8MvA9tFwtvpU="
            }
          },
          "GetDashciclesLambdaVersionKiBH64TVMPPwz4wM652vDUAJTvLK8pUJN862iJaOSg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDashciclesLambdaFunction"
              },
              "CodeSha256": "ANqzZ0ZO3xq/SCkFK+9DYXZ0DsLACOK8MvA9tFwtvpU="
            }
          },
          "GetDashcicleLambdaVersionEDnKZyZ7kf52EEMmrxAz9bqVYOpmJwQoEvyLZodW8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDashcicleLambdaFunction"
              },
              "CodeSha256": "ANqzZ0ZO3xq/SCkFK+9DYXZ0DsLACOK8MvA9tFwtvpU="
            }
          },
          "UpdateDashcicleLambdaVersionESHNgQTZJyCRkCCC9Ch4CamJg3YlG56URnjMqth98": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateDashcicleLambdaFunction"
              },
              "CodeSha256": "ANqzZ0ZO3xq/SCkFK+9DYXZ0DsLACOK8MvA9tFwtvpU="
            }
          },
          "DeleteDashcicleLambdaVersionc7fiL2Cw6nnGyGFz80yawjxuh5KcLxMUwKaszBYEg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteDashcicleLambdaFunction"
              },
              "CodeSha256": "ANqzZ0ZO3xq/SCkFK+9DYXZ0DsLACOK8MvA9tFwtvpU="
            }
          },
          "GetAssignedTestsByAuthIdLambdaVersionXDqgAAMnoCrGDKG9m7WoM6dEu3S358CT0LQuhSCucjA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAssignedTestsByAuthIdLambdaFunction"
              },
              "CodeSha256": "ANqzZ0ZO3xq/SCkFK+9DYXZ0DsLACOK8MvA9tFwtvpU="
            }
          },
          "GetTestQuestionsLambdaVersionuta0TODZIpFVf3QrwXUINIgKlvy6faAyBCQZAphfpM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetTestQuestionsLambdaFunction"
              },
              "CodeSha256": "ANqzZ0ZO3xq/SCkFK+9DYXZ0DsLACOK8MvA9tFwtvpU="
            }
          },
          "SubmitTestLambdaVersionxn86Gj78FlURtrFjm61wn6W4GLiZgCZnjyl5xbtyA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SubmitTestLambdaFunction"
              },
              "CodeSha256": "ANqzZ0ZO3xq/SCkFK+9DYXZ0DsLACOK8MvA9tFwtvpU="
            }
          },
          "UpdateTestStatusLambdaVersionDU5T9UrLGVozUrm1pPfZql7OFqf2zZWDyFneuKdpU8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateTestStatusLambdaFunction"
              },
              "CodeSha256": "ANqzZ0ZO3xq/SCkFK+9DYXZ0DsLACOK8MvA9tFwtvpU="
            }
          },
          "GetTestsLambdaVersionwqLKonY8mgCtzI4M2uB2pNcIYx2c1mBImlCY8fjhg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetTestsLambdaFunction"
              },
              "CodeSha256": "ANqzZ0ZO3xq/SCkFK+9DYXZ0DsLACOK8MvA9tFwtvpU="
            }
          },
          "AssignTestLambdaVersionC0VD6CfvH6isYU2R3OAHdgnlC19U0YVBB932uFqo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AssignTestLambdaFunction"
              },
              "CodeSha256": "ANqzZ0ZO3xq/SCkFK+9DYXZ0DsLACOK8MvA9tFwtvpU="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-simotec-sls",
              "ProtocolType": "HTTP",
              "Tags": {
                "CLIENT": "simotec",
                "STAGE": "dev"
              },
              "CorsConfiguration": {
                "AllowHeaders": [
                  "*"
                ],
                "AllowMethods": [
                  "GET",
                  "POST",
                  "PUT",
                  "DELETE",
                  "PATCH",
                  "OPTIONS"
                ],
                "AllowOrigins": [
                  "*"
                ]
              }
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              },
              "Tags": {
                "CLIENT": "simotec",
                "STAGE": "dev"
              }
            }
          },
          "ListUsersLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationListUsers": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ListUsersLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetUsers": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /users",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationListUsers"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationListUsers"
          },
          "CreateUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostUsers": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /users",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateUser"
          },
          "EditUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EditUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEditUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"EditUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutUsersIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /users/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEditUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEditUser"
          },
          "DeleteUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteUsersIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /users/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteUser"
          },
          "GetDashboardStatsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDashboardStatsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetDashboardStats": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetDashboardStatsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetDashboardRegularDashusersCount": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /dashboard/regular-users/count",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetDashboardStats"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetDashboardStats"
          },
          "HttpApiRouteGetDashboardAssignedDashtestsCount": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /dashboard/assigned-tests/count",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetDashboardStats"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetDashboardStats"
          },
          "GetCadminsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetCadminsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetCadmins": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetCadminsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetCadmins": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /cadmins",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetCadmins"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetCadmins"
          },
          "CreateCadminLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateCadminLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateCadmin": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateCadminLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostCadmins": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /cadmins",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateCadmin"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateCadmin"
          },
          "UpdateCadminLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateCadminLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateCadmin": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateCadminLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutCadminsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /cadmins/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateCadmin"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateCadmin"
          },
          "DeleteCadminLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteCadminLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteCadmin": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteCadminLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteCadminsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /cadmins/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteCadmin"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteCadmin"
          },
          "GetCompaniesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetCompaniesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetCompanies": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetCompaniesLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetCompanies": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /companies",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetCompanies"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetCompanies"
          },
          "CreateCompanyLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateCompanyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateCompany": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateCompanyLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostCompanies": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /companies",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateCompany"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateCompany"
          },
          "UpdateCompanyLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateCompanyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateCompany": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateCompanyLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutCompaniesIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /companies/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateCompany"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateCompany"
          },
          "DeleteCompanyLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteCompanyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteCompany": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteCompanyLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteCompaniesIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /companies/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteCompany"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteCompany"
          },
          "LoginLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoginLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationLogin": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"LoginLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostAuthLogin": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /auth/login",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationLogin"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationLogin"
          },
          "CreateDashcicleLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateDashcicleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateDashcicle": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateDashcicleLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostCycles": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /cycles",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateDashcicle"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateDashcicle"
          },
          "GetDashciclesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDashciclesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetDashcicles": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetDashciclesLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetCycles": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /cycles",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetDashcicles"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetDashcicles"
          },
          "GetDashcicleLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDashcicleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetDashcicle": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetDashcicleLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetCyclesIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /cycles/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetDashcicle"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetDashcicle"
          },
          "UpdateDashcicleLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateDashcicleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateDashcicle": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateDashcicleLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutCyclesIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /cycles/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateDashcicle"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateDashcicle"
          },
          "DeleteDashcicleLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteDashcicleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteDashcicle": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteDashcicleLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteCyclesIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /cycles/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteDashcicle"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteDashcicle"
          },
          "GetAssignedTestsByAuthIdLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAssignedTestsByAuthIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetAssignedTestsByAuthId": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetAssignedTestsByAuthIdLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetAssignedDashtestsAuthDashuserAuthuseridVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /assigned-tests/auth-user/{auth_user_id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetAssignedTestsByAuthId"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetAssignedTestsByAuthId"
          },
          "GetTestQuestionsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetTestQuestionsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetTestQuestions": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetTestQuestionsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetUserDashtestsTestidVarQuestions": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /user-tests/{test_id}/questions",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetTestQuestions"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetTestQuestions"
          },
          "SubmitTestLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SubmitTestLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationSubmitTest": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SubmitTestLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostUserDashtestsTestidVarSubmit": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /user-tests/{test_id}/submit",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSubmitTest"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSubmitTest"
          },
          "UpdateTestStatusLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateTestStatusLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateTestStatus": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateTestStatusLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePatchUserDashtestsAssignedtestidVarStatus": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /user-tests/{assigned_test_id}/status",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateTestStatus"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateTestStatus"
          },
          "GetTestsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetTestsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetTests": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetTestsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetTests": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /tests",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetTests"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetTests"
          },
          "AssignTestLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AssignTestLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationAssignTest": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AssignTestLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostTestsAssign": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /tests/assign",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationAssignTest"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationAssignTest"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-2-31c921f8-650a",
            "Export": {
              "Name": "sls-simotec-sls-dev-ServerlessDeploymentBucketName"
            }
          },
          "ListUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListUsersLambdaVersion2n6g4DwYNadPEs4CgCktnbJJZkOioOoS7ZKqjG4v1yU"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-ListUsersLambdaFunctionQualifiedArn"
            }
          },
          "CreateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateUserLambdaVersion3bL9jLDUHT86kEjzHVNsNsJHtCkZecqVV8YOiy0o"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-CreateUserLambdaFunctionQualifiedArn"
            }
          },
          "EditUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EditUserLambdaVersionTf3cullhOAFUihu6xzy41aMacnKPtLDim7bQc0iwPgc"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-EditUserLambdaFunctionQualifiedArn"
            }
          },
          "DeleteUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteUserLambdaVersionfU8kiAFKfeLctcNpapI3bIPDctryh7FWs76l8GQQ"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-DeleteUserLambdaFunctionQualifiedArn"
            }
          },
          "GetDashboardStatsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDashboardStatsLambdaVersionIjmWKfPdBwwbBE6UQjGYyBDXwkhAIEmbLa0gGbuG5I"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetDashboardStatsLambdaFunctionQualifiedArn"
            }
          },
          "GetCadminsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetCadminsLambdaVersionybcjZSoatKSa7WU7Cfe6n6GrMihzuVBrP51Ns7YiYUk"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetCadminsLambdaFunctionQualifiedArn"
            }
          },
          "CreateCadminLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateCadminLambdaVersion1kqDwjAzZ9H2Sd5NKlIfTALDGMoXIPI3O7IRf9Q4"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-CreateCadminLambdaFunctionQualifiedArn"
            }
          },
          "UpdateCadminLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateCadminLambdaVersionCmOHt1bTYSXkNbFR0WgE4nBbW9AgmzkfFnb7CIKm2Y"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-UpdateCadminLambdaFunctionQualifiedArn"
            }
          },
          "DeleteCadminLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteCadminLambdaVersionpeK52xw4YvXRWXjd6DsgApFwD60KnMEzK7NL5kVchM"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-DeleteCadminLambdaFunctionQualifiedArn"
            }
          },
          "GetCompaniesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetCompaniesLambdaVersionrfqMctE6FznLLtkuoSDdkWeZDMLSZZsE77LGjhl4I"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetCompaniesLambdaFunctionQualifiedArn"
            }
          },
          "CreateCompanyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateCompanyLambdaVersion8J7GSiNnN2suxO4DvACR4G5OxnHdF0s7BlC4eyd098"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-CreateCompanyLambdaFunctionQualifiedArn"
            }
          },
          "UpdateCompanyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateCompanyLambdaVersionq6exlyW4ZfprYFbLaneIEFVjDe7DXTmxwZGkpzg"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-UpdateCompanyLambdaFunctionQualifiedArn"
            }
          },
          "DeleteCompanyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteCompanyLambdaVersion4QUADIS7yLok3yX7hGXo0RBF1VoQjWqhz5CjufF0"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-DeleteCompanyLambdaFunctionQualifiedArn"
            }
          },
          "LoginLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoginLambdaVersionRGvZpEM5avRrrHJYXVlC3wbAyENRITDmeKfYZVMacjw"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-LoginLambdaFunctionQualifiedArn"
            }
          },
          "CreateDashcicleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateDashcicleLambdaVersionJ63fFcaHLfj1y9stIPW6HppxPBCNeatuv3TUAGpQ8"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-CreateDashcicleLambdaFunctionQualifiedArn"
            }
          },
          "GetDashciclesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDashciclesLambdaVersionKiBH64TVMPPwz4wM652vDUAJTvLK8pUJN862iJaOSg"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetDashciclesLambdaFunctionQualifiedArn"
            }
          },
          "GetDashcicleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDashcicleLambdaVersionEDnKZyZ7kf52EEMmrxAz9bqVYOpmJwQoEvyLZodW8"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetDashcicleLambdaFunctionQualifiedArn"
            }
          },
          "UpdateDashcicleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateDashcicleLambdaVersionESHNgQTZJyCRkCCC9Ch4CamJg3YlG56URnjMqth98"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-UpdateDashcicleLambdaFunctionQualifiedArn"
            }
          },
          "DeleteDashcicleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteDashcicleLambdaVersionc7fiL2Cw6nnGyGFz80yawjxuh5KcLxMUwKaszBYEg"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-DeleteDashcicleLambdaFunctionQualifiedArn"
            }
          },
          "GetAssignedTestsByAuthIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAssignedTestsByAuthIdLambdaVersionXDqgAAMnoCrGDKG9m7WoM6dEu3S358CT0LQuhSCucjA"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetAssignedTestsByAuthIdLambdaFunctionQualifiedArn"
            }
          },
          "GetTestQuestionsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetTestQuestionsLambdaVersionuta0TODZIpFVf3QrwXUINIgKlvy6faAyBCQZAphfpM"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetTestQuestionsLambdaFunctionQualifiedArn"
            }
          },
          "SubmitTestLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SubmitTestLambdaVersionxn86Gj78FlURtrFjm61wn6W4GLiZgCZnjyl5xbtyA"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-SubmitTestLambdaFunctionQualifiedArn"
            }
          },
          "UpdateTestStatusLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateTestStatusLambdaVersionDU5T9UrLGVozUrm1pPfZql7OFqf2zZWDyFneuKdpU8"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-UpdateTestStatusLambdaFunctionQualifiedArn"
            }
          },
          "GetTestsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetTestsLambdaVersionwqLKonY8mgCtzI4M2uB2pNcIYx2c1mBImlCY8fjhg"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetTestsLambdaFunctionQualifiedArn"
            }
          },
          "AssignTestLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AssignTestLambdaVersionC0VD6CfvH6isYU2R3OAHdgnlC19U0YVBB932uFqo"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-AssignTestLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-HttpApiUrl"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": null,
    "pluginsData": {},
    "functions": {
      "listUsers": {
        "handler": "src/maintainers/users/handler.listUsers",
        "events": [
          {
            "httpApi": {
              "path": "/users",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/users"
          }
        ],
        "name": "simotec-sls-dev-listUsers",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "ListUsersLambdaVersion2n6g4DwYNadPEs4CgCktnbJJZkOioOoS7ZKqjG4v1yU"
      },
      "createUser": {
        "handler": "src/maintainers/users/handler.createUser",
        "events": [
          {
            "httpApi": {
              "path": "/users",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/users"
          }
        ],
        "name": "simotec-sls-dev-createUser",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "CreateUserLambdaVersion3bL9jLDUHT86kEjzHVNsNsJHtCkZecqVV8YOiy0o"
      },
      "editUser": {
        "handler": "src/maintainers/users/handler.editUser",
        "events": [
          {
            "httpApi": {
              "path": "/users/{id}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/users/{id}"
          }
        ],
        "name": "simotec-sls-dev-editUser",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "EditUserLambdaVersionTf3cullhOAFUihu6xzy41aMacnKPtLDim7bQc0iwPgc"
      },
      "deleteUser": {
        "handler": "src/maintainers/users/handler.deleteUser",
        "events": [
          {
            "httpApi": {
              "path": "/users/{id}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/users/{id}"
          }
        ],
        "name": "simotec-sls-dev-deleteUser",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "DeleteUserLambdaVersionfU8kiAFKfeLctcNpapI3bIPDctryh7FWs76l8GQQ"
      },
      "getDashboardStats": {
        "handler": "src/maintainers/users/handler.getDashboardStats",
        "events": [
          {
            "httpApi": {
              "path": "/dashboard/regular-users/count",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/dashboard/regular-users/count"
          },
          {
            "httpApi": {
              "path": "/dashboard/assigned-tests/count",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/dashboard/assigned-tests/count"
          }
        ],
        "name": "simotec-sls-dev-getDashboardStats",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetDashboardStatsLambdaVersionIjmWKfPdBwwbBE6UQjGYyBDXwkhAIEmbLa0gGbuG5I"
      },
      "getCadmins": {
        "handler": "src/maintainers/cadmins/handler.listCadmins",
        "events": [
          {
            "httpApi": {
              "path": "/cadmins",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/cadmins"
          }
        ],
        "name": "simotec-sls-dev-getCadmins",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetCadminsLambdaVersionybcjZSoatKSa7WU7Cfe6n6GrMihzuVBrP51Ns7YiYUk"
      },
      "createCadmin": {
        "handler": "src/maintainers/cadmins/handler.createCadmin",
        "events": [
          {
            "httpApi": {
              "path": "/cadmins",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/cadmins"
          }
        ],
        "name": "simotec-sls-dev-createCadmin",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "CreateCadminLambdaVersion1kqDwjAzZ9H2Sd5NKlIfTALDGMoXIPI3O7IRf9Q4"
      },
      "updateCadmin": {
        "handler": "src/maintainers/cadmins/handler.updateCadmin",
        "events": [
          {
            "httpApi": {
              "path": "/cadmins/{id}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/cadmins/{id}"
          }
        ],
        "name": "simotec-sls-dev-updateCadmin",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "UpdateCadminLambdaVersionCmOHt1bTYSXkNbFR0WgE4nBbW9AgmzkfFnb7CIKm2Y"
      },
      "deleteCadmin": {
        "handler": "src/maintainers/cadmins/handler.deleteCadmin",
        "events": [
          {
            "httpApi": {
              "path": "/cadmins/{id}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/cadmins/{id}"
          }
        ],
        "name": "simotec-sls-dev-deleteCadmin",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "DeleteCadminLambdaVersionpeK52xw4YvXRWXjd6DsgApFwD60KnMEzK7NL5kVchM"
      },
      "getCompanies": {
        "handler": "src/maintainers/companies/handler.listCompanies",
        "events": [
          {
            "httpApi": {
              "path": "/companies",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/companies"
          }
        ],
        "name": "simotec-sls-dev-getCompanies",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetCompaniesLambdaVersionrfqMctE6FznLLtkuoSDdkWeZDMLSZZsE77LGjhl4I"
      },
      "createCompany": {
        "handler": "src/maintainers/companies/handler.createCompany",
        "events": [
          {
            "httpApi": {
              "path": "/companies",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/companies"
          }
        ],
        "name": "simotec-sls-dev-createCompany",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "CreateCompanyLambdaVersion8J7GSiNnN2suxO4DvACR4G5OxnHdF0s7BlC4eyd098"
      },
      "updateCompany": {
        "handler": "src/maintainers/companies/handler.editCompany",
        "events": [
          {
            "httpApi": {
              "path": "/companies/{id}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/companies/{id}"
          }
        ],
        "name": "simotec-sls-dev-updateCompany",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "UpdateCompanyLambdaVersionq6exlyW4ZfprYFbLaneIEFVjDe7DXTmxwZGkpzg"
      },
      "deleteCompany": {
        "handler": "src/maintainers/companies/handler.deleteCompany",
        "events": [
          {
            "httpApi": {
              "path": "/companies/{id}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/companies/{id}"
          }
        ],
        "name": "simotec-sls-dev-deleteCompany",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "DeleteCompanyLambdaVersion4QUADIS7yLok3yX7hGXo0RBF1VoQjWqhz5CjufF0"
      },
      "login": {
        "handler": "src/maintainers/auth/handler.loginHandler",
        "events": [
          {
            "httpApi": {
              "path": "/auth/login",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/auth/login"
          }
        ],
        "name": "simotec-sls-dev-login",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "LoginLambdaVersionRGvZpEM5avRrrHJYXVlC3wbAyENRITDmeKfYZVMacjw"
      },
      "create-cicle": {
        "handler": "src/maintainers/cycles/handler.createEvaluationCycle",
        "events": [
          {
            "httpApi": {
              "path": "/cycles",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/cycles"
          }
        ],
        "name": "simotec-sls-dev-create-cicle",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "CreateDashcicleLambdaVersionJ63fFcaHLfj1y9stIPW6HppxPBCNeatuv3TUAGpQ8"
      },
      "get-cicles": {
        "handler": "src/maintainers/cycles/handler.listCycles",
        "events": [
          {
            "httpApi": {
              "path": "/cycles",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/cycles"
          }
        ],
        "name": "simotec-sls-dev-get-cicles",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetDashciclesLambdaVersionKiBH64TVMPPwz4wM652vDUAJTvLK8pUJN862iJaOSg"
      },
      "get-cicle": {
        "handler": "src/maintainers/cycles/handler.getCycle",
        "events": [
          {
            "httpApi": {
              "path": "/cycles/{id}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/cycles/{id}"
          }
        ],
        "name": "simotec-sls-dev-get-cicle",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetDashcicleLambdaVersionEDnKZyZ7kf52EEMmrxAz9bqVYOpmJwQoEvyLZodW8"
      },
      "update-cicle": {
        "handler": "src/maintainers/cycles/handler.updateCycle",
        "events": [
          {
            "httpApi": {
              "path": "/cycles/{id}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/cycles/{id}"
          }
        ],
        "name": "simotec-sls-dev-update-cicle",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "UpdateDashcicleLambdaVersionESHNgQTZJyCRkCCC9Ch4CamJg3YlG56URnjMqth98"
      },
      "delete-cicle": {
        "handler": "src/maintainers/cycles/handler.deleteCycle",
        "events": [
          {
            "httpApi": {
              "path": "/cycles/{id}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/cycles/{id}"
          }
        ],
        "name": "simotec-sls-dev-delete-cicle",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "DeleteDashcicleLambdaVersionc7fiL2Cw6nnGyGFz80yawjxuh5KcLxMUwKaszBYEg"
      },
      "getAssignedTestsByAuthId": {
        "handler": "src/maintainers/users-tests/handler.getAssignedTests",
        "events": [
          {
            "httpApi": {
              "path": "/assigned-tests/auth-user/{auth_user_id}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/assigned-tests/auth-user/{auth_user_id}"
          }
        ],
        "name": "simotec-sls-dev-getAssignedTestsByAuthId",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetAssignedTestsByAuthIdLambdaVersionXDqgAAMnoCrGDKG9m7WoM6dEu3S358CT0LQuhSCucjA"
      },
      "getTestQuestions": {
        "handler": "src/maintainers/users-tests/handler.getTestQuestions",
        "events": [
          {
            "httpApi": {
              "path": "/user-tests/{test_id}/questions",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/user-tests/{test_id}/questions"
          }
        ],
        "name": "simotec-sls-dev-getTestQuestions",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetTestQuestionsLambdaVersionuta0TODZIpFVf3QrwXUINIgKlvy6faAyBCQZAphfpM"
      },
      "submitTest": {
        "handler": "src/maintainers/users-tests/handler.submitTest",
        "events": [
          {
            "httpApi": {
              "path": "/user-tests/{test_id}/submit",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/user-tests/{test_id}/submit"
          }
        ],
        "name": "simotec-sls-dev-submitTest",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "SubmitTestLambdaVersionxn86Gj78FlURtrFjm61wn6W4GLiZgCZnjyl5xbtyA"
      },
      "updateTestStatus": {
        "handler": "src/maintainers/users-tests/handler.updateTestStatus",
        "events": [
          {
            "httpApi": {
              "path": "/user-tests/{assigned_test_id}/status",
              "method": "patch"
            },
            "resolvedMethod": "PATCH",
            "resolvedPath": "/user-tests/{assigned_test_id}/status"
          }
        ],
        "name": "simotec-sls-dev-updateTestStatus",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "UpdateTestStatusLambdaVersionDU5T9UrLGVozUrm1pPfZql7OFqf2zZWDyFneuKdpU8"
      },
      "getTests": {
        "handler": "src/maintainers/tests/handler.getTests",
        "events": [
          {
            "httpApi": {
              "path": "/tests",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/tests"
          }
        ],
        "name": "simotec-sls-dev-getTests",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetTestsLambdaVersionwqLKonY8mgCtzI4M2uB2pNcIYx2c1mBImlCY8fjhg"
      },
      "assignTest": {
        "handler": "src/maintainers/tests/handler.assignTest",
        "events": [
          {
            "httpApi": {
              "path": "/tests/assign",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/tests/assign"
          }
        ],
        "name": "simotec-sls-dev-assignTest",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "AssignTestLambdaVersionC0VD6CfvH6isYU2R3OAHdgnlC19U0YVBB932uFqo"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless",
    "initialServerlessConfig": {
      "service": "simotec-sls",
      "frameworkVersion": "4",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "custom": null
    },
    "appId": null,
    "orgId": null,
    "layers": {},
    "artifact": "C:\\Users\\alfre\\OneDrive\\Documentos\\GitHub\\Proyecto\\simotec-sls-develop\\.serverless\\simotec-sls.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/simotec-sls/dev/1743099161641-2025-03-27T18:12:41.641Z",
    "artifact": "simotec-sls.zip"
  }
}