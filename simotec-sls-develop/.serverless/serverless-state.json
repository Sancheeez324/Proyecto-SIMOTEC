{
  "service": {
    "service": "simotec-sls",
    "serviceObject": {
      "name": "simotec-sls"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "timeout": 20,
      "memorySize": 3000,
      "stage": "dev",
      "region": "us-east-2",
      "tags": {
        "CLIENT": "simotec",
        "STAGE": "dev"
      },
      "httpApi": {
        "cors": {
          "allowedOrigins": [
            "*"
          ],
          "allowedHeaders": [
            "*"
          ],
          "allowedMethods": [
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "PATCH",
            "OPTIONS"
          ]
        }
      },
      "environment": {
        "TZ": "America/Santiago",
        "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
        "DB_USER": "admin",
        "DB_PASSWORD": "Hhfc2102#",
        "DB_NAME": "simotec",
        "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
        "JWT_EXPIRES_IN": "1d",
        "CORS_ORIGIN": "http://localhost:5173"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "rds:DescribeDBInstances",
            "rds:Connect"
          ],
          "Resource": "*"
        }
      ],
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ListUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-listUsers"
            }
          },
          "CreateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-createUser"
            }
          },
          "EditUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-editUser"
            }
          },
          "DeleteUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-deleteUser"
            }
          },
          "GetDashboardStatsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-getDashboardStats"
            }
          },
          "GetCadminsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-getCadmins"
            }
          },
          "CreateCadminLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-createCadmin"
            }
          },
          "UpdateCadminLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-updateCadmin"
            }
          },
          "DeleteCadminLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-deleteCadmin"
            }
          },
          "GetCompaniesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-getCompanies"
            }
          },
          "CreateCompanyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-createCompany"
            }
          },
          "UpdateCompanyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-updateCompany"
            }
          },
          "DeleteCompanyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-deleteCompany"
            }
          },
          "LoginLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-login"
            }
          },
          "CreateDashcicleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-create-cicle"
            }
          },
          "GetDashciclesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-get-cicles"
            }
          },
          "GetDashcicleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-get-cicle"
            }
          },
          "UpdateDashcicleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-update-cicle"
            }
          },
          "DeleteDashcicleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-delete-cicle"
            }
          },
          "StartDashtestLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-start-test"
            }
          },
          "SaveDashtestDashprogressLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-save-test-progress"
            }
          },
          "GetDashtestDashprogressLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-get-test-progress"
            }
          },
          "ConfirmDashtestDashcompletionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/simotec-sls-dev-confirm-test-completion"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "simotec-sls",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/simotec-sls-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/simotec-sls-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "simotec-sls",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "ListUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users/handler.listUsers",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-listUsers",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListUsersLogGroup"
            ]
          },
          "CreateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users/handler.createUser",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-createUser",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateUserLogGroup"
            ]
          },
          "EditUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users/handler.editUser",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-editUser",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EditUserLogGroup"
            ]
          },
          "DeleteUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users/handler.deleteUser",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-deleteUser",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteUserLogGroup"
            ]
          },
          "GetDashboardStatsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users/handler.getDashboardStats",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-getDashboardStats",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetDashboardStatsLogGroup"
            ]
          },
          "GetCadminsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cadmins/handler.listCadmins",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-getCadmins",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetCadminsLogGroup"
            ]
          },
          "CreateCadminLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cadmins/handler.createCadmin",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-createCadmin",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateCadminLogGroup"
            ]
          },
          "UpdateCadminLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cadmins/handler.updateCadmin",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-updateCadmin",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateCadminLogGroup"
            ]
          },
          "DeleteCadminLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cadmins/handler.deleteCadmin",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-deleteCadmin",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteCadminLogGroup"
            ]
          },
          "GetCompaniesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/companies/handler.listCompanies",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-getCompanies",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetCompaniesLogGroup"
            ]
          },
          "CreateCompanyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/companies/handler.createCompany",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-createCompany",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateCompanyLogGroup"
            ]
          },
          "UpdateCompanyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/companies/handler.editCompany",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-updateCompany",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateCompanyLogGroup"
            ]
          },
          "DeleteCompanyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/companies/handler.deleteCompany",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-deleteCompany",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteCompanyLogGroup"
            ]
          },
          "LoginLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/auth/handler.loginHandler",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-login",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LoginLogGroup"
            ]
          },
          "CreateDashcicleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cycles/handler.createEvaluationCycle",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-create-cicle",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateDashcicleLogGroup"
            ]
          },
          "GetDashciclesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cycles/handler.listCycles",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-get-cicles",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetDashciclesLogGroup"
            ]
          },
          "GetDashcicleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cycles/handler.getCycle",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-get-cicle",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetDashcicleLogGroup"
            ]
          },
          "UpdateDashcicleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cycles/handler.updateCycle",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-update-cicle",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateDashcicleLogGroup"
            ]
          },
          "DeleteDashcicleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/cycles/handler.deleteCycle",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-delete-cicle",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteDashcicleLogGroup"
            ]
          },
          "StartDashtestLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users-tests/handler.startTest",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-start-test",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "StartDashtestLogGroup"
            ]
          },
          "SaveDashtestDashprogressLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users-tests/handler.saveTestProgress",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-save-test-progress",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SaveDashtestDashprogressLogGroup"
            ]
          },
          "GetDashtestDashprogressLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users-tests/handler.getTestProgress",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-get-test-progress",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetDashtestDashprogressLogGroup"
            ]
          },
          "ConfirmDashtestDashcompletionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-31c921f8-650a",
                "S3Key": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z/simotec-sls.zip"
              },
              "Handler": "src/maintainers/users-tests/handler.confirmTestCompletion",
              "Runtime": "nodejs20.x",
              "FunctionName": "simotec-sls-dev-confirm-test-completion",
              "MemorySize": 3000,
              "Timeout": 20,
              "Tags": [
                {
                  "Key": "CLIENT",
                  "Value": "simotec"
                },
                {
                  "Key": "STAGE",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "TZ": "America/Santiago",
                  "DB_HOST": "simotec-bdfinal.cluster-clc8aqogs1v5.us-east-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "Hhfc2102#",
                  "DB_NAME": "simotec",
                  "JWT_SECRET": "dQORnAaolT7AsVfUfSoq9pDcYQ5LxbEC",
                  "JWT_EXPIRES_IN": "1d",
                  "CORS_ORIGIN": "http://localhost:5173"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ConfirmDashtestDashcompletionLogGroup"
            ]
          },
          "ListUsersLambdaVersionYifuTAK2DQCayRAiSN4tMA9HY6Du9xsAMs0aRIhz0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListUsersLambdaFunction"
              },
              "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
            }
          },
          "CreateUserLambdaVersionMgpHQ6qyX7hvZZggBd9TsP8kBsU5A9qJGiUpka8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateUserLambdaFunction"
              },
              "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
            }
          },
          "EditUserLambdaVersion3nYpBgp3JZLTzmNkqvyRj1e3vl5eMlV7dwRcNoQ6yk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EditUserLambdaFunction"
              },
              "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
            }
          },
          "DeleteUserLambdaVersion6KrSKWH8248jD8jHnAnYAICH0WBLbugriH1XC2qynY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteUserLambdaFunction"
              },
              "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
            }
          },
          "GetDashboardStatsLambdaVersionhbFYz1e3g9ddnz9yEv0smrwTyBIrpBZ4hnKLEWjTRY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDashboardStatsLambdaFunction"
              },
              "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
            }
          },
          "GetCadminsLambdaVersionYevjSIzxlumiHlOJ75jioPAuI8yMFLSp6Jn2vopbeXE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetCadminsLambdaFunction"
              },
              "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
            }
          },
          "CreateCadminLambdaVersionf4nssFwdFdgMchqYRCpZkxaEtJFq5EanildPvDopw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateCadminLambdaFunction"
              },
              "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
            }
          },
          "UpdateCadminLambdaVersionodCBCEqKi1KxEhSsJOpNE4CzQoyG3whWSxuxvYAfk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateCadminLambdaFunction"
              },
              "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
            }
          },
          "DeleteCadminLambdaVersionBg7yt9AdqQA18cpA0CQcF43mISsTsNO4ZBlw2escFc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteCadminLambdaFunction"
              },
              "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
            }
          },
          "GetCompaniesLambdaVersionRzcidZf13nhsGTq0njKC3CHfaNIyOOqvNUiwc2Mvg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetCompaniesLambdaFunction"
              },
              "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
            }
          },
          "CreateCompanyLambdaVersionLkoiNv7mq2YpKxGPbcs0RXU3ne0G02hHjTPtaWYxVQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateCompanyLambdaFunction"
              },
              "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
            }
          },
          "UpdateCompanyLambdaVersionOnwLmtZM2HslUZnHISsX6tNZ9vYyQcPUhJDVemoynw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateCompanyLambdaFunction"
              },
              "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
            }
          },
          "DeleteCompanyLambdaVersionjOgs4lKtQUEQHpdD44HjpcsiR01foV4QATrLP26p5A": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteCompanyLambdaFunction"
              },
              "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
            }
          },
          "LoginLambdaVersionYYzAEr5GPJu2TR40SAY8P2kLVgCr6anKruNvNNIyM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoginLambdaFunction"
              },
              "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
            }
          },
          "CreateDashcicleLambdaVersionhhJzPJ9IfUwB5rCC8FOCYT6633dpHgVlDRAoT4ps": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateDashcicleLambdaFunction"
              },
              "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
            }
          },
          "GetDashciclesLambdaVersionld48J87tyhOZ8OOubHBSIyTTEl6m4cMShzvv0NBdEV8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDashciclesLambdaFunction"
              },
              "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
            }
          },
          "GetDashcicleLambdaVersionNv5lT1T02y3NtMkByrbzN3aJ9wOca5ZrGbKxqFevSE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDashcicleLambdaFunction"
              },
              "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
            }
          },
          "UpdateDashcicleLambdaVersionxiahHFY8QwxEMy60i2foL3m0twym0GqAGixfnxfxU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateDashcicleLambdaFunction"
              },
              "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
            }
          },
          "DeleteDashcicleLambdaVersionwbn4T5SLb1HJsgUMxWg1Eptjq2pSRllDRCTTWsuGo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteDashcicleLambdaFunction"
              },
              "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
            }
          },
          "StartDashtestLambdaVersionWpuGFTqSGX6eETFjlfHVq1n7ixFbxCTbvTJztteVpN8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "StartDashtestLambdaFunction"
              },
              "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
            }
          },
          "SaveDashtestDashprogressLambdaVersionx1LJwAtZBDeKBwVr6qTkf10zis52OLhsAYnMtBAz5U": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SaveDashtestDashprogressLambdaFunction"
              },
              "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
            }
          },
          "GetDashtestDashprogressLambdaVersionqBPQD4RZX8TyoxW7aORmdqQ0rC3uiCceZb2Bbv6ris": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDashtestDashprogressLambdaFunction"
              },
              "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
            }
          },
          "ConfirmDashtestDashcompletionLambdaVersionacoq0alvEtin5dr1mA6848xiC3zolD8XheENpQe26sM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ConfirmDashtestDashcompletionLambdaFunction"
              },
              "CodeSha256": "tm4IDe2K556A3Xc78Fj3D3gZvz/PXWf8bB5qKLhqwtg="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-simotec-sls",
              "ProtocolType": "HTTP",
              "Tags": {
                "CLIENT": "simotec",
                "STAGE": "dev"
              },
              "CorsConfiguration": {
                "AllowHeaders": [
                  "*"
                ],
                "AllowMethods": [
                  "GET",
                  "POST",
                  "PUT",
                  "DELETE",
                  "PATCH",
                  "OPTIONS"
                ],
                "AllowOrigins": [
                  "*"
                ]
              }
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              },
              "Tags": {
                "CLIENT": "simotec",
                "STAGE": "dev"
              }
            }
          },
          "ListUsersLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationListUsers": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ListUsersLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetUsers": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /users",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationListUsers"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationListUsers"
          },
          "CreateUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostUsers": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /users",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateUser"
          },
          "EditUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EditUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEditUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"EditUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutUsersIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /users/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEditUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEditUser"
          },
          "DeleteUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteUsersIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /users/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteUser"
          },
          "GetDashboardStatsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDashboardStatsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetDashboardStats": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetDashboardStatsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetDashboardRegularDashusersCount": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /dashboard/regular-users/count",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetDashboardStats"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetDashboardStats"
          },
          "HttpApiRouteGetDashboardAssignedDashtestsCount": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /dashboard/assigned-tests/count",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetDashboardStats"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetDashboardStats"
          },
          "GetCadminsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetCadminsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetCadmins": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetCadminsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetCadmins": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /cadmins",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetCadmins"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetCadmins"
          },
          "CreateCadminLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateCadminLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateCadmin": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateCadminLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostCadmins": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /cadmins",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateCadmin"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateCadmin"
          },
          "UpdateCadminLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateCadminLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateCadmin": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateCadminLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutCadminsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /cadmins/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateCadmin"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateCadmin"
          },
          "DeleteCadminLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteCadminLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteCadmin": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteCadminLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteCadminsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /cadmins/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteCadmin"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteCadmin"
          },
          "GetCompaniesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetCompaniesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetCompanies": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetCompaniesLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetCompanies": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /companies",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetCompanies"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetCompanies"
          },
          "CreateCompanyLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateCompanyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateCompany": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateCompanyLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostCompanies": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /companies",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateCompany"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateCompany"
          },
          "UpdateCompanyLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateCompanyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateCompany": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateCompanyLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutCompaniesIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /companies/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateCompany"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateCompany"
          },
          "DeleteCompanyLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteCompanyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteCompany": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteCompanyLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteCompaniesIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /companies/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteCompany"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteCompany"
          },
          "LoginLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoginLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationLogin": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"LoginLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostAuthLogin": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /auth/login",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationLogin"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationLogin"
          },
          "CreateDashcicleLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateDashcicleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateDashcicle": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateDashcicleLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostCycles": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /cycles",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateDashcicle"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateDashcicle"
          },
          "GetDashciclesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDashciclesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetDashcicles": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetDashciclesLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetCycles": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /cycles",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetDashcicles"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetDashcicles"
          },
          "GetDashcicleLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDashcicleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetDashcicle": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetDashcicleLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetCyclesIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /cycles/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetDashcicle"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetDashcicle"
          },
          "UpdateDashcicleLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateDashcicleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateDashcicle": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateDashcicleLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutCyclesIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /cycles/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateDashcicle"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateDashcicle"
          },
          "DeleteDashcicleLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteDashcicleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteDashcicle": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteDashcicleLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteCyclesIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /cycles/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteDashcicle"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteDashcicle"
          },
          "StartDashtestLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "StartDashtestLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationStartDashtest": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"StartDashtestLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostUsersDashtests": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /users-tests",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationStartDashtest"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationStartDashtest"
          },
          "SaveDashtestDashprogressLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SaveDashtestDashprogressLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationSaveDashtestDashprogress": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SaveDashtestDashprogressLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutUsersDashtestsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /users-tests/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSaveDashtestDashprogress"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSaveDashtestDashprogress"
          },
          "GetDashtestDashprogressLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDashtestDashprogressLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetDashtestDashprogress": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetDashtestDashprogressLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostUsersDashtestsTestDashprogress": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /users-tests/test-progress",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetDashtestDashprogress"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetDashtestDashprogress"
          },
          "ConfirmDashtestDashcompletionLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ConfirmDashtestDashcompletionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationConfirmDashtestDashcompletion": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ConfirmDashtestDashcompletionLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostComfirmDashtestDashcompleted": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /comfirm-test-completed",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationConfirmDashtestDashcompletion"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationConfirmDashtestDashcompletion"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-2-31c921f8-650a",
            "Export": {
              "Name": "sls-simotec-sls-dev-ServerlessDeploymentBucketName"
            }
          },
          "ListUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListUsersLambdaVersionYifuTAK2DQCayRAiSN4tMA9HY6Du9xsAMs0aRIhz0"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-ListUsersLambdaFunctionQualifiedArn"
            }
          },
          "CreateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateUserLambdaVersionMgpHQ6qyX7hvZZggBd9TsP8kBsU5A9qJGiUpka8"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-CreateUserLambdaFunctionQualifiedArn"
            }
          },
          "EditUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EditUserLambdaVersion3nYpBgp3JZLTzmNkqvyRj1e3vl5eMlV7dwRcNoQ6yk"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-EditUserLambdaFunctionQualifiedArn"
            }
          },
          "DeleteUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteUserLambdaVersion6KrSKWH8248jD8jHnAnYAICH0WBLbugriH1XC2qynY"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-DeleteUserLambdaFunctionQualifiedArn"
            }
          },
          "GetDashboardStatsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDashboardStatsLambdaVersionhbFYz1e3g9ddnz9yEv0smrwTyBIrpBZ4hnKLEWjTRY"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetDashboardStatsLambdaFunctionQualifiedArn"
            }
          },
          "GetCadminsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetCadminsLambdaVersionYevjSIzxlumiHlOJ75jioPAuI8yMFLSp6Jn2vopbeXE"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetCadminsLambdaFunctionQualifiedArn"
            }
          },
          "CreateCadminLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateCadminLambdaVersionf4nssFwdFdgMchqYRCpZkxaEtJFq5EanildPvDopw"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-CreateCadminLambdaFunctionQualifiedArn"
            }
          },
          "UpdateCadminLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateCadminLambdaVersionodCBCEqKi1KxEhSsJOpNE4CzQoyG3whWSxuxvYAfk"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-UpdateCadminLambdaFunctionQualifiedArn"
            }
          },
          "DeleteCadminLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteCadminLambdaVersionBg7yt9AdqQA18cpA0CQcF43mISsTsNO4ZBlw2escFc"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-DeleteCadminLambdaFunctionQualifiedArn"
            }
          },
          "GetCompaniesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetCompaniesLambdaVersionRzcidZf13nhsGTq0njKC3CHfaNIyOOqvNUiwc2Mvg"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetCompaniesLambdaFunctionQualifiedArn"
            }
          },
          "CreateCompanyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateCompanyLambdaVersionLkoiNv7mq2YpKxGPbcs0RXU3ne0G02hHjTPtaWYxVQ"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-CreateCompanyLambdaFunctionQualifiedArn"
            }
          },
          "UpdateCompanyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateCompanyLambdaVersionOnwLmtZM2HslUZnHISsX6tNZ9vYyQcPUhJDVemoynw"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-UpdateCompanyLambdaFunctionQualifiedArn"
            }
          },
          "DeleteCompanyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteCompanyLambdaVersionjOgs4lKtQUEQHpdD44HjpcsiR01foV4QATrLP26p5A"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-DeleteCompanyLambdaFunctionQualifiedArn"
            }
          },
          "LoginLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoginLambdaVersionYYzAEr5GPJu2TR40SAY8P2kLVgCr6anKruNvNNIyM"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-LoginLambdaFunctionQualifiedArn"
            }
          },
          "CreateDashcicleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateDashcicleLambdaVersionhhJzPJ9IfUwB5rCC8FOCYT6633dpHgVlDRAoT4ps"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-CreateDashcicleLambdaFunctionQualifiedArn"
            }
          },
          "GetDashciclesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDashciclesLambdaVersionld48J87tyhOZ8OOubHBSIyTTEl6m4cMShzvv0NBdEV8"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetDashciclesLambdaFunctionQualifiedArn"
            }
          },
          "GetDashcicleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDashcicleLambdaVersionNv5lT1T02y3NtMkByrbzN3aJ9wOca5ZrGbKxqFevSE"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetDashcicleLambdaFunctionQualifiedArn"
            }
          },
          "UpdateDashcicleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateDashcicleLambdaVersionxiahHFY8QwxEMy60i2foL3m0twym0GqAGixfnxfxU"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-UpdateDashcicleLambdaFunctionQualifiedArn"
            }
          },
          "DeleteDashcicleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteDashcicleLambdaVersionwbn4T5SLb1HJsgUMxWg1Eptjq2pSRllDRCTTWsuGo"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-DeleteDashcicleLambdaFunctionQualifiedArn"
            }
          },
          "StartDashtestLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "StartDashtestLambdaVersionWpuGFTqSGX6eETFjlfHVq1n7ixFbxCTbvTJztteVpN8"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-StartDashtestLambdaFunctionQualifiedArn"
            }
          },
          "SaveDashtestDashprogressLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SaveDashtestDashprogressLambdaVersionx1LJwAtZBDeKBwVr6qTkf10zis52OLhsAYnMtBAz5U"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-SaveDashtestDashprogressLambdaFunctionQualifiedArn"
            }
          },
          "GetDashtestDashprogressLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDashtestDashprogressLambdaVersionqBPQD4RZX8TyoxW7aORmdqQ0rC3uiCceZb2Bbv6ris"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-GetDashtestDashprogressLambdaFunctionQualifiedArn"
            }
          },
          "ConfirmDashtestDashcompletionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ConfirmDashtestDashcompletionLambdaVersionacoq0alvEtin5dr1mA6848xiC3zolD8XheENpQe26sM"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-ConfirmDashtestDashcompletionLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-simotec-sls-dev-HttpApiUrl"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": null,
    "pluginsData": {},
    "functions": {
      "listUsers": {
        "handler": "src/maintainers/users/handler.listUsers",
        "events": [
          {
            "httpApi": {
              "path": "/users",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/users"
          }
        ],
        "name": "simotec-sls-dev-listUsers",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "ListUsersLambdaVersionYifuTAK2DQCayRAiSN4tMA9HY6Du9xsAMs0aRIhz0"
      },
      "createUser": {
        "handler": "src/maintainers/users/handler.createUser",
        "events": [
          {
            "httpApi": {
              "path": "/users",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/users"
          }
        ],
        "name": "simotec-sls-dev-createUser",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "CreateUserLambdaVersionMgpHQ6qyX7hvZZggBd9TsP8kBsU5A9qJGiUpka8"
      },
      "editUser": {
        "handler": "src/maintainers/users/handler.editUser",
        "events": [
          {
            "httpApi": {
              "path": "/users/{id}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/users/{id}"
          }
        ],
        "name": "simotec-sls-dev-editUser",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "EditUserLambdaVersion3nYpBgp3JZLTzmNkqvyRj1e3vl5eMlV7dwRcNoQ6yk"
      },
      "deleteUser": {
        "handler": "src/maintainers/users/handler.deleteUser",
        "events": [
          {
            "httpApi": {
              "path": "/users/{id}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/users/{id}"
          }
        ],
        "name": "simotec-sls-dev-deleteUser",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "DeleteUserLambdaVersion6KrSKWH8248jD8jHnAnYAICH0WBLbugriH1XC2qynY"
      },
      "getDashboardStats": {
        "handler": "src/maintainers/users/handler.getDashboardStats",
        "events": [
          {
            "httpApi": {
              "path": "/dashboard/regular-users/count",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/dashboard/regular-users/count"
          },
          {
            "httpApi": {
              "path": "/dashboard/assigned-tests/count",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/dashboard/assigned-tests/count"
          }
        ],
        "name": "simotec-sls-dev-getDashboardStats",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetDashboardStatsLambdaVersionhbFYz1e3g9ddnz9yEv0smrwTyBIrpBZ4hnKLEWjTRY"
      },
      "getCadmins": {
        "handler": "src/maintainers/cadmins/handler.listCadmins",
        "events": [
          {
            "httpApi": {
              "path": "/cadmins",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/cadmins"
          }
        ],
        "name": "simotec-sls-dev-getCadmins",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetCadminsLambdaVersionYevjSIzxlumiHlOJ75jioPAuI8yMFLSp6Jn2vopbeXE"
      },
      "createCadmin": {
        "handler": "src/maintainers/cadmins/handler.createCadmin",
        "events": [
          {
            "httpApi": {
              "path": "/cadmins",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/cadmins"
          }
        ],
        "name": "simotec-sls-dev-createCadmin",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "CreateCadminLambdaVersionf4nssFwdFdgMchqYRCpZkxaEtJFq5EanildPvDopw"
      },
      "updateCadmin": {
        "handler": "src/maintainers/cadmins/handler.updateCadmin",
        "events": [
          {
            "httpApi": {
              "path": "/cadmins/{id}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/cadmins/{id}"
          }
        ],
        "name": "simotec-sls-dev-updateCadmin",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "UpdateCadminLambdaVersionodCBCEqKi1KxEhSsJOpNE4CzQoyG3whWSxuxvYAfk"
      },
      "deleteCadmin": {
        "handler": "src/maintainers/cadmins/handler.deleteCadmin",
        "events": [
          {
            "httpApi": {
              "path": "/cadmins/{id}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/cadmins/{id}"
          }
        ],
        "name": "simotec-sls-dev-deleteCadmin",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "DeleteCadminLambdaVersionBg7yt9AdqQA18cpA0CQcF43mISsTsNO4ZBlw2escFc"
      },
      "getCompanies": {
        "handler": "src/maintainers/companies/handler.listCompanies",
        "events": [
          {
            "httpApi": {
              "path": "/companies",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/companies"
          }
        ],
        "name": "simotec-sls-dev-getCompanies",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetCompaniesLambdaVersionRzcidZf13nhsGTq0njKC3CHfaNIyOOqvNUiwc2Mvg"
      },
      "createCompany": {
        "handler": "src/maintainers/companies/handler.createCompany",
        "events": [
          {
            "httpApi": {
              "path": "/companies",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/companies"
          }
        ],
        "name": "simotec-sls-dev-createCompany",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "CreateCompanyLambdaVersionLkoiNv7mq2YpKxGPbcs0RXU3ne0G02hHjTPtaWYxVQ"
      },
      "updateCompany": {
        "handler": "src/maintainers/companies/handler.editCompany",
        "events": [
          {
            "httpApi": {
              "path": "/companies/{id}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/companies/{id}"
          }
        ],
        "name": "simotec-sls-dev-updateCompany",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "UpdateCompanyLambdaVersionOnwLmtZM2HslUZnHISsX6tNZ9vYyQcPUhJDVemoynw"
      },
      "deleteCompany": {
        "handler": "src/maintainers/companies/handler.deleteCompany",
        "events": [
          {
            "httpApi": {
              "path": "/companies/{id}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/companies/{id}"
          }
        ],
        "name": "simotec-sls-dev-deleteCompany",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "DeleteCompanyLambdaVersionjOgs4lKtQUEQHpdD44HjpcsiR01foV4QATrLP26p5A"
      },
      "login": {
        "handler": "src/maintainers/auth/handler.loginHandler",
        "events": [
          {
            "httpApi": {
              "path": "/auth/login",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/auth/login"
          }
        ],
        "name": "simotec-sls-dev-login",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "LoginLambdaVersionYYzAEr5GPJu2TR40SAY8P2kLVgCr6anKruNvNNIyM"
      },
      "create-cicle": {
        "handler": "src/maintainers/cycles/handler.createEvaluationCycle",
        "events": [
          {
            "httpApi": {
              "path": "/cycles",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/cycles"
          }
        ],
        "name": "simotec-sls-dev-create-cicle",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "CreateDashcicleLambdaVersionhhJzPJ9IfUwB5rCC8FOCYT6633dpHgVlDRAoT4ps"
      },
      "get-cicles": {
        "handler": "src/maintainers/cycles/handler.listCycles",
        "events": [
          {
            "httpApi": {
              "path": "/cycles",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/cycles"
          }
        ],
        "name": "simotec-sls-dev-get-cicles",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetDashciclesLambdaVersionld48J87tyhOZ8OOubHBSIyTTEl6m4cMShzvv0NBdEV8"
      },
      "get-cicle": {
        "handler": "src/maintainers/cycles/handler.getCycle",
        "events": [
          {
            "httpApi": {
              "path": "/cycles/{id}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/cycles/{id}"
          }
        ],
        "name": "simotec-sls-dev-get-cicle",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetDashcicleLambdaVersionNv5lT1T02y3NtMkByrbzN3aJ9wOca5ZrGbKxqFevSE"
      },
      "update-cicle": {
        "handler": "src/maintainers/cycles/handler.updateCycle",
        "events": [
          {
            "httpApi": {
              "path": "/cycles/{id}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/cycles/{id}"
          }
        ],
        "name": "simotec-sls-dev-update-cicle",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "UpdateDashcicleLambdaVersionxiahHFY8QwxEMy60i2foL3m0twym0GqAGixfnxfxU"
      },
      "delete-cicle": {
        "handler": "src/maintainers/cycles/handler.deleteCycle",
        "events": [
          {
            "httpApi": {
              "path": "/cycles/{id}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/cycles/{id}"
          }
        ],
        "name": "simotec-sls-dev-delete-cicle",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "DeleteDashcicleLambdaVersionwbn4T5SLb1HJsgUMxWg1Eptjq2pSRllDRCTTWsuGo"
      },
      "start-test": {
        "handler": "src/maintainers/users-tests/handler.startTest",
        "events": [
          {
            "httpApi": {
              "path": "/users-tests",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/users-tests"
          }
        ],
        "name": "simotec-sls-dev-start-test",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "StartDashtestLambdaVersionWpuGFTqSGX6eETFjlfHVq1n7ixFbxCTbvTJztteVpN8"
      },
      "save-test-progress": {
        "handler": "src/maintainers/users-tests/handler.saveTestProgress",
        "events": [
          {
            "httpApi": {
              "path": "/users-tests/{id}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/users-tests/{id}"
          }
        ],
        "name": "simotec-sls-dev-save-test-progress",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "SaveDashtestDashprogressLambdaVersionx1LJwAtZBDeKBwVr6qTkf10zis52OLhsAYnMtBAz5U"
      },
      "get-test-progress": {
        "handler": "src/maintainers/users-tests/handler.getTestProgress",
        "events": [
          {
            "httpApi": {
              "path": "/users-tests/test-progress",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/users-tests/test-progress"
          }
        ],
        "name": "simotec-sls-dev-get-test-progress",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetDashtestDashprogressLambdaVersionqBPQD4RZX8TyoxW7aORmdqQ0rC3uiCceZb2Bbv6ris"
      },
      "confirm-test-completion": {
        "handler": "src/maintainers/users-tests/handler.confirmTestCompletion",
        "events": [
          {
            "httpApi": {
              "path": "/comfirm-test-completed",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/comfirm-test-completed"
          }
        ],
        "name": "simotec-sls-dev-confirm-test-completion",
        "package": {},
        "memory": 3000,
        "timeout": 20,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "ConfirmDashtestDashcompletionLambdaVersionacoq0alvEtin5dr1mA6848xiC3zolD8XheENpQe26sM"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless",
    "initialServerlessConfig": {
      "service": "simotec-sls",
      "frameworkVersion": "4",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "custom": null
    },
    "appId": null,
    "orgId": null,
    "layers": {},
    "artifact": "C:\\Users\\alfre\\OneDrive\\Documentos\\GitHub\\Proyecto\\simotec-sls-develop\\.serverless\\simotec-sls.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/simotec-sls/dev/1742503178680-2025-03-20T20:39:38.680Z",
    "artifact": "simotec-sls.zip"
  }
}